{"version":3,"file":"credit_billing.js","sourceRoot":"","sources":["../../../../src/services/billing/credit_billing.ts"],"names":[],"mappings":"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","sourcesContent":["import { NotificationType } from \"../../types\";\nimport { withAuth } from \"../../lib/withAuth\";\nimport { sendNotification } from \"../notification/email_notification\";\nimport { supabase_service } from \"../supabase\";\nimport { logger } from \"../../lib/logger\";\nimport * as Sentry from \"@sentry/node\";\nimport { AuthCreditUsageChunk } from \"../../controllers/v1/types\";\nimport { getACUC, setCachedACUC } from \"../../controllers/auth\";\nimport { issueCredits } from \"./issue_credits\";\nimport { redlock } from \"../redlock\";\nimport { autoCharge } from \"./auto_charge\";\nimport { getValue, setValue } from \"../redis\";\n\nconst FREE_CREDITS = 500;\n\n/**\n * If you do not know the subscription_id in the current context, pass subscription_id as undefined.\n */\nexport async function billTeam(team_id: string, subscription_id: string | null | undefined, credits: number) {\n  return withAuth(supaBillTeam, { success: true, message: \"No DB, bypassed.\" })(team_id, subscription_id, credits);\n}\nexport async function supaBillTeam(team_id: string, subscription_id: string | null | undefined, credits: number) {\n  if (team_id === \"preview\") {\n    return { success: true, message: \"Preview team, no credits used\" };\n  }\n  logger.info(`Billing team ${team_id} for ${credits} credits`);\n\n  const { data, error } = await supabase_service.rpc(\"bill_team\", {\n    _team_id: team_id,\n    sub_id: subscription_id ?? null,\n    fetch_subscription: subscription_id === undefined,\n    credits,\n  });\n\n  if (error) {\n    Sentry.captureException(error);\n    logger.error(\"Failed to bill team: \" + JSON.stringify(error));\n    return;\n  }\n\n  (async () => {\n    for (const apiKey of (data ?? []).map((x) => x.api_key)) {\n      await setCachedACUC(apiKey, (acuc) =>\n        acuc\n          ? {\n              ...acuc,\n              credits_used: acuc.credits_used + credits,\n              adjusted_credits_used: acuc.adjusted_credits_used + credits,\n              remaining_credits: acuc.remaining_credits - credits,\n            }\n          : null\n      );\n    }\n  })();\n}\n\nexport type CheckTeamCreditsResponse = {\n  success: boolean,\n  message: string,\n  remainingCredits: number,\n  chunk?: AuthCreditUsageChunk,\n}\n\nexport async function checkTeamCredits(chunk: AuthCreditUsageChunk | null, team_id: string, credits: number): Promise<CheckTeamCreditsResponse> {\n  return withAuth(supaCheckTeamCredits, { success: true, message: \"No DB, bypassed\", remainingCredits: Infinity })(chunk, team_id, credits);\n}\n\n// if team has enough credits for the operation, return true, else return false\nexport async function supaCheckTeamCredits(chunk: AuthCreditUsageChunk | null, team_id: string, credits: number): Promise<CheckTeamCreditsResponse> {\n  // WARNING: chunk will be null if team_id is preview -- do not perform operations on it under ANY circumstances - mogery\n  if (team_id === \"preview\") {\n    return { success: true, message: \"Preview team, no credits used\", remainingCredits: Infinity };\n  } else if (chunk === null) {\n    throw new Error(\"NULL ACUC passed to supaCheckTeamCredits\");\n  }\n\n  const creditsWillBeUsed = chunk.adjusted_credits_used + credits;\n\n  // In case chunk.price_credits is undefined, set it to a large number to avoid mistakes\n  const totalPriceCredits = chunk.total_credits_sum ?? 100000000;\n  // Removal of + credits\n  const creditUsagePercentage = chunk.adjusted_credits_used / totalPriceCredits;\n\n  let isAutoRechargeEnabled = false, autoRechargeThreshold = 1000;\n  const cacheKey = `team_auto_recharge_${team_id}`;\n  let cachedData = await getValue(cacheKey);\n  if (cachedData) {\n    const parsedData = JSON.parse(cachedData);\n    isAutoRechargeEnabled = parsedData.auto_recharge;\n    autoRechargeThreshold = parsedData.auto_recharge_threshold;\n  } else {\n    const { data, error } = await supabase_service\n      .from(\"teams\")\n      .select(\"auto_recharge, auto_recharge_threshold\")\n      .eq(\"id\", team_id)\n      .single();\n\n    if (data) {\n      isAutoRechargeEnabled = data.auto_recharge;\n      autoRechargeThreshold = data.auto_recharge_threshold;\n      await setValue(cacheKey, JSON.stringify(data), 300); // Cache for 5 minutes (300 seconds)\n    }\n  }\n\n  if (isAutoRechargeEnabled && chunk.remaining_credits < autoRechargeThreshold) {\n    const autoChargeResult = await autoCharge(chunk, autoRechargeThreshold);\n    if (autoChargeResult.success) {\n      return {\n        success: true,\n      message: autoChargeResult.message,\n      remainingCredits: autoChargeResult.remainingCredits,\n      chunk: autoChargeResult.chunk,\n    };\n  }\n  }\n\n  // Compare the adjusted total credits used with the credits allowed by the plan\n  if (creditsWillBeUsed > totalPriceCredits) {\n    // Only notify if their actual credits (not what they will use) used is greater than the total price credits\n    if (chunk.adjusted_credits_used > totalPriceCredits) {\n      sendNotification(\n        team_id,\n        NotificationType.LIMIT_REACHED,\n        chunk.sub_current_period_start,\n        chunk.sub_current_period_end,\n        chunk\n      );\n    }\n    return {\n      success: false,\n      message:\n        \"Insufficient credits to perform this request. For more credits, you can upgrade your plan at https://firecrawl.dev/pricing.\",\n      remainingCredits: chunk.remaining_credits,\n      chunk,\n    };\n  } else if (creditUsagePercentage >= 0.8 && creditUsagePercentage < 1) {\n    // Send email notification for approaching credit limit\n    sendNotification(\n      team_id,\n      NotificationType.APPROACHING_LIMIT,\n      chunk.sub_current_period_start,\n      chunk.sub_current_period_end,\n      chunk\n    );\n  }\n\n  return {\n    success: true,\n    message: \"Sufficient credits available\",\n    remainingCredits: chunk.remaining_credits,\n    chunk,\n  };\n}\n\n// Count the total credits used by a team within the current billing period and return the remaining credits.\nexport async function countCreditsAndRemainingForCurrentBillingPeriod(\n  team_id: string\n) {\n  // 1. Retrieve the team's active subscription based on the team_id.\n  const { data: subscription, error: subscriptionError } =\n    await supabase_service\n      .from(\"subscriptions\")\n      .select(\"id, price_id, current_period_start, current_period_end\")\n      .eq(\"team_id\", team_id)\n      .single();\n\n  const { data: coupons } = await supabase_service\n    .from(\"coupons\")\n    .select(\"credits\")\n    .eq(\"team_id\", team_id)\n    .eq(\"status\", \"active\");\n\n  let couponCredits = 0;\n  if (coupons && coupons.length > 0) {\n    couponCredits = coupons.reduce(\n      (total, coupon) => total + coupon.credits,\n      0\n    );\n  }\n\n  if (subscriptionError || !subscription) {\n    // Free\n    const { data: creditUsages, error: creditUsageError } =\n      await supabase_service\n        .from(\"credit_usage\")\n        .select(\"credits_used\")\n        .is(\"subscription_id\", null)\n        .eq(\"team_id\", team_id);\n\n    if (creditUsageError || !creditUsages) {\n      throw new Error(\n        `Failed to retrieve credit usage for team_id: ${team_id}`\n      );\n    }\n\n    const totalCreditsUsed = creditUsages.reduce(\n      (acc, usage) => acc + usage.credits_used,\n      0\n    );\n\n    const remainingCredits = FREE_CREDITS + couponCredits - totalCreditsUsed;\n    return {\n      totalCreditsUsed: totalCreditsUsed,\n      remainingCredits,\n      totalCredits: FREE_CREDITS + couponCredits,\n    };\n  }\n\n  const { data: creditUsages, error: creditUsageError } = await supabase_service\n    .from(\"credit_usage\")\n    .select(\"credits_used\")\n    .eq(\"subscription_id\", subscription.id)\n    .gte(\"created_at\", subscription.current_period_start)\n    .lte(\"created_at\", subscription.current_period_end);\n\n  if (creditUsageError || !creditUsages) {\n    throw new Error(\n      `Failed to retrieve credit usage for subscription_id: ${subscription.id}`\n    );\n  }\n\n  const totalCreditsUsed = creditUsages.reduce(\n    (acc, usage) => acc + usage.credits_used,\n    0\n  );\n\n  const { data: price, error: priceError } = await supabase_service\n    .from(\"prices\")\n    .select(\"credits\")\n    .eq(\"id\", subscription.price_id)\n    .single();\n\n  if (priceError || !price) {\n    throw new Error(\n      `Failed to retrieve price for price_id: ${subscription.price_id}`\n    );\n  }\n\n  const remainingCredits = price.credits + couponCredits - totalCreditsUsed;\n\n  return {\n    totalCreditsUsed,\n    remainingCredits,\n    totalCredits: price.credits,\n  };\n}\n"]}
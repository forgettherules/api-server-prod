{"version":3,"file":"rate-limiter.test.js","sourceRoot":"","sources":["../../../src/services/rate-limiter.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getRateLimiter,\n  serverRateLimiter,\n  testSuiteRateLimiter,\n  redisRateLimitClient,\n} from \"./rate-limiter\";\nimport { RateLimiterMode } from \"../../src/types\";\nimport { RateLimiterRedis } from \"rate-limiter-flexible\";\n\ndescribe(\"Rate Limiter Service\", () => {\n  beforeAll(async () => {\n    try {\n      await redisRateLimitClient.connect();\n      // if (process.env.REDIS_RATE_LIMIT_URL === \"redis://localhost:6379\") {\n      //   console.log(\"Erasing all keys\");\n      //   // erase all the keys that start with \"test-prefix\"\n      //   const keys = await redisRateLimitClient.keys(\"test-prefix:*\");\n      //   if (keys.length > 0) {\n      //     await redisRateLimitClient.del(...keys);\n      //   }\n      // }\n    } catch (error) {}\n  });\n\n  afterAll(async () => {\n    try {\n      // if (process.env.REDIS_RATE_LIMIT_URL === \"redis://localhost:6379\") {\n        await redisRateLimitClient.disconnect();\n      // }\n    } catch (error) {}\n  });\n\n  it(\"should return the testSuiteRateLimiter for specific tokens\", () => {\n    const limiter = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:a01ccae\"\n    );\n    expect(limiter).toBe(testSuiteRateLimiter);\n\n    const limiter2 = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:6254cf9\"\n    );\n    expect(limiter2).toBe(testSuiteRateLimiter);\n  });\n\n  it(\"should return the serverRateLimiter if mode is not found\", () => {\n    const limiter = getRateLimiter(\n      \"nonexistent\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter.points).toBe(serverRateLimiter.points);\n  });\n\n  it(\"should return the correct rate limiter based on mode and plan\", () => {\n    const limiter = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(2);\n\n    const limiter2 = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"standard\"\n    );\n    expect(limiter2.points).toBe(100);\n\n    const limiter3 = getRateLimiter(\n      \"search\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"growth\"\n    );\n    expect(limiter3.points).toBe(500);\n\n    const limiter4 = getRateLimiter(\n      \"crawlStatus\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"growth\"\n    );\n    expect(limiter4.points).toBe(250);\n  });\n\n  it(\"should return the default rate limiter if plan is not provided\", () => {\n    const limiter = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter.points).toBe(3);\n\n    const limiter2 = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(20);\n  });\n\n  it(\"should create a new RateLimiterRedis instance with correct parameters\", () => {\n    const keyPrefix = \"test-prefix\";\n    const points = 10;\n    const limiter = new RateLimiterRedis({\n      storeClient: redisRateLimitClient,\n      keyPrefix,\n      points,\n      duration: 60,\n    });\n\n    expect(limiter.keyPrefix).toBe(keyPrefix);\n    expect(limiter.points).toBe(points);\n    expect(limiter.duration).toBe(60);\n  });\n\n  it(\"should return the correct rate limiter for 'preview' mode\", () => {\n    const limiter = getRateLimiter(\n      \"preview\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(5);\n\n    const limiter2 = getRateLimiter(\n      \"preview\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(5);\n  });\n\n  it(\"should return the correct rate limiter for 'account' mode\", () => {\n    const limiter = getRateLimiter(\n      \"account\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(100);\n\n    const limiter2 = getRateLimiter(\n      \"account\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(100);\n  });\n\n  it(\"should return the correct rate limiter for 'crawlStatus' mode\", () => {\n    const limiter = getRateLimiter(\n      \"crawlStatus\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(150);\n\n    const limiter2 = getRateLimiter(\n      \"crawlStatus\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(250);\n  });\n\n  it(\"should consume points correctly for 'crawl' mode\", async () => {\n    const limiter = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someTokenCRAWL\",\n      \"free\"\n    );\n    const consumePoints = 1;\n\n    const res = await limiter.consume(\n      \"test-prefix:someTokenCRAWL\",\n      consumePoints\n    );\n    expect(res.remainingPoints).toBe(1);\n  });\n\n  it(\"should consume points correctly for 'scrape' mode (DEFAULT)\", async () => {\n    const limiter = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someTokenX\"\n    );\n    const consumePoints = 4;\n\n    const res = await limiter.consume(\"test-prefix:someTokenX\", consumePoints);\n    expect(res.remainingPoints).toBe(16);\n  });\n\n  it(\"should consume points correctly for 'scrape' mode (HOBBY)\", async () => {\n    const limiter = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someTokenXY\",\n      \"hobby\"\n    );\n    expect(limiter.points).toBe(20);\n\n    const consumePoints = 5;\n\n    const res = await limiter.consume(\"test-prefix:someTokenXY\", consumePoints);\n    expect(res.consumedPoints).toBe(5);\n    expect(res.remainingPoints).toBe(15);\n  });\n\n  it(\"should return the correct rate limiter for 'crawl' mode\", () => {\n    const limiter = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(2);\n\n    const limiter2 = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"starter\"\n    );\n    expect(limiter2.points).toBe(10);\n\n    const limiter3 = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"standard\"\n    );\n    expect(limiter3.points).toBe(5);\n  });\n\n  it(\"should return the correct rate limiter for 'scrape' mode\", () => {\n    const limiter = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(10);\n\n    const limiter2 = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"starter\"\n    );\n    expect(limiter2.points).toBe(100);\n\n    const limiter3 = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"standard\"\n    );\n    expect(limiter3.points).toBe(100);\n\n    const limiter4 = getRateLimiter(\n      \"scrape\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"growth\"\n    );\n    expect(limiter4.points).toBe(1000);\n  });\n\n  it(\"should return the correct rate limiter for 'search' mode\", () => {\n    const limiter = getRateLimiter(\n      \"search\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(5);\n\n    const limiter2 = getRateLimiter(\n      \"search\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"starter\"\n    );\n    expect(limiter2.points).toBe(50);\n\n    const limiter3 = getRateLimiter(\n      \"search\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"standard\"\n    );\n    expect(limiter3.points).toBe(50);\n  });\n\n  it(\"should return the correct rate limiter for 'preview' mode\", () => {\n    const limiter = getRateLimiter(\n      \"preview\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(5);\n\n    const limiter2 = getRateLimiter(\n      \"preview\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(5);\n  });\n\n  it(\"should return the correct rate limiter for 'account' mode\", () => {\n    const limiter = getRateLimiter(\n      \"account\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(100);\n\n    const limiter2 = getRateLimiter(\n      \"account\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(100);\n  });\n\n  it(\"should return the correct rate limiter for 'crawlStatus' mode\", () => {\n    const limiter = getRateLimiter(\n      \"crawlStatus\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(150);\n\n    const limiter2 = getRateLimiter(\n      \"crawlStatus\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(250);\n  });\n\n  it(\"should return the correct rate limiter for 'testSuite' mode\", () => {\n    const limiter = getRateLimiter(\n      \"testSuite\" as RateLimiterMode,\n      \"test-prefix:someToken\",\n      \"free\"\n    );\n    expect(limiter.points).toBe(10000);\n\n    const limiter2 = getRateLimiter(\n      \"testSuite\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    expect(limiter2.points).toBe(10000);\n  });\n\n  it(\"should throw an error when consuming more points than available\", async () => {\n    const limiter = getRateLimiter(\n      \"crawl\" as RateLimiterMode,\n      \"test-prefix:someToken\"\n    );\n    const consumePoints = limiter.points + 1;\n\n    try {\n      await limiter.consume(\"test-prefix:someToken\", consumePoints);\n    } catch (error) {\n      // expect remaining points to be 0\n      const res = await limiter.get(\"test-prefix:someToken\");\n      expect(res?.remainingPoints).toBe(0);\n    }\n  });\n\n  it(\"should reset points after duration\", async () => {\n    const keyPrefix = \"test-prefix\";\n    const points = 10;\n    const duration = 1; // 1 second\n    const limiter = new RateLimiterRedis({\n      storeClient: redisRateLimitClient,\n      keyPrefix,\n      points,\n      duration,\n    });\n\n    const consumePoints = 5;\n    await limiter.consume(\"test-prefix:someToken\", consumePoints);\n    await new Promise((resolve) => setTimeout(resolve, duration * 1000 + 100)); // Wait for duration + 100ms\n\n    const res = await limiter.consume(\"test-prefix:someToken\", consumePoints);\n    expect(res.remainingPoints).toBe(points - consumePoints);\n  });\n});\n"]}
{"version":3,"file":"supabase.js","sourceRoot":"","sources":["../../../src/services/supabase.ts"],"names":[],"mappings":";;;AAAA,uDAAqE;AACrE,0CAAuC;AACvC,mCAAsC;AACtC,IAAA,qBAAY,GAAE,CAAC;AAEf,sGAAsG;AACtG,MAAM,eAAe;IACX,MAAM,GAA0B,IAAI,CAAC;IAE7C;QACE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;QAC7C,MAAM,oBAAoB,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;QAChE,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,CAAC;QACzE,kFAAkF;QAClF,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACzB,8EAA8E;YAC9E,eAAM,CAAC,IAAI,CACT,sEAAsE,CACvE,CAAC;YACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC;aAAM,IAAI,CAAC,WAAW,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACjD,eAAM,CAAC,KAAK,CACV,iMAAiM,CAClM,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,IAAA,0BAAY,EAAC,WAAW,EAAE,oBAAoB,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IAED,oEAAoE;IACpE,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAED,oFAAoF;AACpF,gHAAgH;AACnG,QAAA,gBAAgB,GAAmB,IAAI,KAAK,CACvD,IAAI,eAAe,EAAE,EACrB;IACE,GAAG,EAAE,UAAU,MAAM,EAAE,IAAI,EAAE,QAAQ;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAClC,6GAA6G;QAC7G,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;YACpB,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACxD,CAAC,CAAC;QACJ,CAAC;QACD,gEAAgE;QAChE,IAAI,IAAI,IAAI,MAAM,EAAE,CAAC;YACnB,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC7C,CAAC;QACD,qDAAqD;QACrD,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;CACF,CAC2B,CAAC","sourcesContent":["import { createClient, SupabaseClient } from \"@supabase/supabase-js\";\nimport { logger } from \"../lib/logger\";\nimport { configDotenv } from \"dotenv\";\nconfigDotenv();\n\n// SupabaseService class initializes the Supabase client conditionally based on environment variables.\nclass SupabaseService {\n  private client: SupabaseClient | null = null;\n\n  constructor() {\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseServiceToken = process.env.SUPABASE_SERVICE_TOKEN;\n    const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === 'true';\n    // Only initialize the Supabase client if both URL and Service Token are provided.\n    if (!useDbAuthentication) {\n      // Warn the user that Authentication is disabled by setting the client to null\n      logger.warn(\n        \"Authentication is disabled. Supabase client will not be initialized.\"\n      );\n      this.client = null;\n    } else if (!supabaseUrl || !supabaseServiceToken) {\n      logger.error(\n        \"Supabase environment variables aren't configured correctly. Supabase client will not be initialized. Fix ENV configuration or disable DB authentication with USE_DB_AUTHENTICATION env variable\"\n      );\n    } else {\n      this.client = createClient(supabaseUrl, supabaseServiceToken);\n    }\n  }\n\n  // Provides access to the initialized Supabase client, if available.\n  getClient(): SupabaseClient | null {\n    return this.client;\n  }\n}\n\n// Using a Proxy to handle dynamic access to the Supabase client or service methods.\n// This approach ensures that if Supabase is not configured, any attempt to use it will result in a clear error.\nexport const supabase_service: SupabaseClient = new Proxy(\n  new SupabaseService(),\n  {\n    get: function (target, prop, receiver) {\n      const client = target.getClient();\n      // If the Supabase client is not initialized, intercept property access to provide meaningful error feedback.\n      if (client === null) {\n        return () => {\n          throw new Error(\"Supabase client is not configured.\");\n        };\n      }\n      // Direct access to SupabaseService properties takes precedence.\n      if (prop in target) {\n        return Reflect.get(target, prop, receiver);\n      }\n      // Otherwise, delegate access to the Supabase client.\n      return Reflect.get(client, prop, receiver);\n    },\n  }\n) as unknown as SupabaseClient;\n"]}
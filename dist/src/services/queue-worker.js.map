{"version":3,"file":"queue-worker.js","sourceRoot":"","sources":["../../../src/services/queue-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import \"dotenv/config\";\nimport \"./sentry\";\nimport * as Sentry from \"@sentry/node\";\nimport { CustomError } from \"../lib/custom-error\";\nimport {\n  getScrapeQueue,\n  redisConnection,\n  scrapeQueueName,\n} from \"./queue-service\";\nimport { startWebScraperPipeline } from \"../main/runWebScraper\";\nimport { callWebhook } from \"./webhook\";\nimport { logJob } from \"./logging/log_job\";\nimport { Job, Queue } from \"bullmq\";\nimport { logger } from \"../lib/logger\";\nimport { Worker } from \"bullmq\";\nimport systemMonitor from \"./system-monitor\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCrawlJob,\n  addCrawlJobDone,\n  crawlToCrawler,\n  finishCrawl,\n  getCrawl,\n  getCrawlJobs,\n  lockURL,\n  normalizeURL,\n} from \"../lib/crawl-redis\";\nimport { StoredCrawl } from \"../lib/crawl-redis\";\nimport { addScrapeJob } from \"./queue-jobs\";\nimport {\n  addJobPriority,\n  deleteJobPriority,\n  getJobPriority,\n} from \"../../src/lib/job-priority\";\nimport { PlanType, RateLimiterMode } from \"../types\";\nimport { getJobs } from \"..//controllers/v1/crawl-status\";\nimport { configDotenv } from \"dotenv\";\nimport { scrapeOptions } from \"../controllers/v1/types\";\nimport { getRateLimiterPoints } from \"./rate-limiter\";\nimport { cleanOldConcurrencyLimitEntries, pushConcurrencyLimitActiveJob, removeConcurrencyLimitActiveJob, takeConcurrencyLimitedJob } from \"../lib/concurrency-limit\";\nconfigDotenv();\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst workerLockDuration = Number(process.env.WORKER_LOCK_DURATION) || 60000;\nconst workerStalledCheckInterval =\n  Number(process.env.WORKER_STALLED_CHECK_INTERVAL) || 30000;\nconst jobLockExtendInterval =\n  Number(process.env.JOB_LOCK_EXTEND_INTERVAL) || 15000;\nconst jobLockExtensionTime =\n  Number(process.env.JOB_LOCK_EXTENSION_TIME) || 60000;\n\nconst cantAcceptConnectionInterval =\n  Number(process.env.CANT_ACCEPT_CONNECTION_INTERVAL) || 2000;\nconst connectionMonitorInterval =\n  Number(process.env.CONNECTION_MONITOR_INTERVAL) || 10;\nconst gotJobInterval = Number(process.env.CONNECTION_MONITOR_INTERVAL) || 20;\n\nasync function finishCrawlIfNeeded(job: Job & { id: string }, sc: StoredCrawl) { \n  if (await finishCrawl(job.data.crawl_id)) {\n    if (!job.data.v1) {\n      const jobIDs = await getCrawlJobs(job.data.crawl_id);\n\n      const jobs = (await getJobs(jobIDs)).sort((a, b) => a.timestamp - b.timestamp);\n      // const jobStatuses = await Promise.all(jobs.map((x) => x.getState()));\n      const jobStatus =\n        sc.cancelled // || jobStatuses.some((x) => x === \"failed\")\n          ? \"failed\"\n          : \"completed\";\n\n      const fullDocs = jobs.map((x) =>\n        x.returnvalue ? (Array.isArray(x.returnvalue) ? x.returnvalue[0] : x.returnvalue) : null\n      ).filter(x => x !== null);\n\n      await logJob({\n        job_id: job.data.crawl_id,\n        success: jobStatus === \"completed\",\n        message: sc.cancelled ? \"Cancelled\" : undefined,\n        num_docs: fullDocs.length,\n        docs: [],\n        time_taken: (Date.now() - sc.createdAt) / 1000,\n        team_id: job.data.team_id,\n        mode: job.data.crawlerOptions !== null ? \"crawl\" : \"batch_scrape\",\n        url: sc.originUrl!,\n        scrapeOptions: sc.scrapeOptions,\n        crawlerOptions: sc.crawlerOptions,\n        origin: job.data.origin,\n      });\n\n      const data = {\n        success: jobStatus !== \"failed\",\n        result: {\n          links: fullDocs.map((doc) => {\n            return {\n              content: doc,\n              source: doc?.metadata?.sourceURL ?? doc?.url ?? \"\",\n            };\n          }),\n        },\n        project_id: job.data.project_id,\n        docs: fullDocs,\n      };\n\n      // v0 web hooks, call when done with all the data\n      if (!job.data.v1) {\n        callWebhook(\n          job.data.team_id,\n          job.data.crawl_id,\n          data,\n          job.data.webhook,\n          job.data.v1,\n          job.data.crawlerOptions !== null ? \"crawl.completed\" : \"batch_scrape.completed\"\n        );\n      }\n    } else {\n      const jobIDs = await getCrawlJobs(job.data.crawl_id);\n      const jobStatus =\n        sc.cancelled\n          ? \"failed\"\n          : \"completed\";\n\n      // v1 web hooks, call when done with no data, but with event completed\n      if (job.data.v1 && job.data.webhook) {\n        callWebhook(\n          job.data.team_id,\n          job.data.crawl_id,\n          [],\n          job.data.webhook,\n          job.data.v1,\n          job.data.crawlerOptions !== null ? \"crawl.completed\" : \"batch_scrape.completed\"\n          );\n        }\n\n      await logJob({\n        job_id: job.data.crawl_id,\n        success: jobStatus === \"completed\",\n        message: sc.cancelled ? \"Cancelled\" : undefined,\n        num_docs: jobIDs.length,\n        docs: [],\n        time_taken: (Date.now() - sc.createdAt) / 1000,\n        team_id: job.data.team_id,\n        scrapeOptions: sc.scrapeOptions,\n        mode: job.data.crawlerOptions !== null ? \"crawl\" : \"batch_scrape\",\n        url: sc?.originUrl ?? (job.data.crawlerOptions === null ? \"Batch Scrape\" : \"Unknown\"),\n        crawlerOptions: sc.crawlerOptions,\n        origin: job.data.origin,\n      }, true);\n    }\n  }\n}\n\nconst processJobInternal = async (token: string, job: Job & { id: string }) => {\n  const extendLockInterval = setInterval(async () => {\n    logger.info(`🐂 Worker extending lock on job ${job.id}`);\n    await job.extendLock(token, jobLockExtensionTime);\n  }, jobLockExtendInterval);\n\n  await addJobPriority(job.data.team_id, job.id);\n  let err = null;\n  try {\n    const result = await processJob(job, token);\n    if (result.success) {\n      try {\n        if (job.data.crawl_id && process.env.USE_DB_AUTHENTICATION === \"true\") {\n          await job.moveToCompleted(null, token, false);\n        } else {\n          await job.moveToCompleted(result.document, token, false);\n        }\n      } catch (e) {}\n    } else {\n      await job.moveToFailed((result as any).error, token, false);\n    }\n    \n  } catch (error) {\n    console.log(\"Job failed, error:\", error);\n    Sentry.captureException(error);\n    err = error;\n    await job.moveToFailed(error, token, false);\n  } finally {\n    await deleteJobPriority(job.data.team_id, job.id);\n    clearInterval(extendLockInterval);\n  }\n\n  return err;\n};\n\nlet isShuttingDown = false;\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"Received SIGTERM. Shutting down gracefully...\");\n  isShuttingDown = true;\n});\n\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"Received SIGTERM. Shutting down gracefully...\");\n  isShuttingDown = true;\n});\n\nlet cantAcceptConnectionCount = 0;\n\nconst workerFun = async (\n  queue: Queue,\n  processJobInternal: (token: string, job: Job) => Promise<any>\n) => {\n  const worker = new Worker(queue.name, null, {\n    connection: redisConnection,\n    lockDuration: 1 * 60 * 1000, // 1 minute\n    // lockRenewTime: 15 * 1000, // 15 seconds\n    stalledInterval: 30 * 1000, // 30 seconds\n    maxStalledCount: 10, // 10 times\n  });\n\n  worker.startStalledCheckTimer();\n\n  const monitor = await systemMonitor;\n\n  while (true) {\n    if (isShuttingDown) {\n      console.log(\"No longer accepting new jobs. SIGINT\");\n      break;\n    }\n    const token = uuidv4();\n    const canAcceptConnection = await monitor.acceptConnection();\n    if (!canAcceptConnection) {\n      console.log(\"Cant accept connection\");\n      cantAcceptConnectionCount++;\n\n      if (cantAcceptConnectionCount >= 25) {\n        logger.error(\"WORKER STALLED\", {\n          cpuUsage: await monitor.checkCpuUsage(),\n          memoryUsage: await monitor.checkMemoryUsage(),\n        });\n      }\n\n      await sleep(cantAcceptConnectionInterval); // more sleep\n      continue;\n    } else {\n      cantAcceptConnectionCount = 0;\n    }\n\n    const job = await worker.getNextJob(token);\n    if (job) {\n      async function afterJobDone(job: Job<any, any, string>) {\n        if (job.id && job.data && job.data.team_id && job.data.plan) {\n          await removeConcurrencyLimitActiveJob(job.data.team_id, job.id);\n          cleanOldConcurrencyLimitEntries(job.data.team_id);\n\n          // Queue up next job, if it exists\n          // No need to check if we're under the limit here -- if the current job is finished,\n          // we are 1 under the limit, assuming the job insertion logic never over-inserts. - MG\n          const nextJob = await takeConcurrencyLimitedJob(job.data.team_id);\n          if (nextJob !== null) {\n            await pushConcurrencyLimitActiveJob(job.data.team_id, nextJob.id);\n\n            await queue.add(nextJob.id, {\n              ...nextJob.data,\n              concurrencyLimitHit: true,\n            }, {\n              ...nextJob.opts,\n              jobId: nextJob.id,\n              priority: nextJob.priority,\n            });\n          }\n        }\n      }\n\n      if (job.data && job.data.sentry && Sentry.isInitialized()) {\n        Sentry.continueTrace(\n          {\n            sentryTrace: job.data.sentry.trace,\n            baggage: job.data.sentry.baggage,\n          },\n          () => {\n            Sentry.startSpan(\n              {\n                name: \"Scrape job\",\n                attributes: {\n                  job: job.id,\n                  worker: process.env.FLY_MACHINE_ID ?? worker.id,\n                },\n              },\n              async (span) => {\n                await Sentry.startSpan(\n                  {\n                    name: \"Process scrape job\",\n                    op: \"queue.process\",\n                    attributes: {\n                      \"messaging.message.id\": job.id,\n                      \"messaging.destination.name\": getScrapeQueue().name,\n                      \"messaging.message.body.size\": job.data.sentry.size,\n                      \"messaging.message.receive.latency\":\n                        Date.now() - (job.processedOn ?? job.timestamp),\n                      \"messaging.message.retry.count\": job.attemptsMade,\n                    },\n                  },\n                  async () => {\n                    let res;\n                    try {\n                      res = await processJobInternal(token, job);\n                    } finally { \n                      await afterJobDone(job)\n                    }\n                    \n                    if (res !== null) {\n                      span.setStatus({ code: 2 }); // ERROR\n                    } else {\n                      span.setStatus({ code: 1 }); // OK\n                    }\n                  }\n                );\n              }\n            );\n          }\n        );\n      } else {\n        Sentry.startSpan(\n          {\n            name: \"Scrape job\",\n            attributes: {\n              job: job.id,\n              worker: process.env.FLY_MACHINE_ID ?? worker.id,\n            },\n          },\n          () => {\n            processJobInternal(token, job)\n              .finally(() => afterJobDone(job));\n          }\n        );\n      }\n\n      await sleep(gotJobInterval);\n    } else {\n      await sleep(connectionMonitorInterval);\n    }\n  }\n};\n\nworkerFun(getScrapeQueue(), processJobInternal);\n\nasync function processJob(job: Job & { id: string }, token: string) {\n  logger.info(`🐂 Worker taking job ${job.id}`);\n\n  // Check if the job URL is researchhub and block it immediately\n  // TODO: remove this once solve the root issue\n  if (\n    job.data.url &&\n    (job.data.url.includes(\"researchhub.com\") ||\n      job.data.url.includes(\"ebay.com\") ||\n      job.data.url.includes(\"youtube.com\") ||\n      job.data.url.includes(\"microsoft.com\"))\n  ) {\n    logger.info(`🐂 Blocking job ${job.id} with URL ${job.data.url}`);\n    const data = {\n      success: false,\n      document: null,\n      project_id: job.data.project_id,\n      error:\n        \"URL is blocked. Suspecious activity detected. Please contact help@firecrawl.com if you believe this is an error.\",\n    };\n    return data;\n  }\n\n  try {\n    job.updateProgress({\n      current: 1,\n      total: 100,\n      current_step: \"SCRAPING\",\n      current_url: \"\",\n    });\n    const start = Date.now();\n\n    const pipeline = await Promise.race([\n      startWebScraperPipeline({\n        job,\n        token,\n      }),\n      ...(job.data.scrapeOptions.timeout !== undefined ? [\n        (async () => {\n          await sleep(job.data.scrapeOptions.timeout);\n          throw new Error(\"timeout\")\n        })(),\n      ] : [])\n    ]);\n\n    if (!pipeline.success) {\n      // TODO: let's Not do this\n      throw pipeline.error;\n    }\n\n    const end = Date.now();\n    const timeTakenInSeconds = (end - start) / 1000;\n\n    const doc = pipeline.document;\n\n    const rawHtml = doc.rawHtml ?? \"\";\n\n    const data = {\n      success: true,\n      result: {\n        links: [{\n          content: doc,\n          source: doc?.metadata?.sourceURL ?? doc?.metadata?.url ?? \"\",\n        }],\n      },\n      project_id: job.data.project_id,\n      document: doc,\n    };\n\n    if (job.data.webhook && job.data.mode !== \"crawl\" && job.data.v1) {\n      await callWebhook(\n        job.data.team_id,\n        job.data.crawl_id,\n        data,\n        job.data.webhook,\n        job.data.v1,\n        job.data.crawlerOptions !== null ? \"crawl.page\" : \"batch_scrape.page\",\n        true\n      );\n    }\n\n    if (job.data.crawl_id) {\n      const sc = (await getCrawl(job.data.crawl_id)) as StoredCrawl;\n    \n      if (doc.metadata.url !== undefined && doc.metadata.sourceURL !== undefined && normalizeURL(doc.metadata.url, sc) !== normalizeURL(doc.metadata.sourceURL, sc)) {\n        logger.debug(\"Was redirected, locking new URL...\");\n        await lockURL(job.data.crawl_id, sc, doc.metadata.url);\n      }\n\n      await logJob({\n        job_id: job.id as string,\n        success: true,\n        num_docs: 1,\n        docs: [doc],\n        time_taken: timeTakenInSeconds,\n        team_id: job.data.team_id,\n        mode: job.data.mode,\n        url: job.data.url,\n        crawlerOptions: sc.crawlerOptions,\n        scrapeOptions: job.data.scrapeOptions,\n        origin: job.data.origin,\n        crawl_id: job.data.crawl_id,\n      }, true);\n\n      await addCrawlJobDone(job.data.crawl_id, job.id);\n\n      if (job.data.crawlerOptions !== null) {\n        if (!sc.cancelled) {\n          const crawler = crawlToCrawler(job.data.crawl_id, sc, doc.metadata.url ?? doc.metadata.sourceURL ?? sc.originUrl!);\n\n          const links = crawler.filterLinks(\n            crawler.extractLinksFromHTML(rawHtml ?? \"\", doc.metadata?.url ?? doc.metadata?.sourceURL ?? sc.originUrl!),\n            Infinity,\n            sc.crawlerOptions?.maxDepth ?? 10\n          );\n\n          for (const link of links) {\n            if (await lockURL(job.data.crawl_id, sc, link)) {\n              // This seems to work really welel\n              const jobPriority = await getJobPriority({\n                plan: sc.plan as PlanType,\n                team_id: sc.team_id,\n                basePriority: job.data.crawl_id ? 20 : 10,\n              });\n              const jobId = uuidv4();\n\n              // console.log(\"plan: \",  sc.plan);\n              // console.log(\"team_id: \", sc.team_id)\n              // console.log(\"base priority: \", job.data.crawl_id ? 20 : 10)\n              // console.log(\"job priority: \" , jobPriority, \"\\n\\n\\n\")\n\n              await addScrapeJob(\n                {\n                  url: link,\n                  mode: \"single_urls\",\n                  team_id: sc.team_id,\n                  scrapeOptions: scrapeOptions.parse(sc.scrapeOptions),\n                  internalOptions: sc.internalOptions,\n                  plan: job.data.plan,\n                  origin: job.data.origin,\n                  crawl_id: job.data.crawl_id,\n                  webhook: job.data.webhook,\n                  v1: job.data.v1,\n                },\n                {},\n                jobId,\n                jobPriority\n              );\n\n              await addCrawlJob(job.data.crawl_id, jobId);\n            }\n          }\n        }\n      }\n\n      await finishCrawlIfNeeded(job, sc);\n    }\n\n    logger.info(`🐂 Job done ${job.id}`);\n    return data;\n  } catch (error) {\n    const isEarlyTimeout = error instanceof Error && error.message === \"timeout\";\n\n    if (!isEarlyTimeout) {\n      logger.error(`🐂 Job errored ${job.id} - ${error}`);\n\n      Sentry.captureException(error, {\n        data: {\n          job: job.id,\n        },\n      });\n\n      if (error instanceof CustomError) {\n        // Here we handle the error, then save the failed job\n        logger.error(error.message); // or any other error handling\n      }\n      logger.error(error);\n      if (error.stack) {\n        logger.error(error.stack);\n      }\n    } else {\n      logger.error(`🐂 Job timed out ${job.id}`);\n    }\n\n    const data = {\n      success: false,\n      document: null,\n      project_id: job.data.project_id,\n      error: error instanceof Error ? error : typeof error === \"string\" ? new Error(error) : new Error(JSON.stringify(error)),\n    };\n\n    if (!job.data.v1 && (job.data.mode === \"crawl\" || job.data.crawl_id)) {\n      callWebhook(\n        job.data.team_id,\n        job.data.crawl_id ?? (job.id as string),\n        data,\n        job.data.webhook,\n        job.data.v1,\n        job.data.crawlerOptions !== null ? \"crawl.page\" : \"batch_scrape.page\",\n      );\n    }\n    // if (job.data.v1) {\n    //   callWebhook(\n    //     job.data.team_id,\n    //     job.id as string,\n    //     [],\n    //     job.data.webhook,\n    //     job.data.v1,\n    //     \"crawl.failed\"\n    //   );\n    // }\n\n    if (job.data.crawl_id) {\n      const sc = (await getCrawl(job.data.crawl_id)) as StoredCrawl;\n      \n      await addCrawlJobDone(job.data.crawl_id, job.id);\n\n      await logJob({\n        job_id: job.id as string,\n        success: false,\n        message:\n          typeof error === \"string\"\n            ? error\n            : error.message ??\n              \"Something went wrong... Contact help@mendable.ai\",\n        num_docs: 0,\n        docs: [],\n        time_taken: 0,\n        team_id: job.data.team_id,\n        mode: job.data.mode,\n        url: job.data.url,\n        crawlerOptions: sc.crawlerOptions,\n        scrapeOptions: job.data.scrapeOptions,\n        origin: job.data.origin,\n        crawl_id: job.data.crawl_id,\n      }, true);\n      \n      await finishCrawlIfNeeded(job, sc);\n\n      // await logJob({\n      //   job_id: job.data.crawl_id,\n      //   success: false,\n      //   message:\n      //     typeof error === \"string\"\n      //       ? error\n      //       : error.message ??\n      //         \"Something went wrong... Contact help@mendable.ai\",\n      //   num_docs: 0,\n      //   docs: [],\n      //   time_taken: 0,\n      //   team_id: job.data.team_id,\n      //   mode: job.data.crawlerOptions !== null ? \"crawl\" : \"batch_scrape\",\n      //   url: sc ? sc.originUrl ?? job.data.url : job.data.url,\n      //   crawlerOptions: sc ? sc.crawlerOptions : undefined,\n      //   scrapeOptions: sc ? sc.scrapeOptions : job.data.scrapeOptions,\n      //   origin: job.data.origin,\n      // });\n    }\n    // done(null, data);\n    return data;\n  }\n}\n\n// wsq.process(\n//   Math.floor(Number(process.env.NUM_WORKERS_PER_QUEUE ?? 8)),\n//   processJob\n// );\n\n// wsq.on(\"waiting\", j => ScrapeEvents.logJobEvent(j, \"waiting\"));\n// wsq.on(\"active\", j => ScrapeEvents.logJobEvent(j, \"active\"));\n// wsq.on(\"completed\", j => ScrapeEvents.logJobEvent(j, \"completed\"));\n// wsq.on(\"paused\", j => ScrapeEvents.logJobEvent(j, \"paused\"));\n// wsq.on(\"resumed\", j => ScrapeEvents.logJobEvent(j, \"resumed\"));\n// wsq.on(\"removed\", j => ScrapeEvents.logJobEvent(j, \"removed\"));\n"]}
{"version":3,"file":"email_notification.js","sourceRoot":"","sources":["../../../../src/services/notification/email_notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { supabase_service } from \"../supabase\";\nimport { withAuth } from \"../../lib/withAuth\";\nimport { Resend } from \"resend\";\nimport { NotificationType } from \"../../types\";\nimport { logger } from \"../../../src/lib/logger\";\nimport { sendSlackWebhook } from \"../alerts/slack\";\nimport { getNotificationString } from \"./notification_string\";\nimport { AuthCreditUsageChunk } from \"../../controllers/v1/types\";\nimport { redlock } from \"../redlock\";\n\nconst emailTemplates: Record<\n  NotificationType,\n  { subject: string; html: string }\n> = {\n  [NotificationType.APPROACHING_LIMIT]: {\n    subject: \"You've used 80% of your credit limit - Firecrawl\",\n    html: \"Hey there,<br/><p>You are approaching your credit limit for this billing period. Your usage right now is around 80% of your total credit limit. Consider upgrading your plan to avoid hitting the limit. Check out our <a href='https://firecrawl.dev/pricing'>pricing page</a> for more info.</p><br/>Thanks,<br/>Firecrawl Team<br/>\",\n  },\n  [NotificationType.LIMIT_REACHED]: {\n    subject:\n      \"Credit Limit Reached! Take action now to resume usage - Firecrawl\",\n    html: \"Hey there,<br/><p>You have reached your credit limit for this billing period. To resume usage, please upgrade your plan. Check out our <a href='https://firecrawl.dev/pricing'>pricing page</a> for more info.</p><br/>Thanks,<br/>Firecrawl Team<br/>\",\n  },\n  [NotificationType.RATE_LIMIT_REACHED]: {\n    subject: \"Rate Limit Reached - Firecrawl\",\n    html: \"Hey there,<br/><p>You've hit one of the Firecrawl endpoint's rate limit! Take a breather and try again in a few moments. If you need higher rate limits, consider upgrading your plan. Check out our <a href='https://firecrawl.dev/pricing'>pricing page</a> for more info.</p><p>If you have any questions, feel free to reach out to us at <a href='mailto:help@firecrawl.com'>help@firecrawl.com</a></p><br/>Thanks,<br/>Firecrawl Team<br/><br/>Ps. this email is only sent once every 7 days if you reach a rate limit.\",\n  },\n  [NotificationType.AUTO_RECHARGE_SUCCESS]: {\n    subject: \"Auto recharge successful - Firecrawl\",\n    html: \"Hey there,<br/><p>Your account was successfully recharged with 1000 credits because your remaining credits were below the threshold. Consider upgrading your plan at <a href='https://firecrawl.dev/pricing'>firecrawl.dev/pricing</a> to avoid hitting the limit.</p><br/>Thanks,<br/>Firecrawl Team<br/>\",\n  },\n  [NotificationType.AUTO_RECHARGE_FAILED]: {\n    subject: \"Auto recharge failed - Firecrawl\",\n    html: \"Hey there,<br/><p>Your auto recharge failed. Please try again manually. If the issue persists, please reach out to us at <a href='mailto:help@firecrawl.com'>help@firecrawl.com</a></p><br/>Thanks,<br/>Firecrawl Team<br/>\",\n  },\n};\n\nexport async function sendNotification(\n  team_id: string,\n  notificationType: NotificationType,\n  startDateString: string | null,\n  endDateString: string | null,\n  chunk: AuthCreditUsageChunk,\n  bypassRecentChecks: boolean = false\n) {\n  return withAuth(sendNotificationInternal, undefined)(\n    team_id,\n    notificationType,\n    startDateString,\n    endDateString,\n    chunk,\n    bypassRecentChecks\n  );\n}\n\nexport async function sendEmailNotification(\n  email: string,\n  notificationType: NotificationType,\n) {\n  const resend = new Resend(process.env.RESEND_API_KEY);\n\n  try {\n    const { data, error } = await resend.emails.send({\n      from: \"Firecrawl <firecrawl@getmendableai.com>\",\n      to: [email],\n      reply_to: \"help@firecrawl.com\",\n      subject: emailTemplates[notificationType].subject,\n      html: emailTemplates[notificationType].html,\n    });\n\n    if (error) {\n      logger.debug(`Error sending email: ${error}`);\n      return { success: false };\n    }\n  } catch (error) {\n    logger.debug(`Error sending email (2): ${error}`);\n    return { success: false };\n  }\n}\n\nexport async function sendNotificationInternal(\n  team_id: string,\n  notificationType: NotificationType,\n  startDateString: string | null,\n  endDateString: string | null,\n  chunk: AuthCreditUsageChunk,\n  bypassRecentChecks: boolean = false\n): Promise<{ success: boolean }> {\n  if (team_id === \"preview\") {\n    return { success: true };\n  }\n  return await redlock.using([`notification-lock:${team_id}:${notificationType}`], 5000, async () => {\n\n  if (!bypassRecentChecks) {\n    const fifteenDaysAgo = new Date();\n    fifteenDaysAgo.setDate(fifteenDaysAgo.getDate() - 15);\n\n    const { data, error } = await supabase_service\n      .from(\"user_notifications\")\n      .select(\"*\")\n      .eq(\"team_id\", team_id)\n      .eq(\"notification_type\", notificationType)\n      .gte(\"sent_date\", fifteenDaysAgo.toISOString());\n\n    if (error) {\n      logger.debug(`Error fetching notifications: ${error}`);\n      return { success: false };\n    }\n\n    if (data.length !== 0) {\n      return { success: false };\n    }\n\n    // TODO: observation: Free credits people are not receiving notifications\n\n    const { data: recentData, error: recentError } = await supabase_service\n      .from(\"user_notifications\")\n      .select(\"*\")\n      .eq(\"team_id\", team_id)\n      .eq(\"notification_type\", notificationType)\n      .gte(\"sent_date\", startDateString)\n      .lte(\"sent_date\", endDateString);\n\n    if (recentError) {\n      logger.debug(`Error fetching recent notifications: ${recentError.message}`);\n      return { success: false };\n    }\n\n    if (recentData.length !== 0) {\n      return { success: false };\n    }\n    \n  }\n\n  console.log(`Sending notification for team_id: ${team_id} and notificationType: ${notificationType}`);\n  // get the emails from the user with the team_id\n  const { data: emails, error: emailsError } = await supabase_service\n    .from(\"users\")\n    .select(\"email\")\n    .eq(\"team_id\", team_id);\n\n  if (emailsError) {\n    logger.debug(`Error fetching emails: ${emailsError}`);\n    return { success: false };\n  }\n\n  for (const email of emails) {\n    await sendEmailNotification(email.email, notificationType);\n  }\n\n  const { error: insertError } = await supabase_service\n    .from(\"user_notifications\")\n    .insert([\n      {\n        team_id: team_id,\n        notification_type: notificationType,\n        sent_date: new Date().toISOString(),\n      },\n    ]);\n\n  if (process.env.SLACK_ADMIN_WEBHOOK_URL && emails.length > 0) {\n    sendSlackWebhook(\n      `${getNotificationString(notificationType)}: Team ${team_id}, with email ${emails[0].email}. Number of credits used: ${chunk.adjusted_credits_used} | Number of credits in the plan: ${chunk.price_credits}`,\n      false,\n      process.env.SLACK_ADMIN_WEBHOOK_URL\n    ).catch((error) => {\n      logger.debug(`Error sending slack notification: ${error}`);\n    });\n  }\n\n  if (insertError) {\n    logger.debug(`Error inserting notification record: ${insertError}`);\n    return { success: false };\n  }\n\n    return { success: true };\n  });\n}\n"]}
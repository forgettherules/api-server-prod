{"version":3,"file":"v1.js","sourceRoot":"","sources":["../../../src/routes/v1.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { NextFunction, Request, Response } from \"express\";\nimport { crawlController } from \"../controllers/v1/crawl\";\n// import { crawlStatusController } from \"../../src/controllers/v1/crawl-status\";\nimport { scrapeController } from \"../../src/controllers/v1/scrape\";\nimport { crawlStatusController } from \"../controllers/v1/crawl-status\";\nimport { mapController } from \"../controllers/v1/map\";\nimport { ErrorResponse, RequestWithACUC, RequestWithAuth, RequestWithMaybeAuth } from \"../controllers/v1/types\";\nimport { RateLimiterMode } from \"../types\";\nimport { authenticateUser } from \"../controllers/auth\";\nimport { createIdempotencyKey } from \"../services/idempotency/create\";\nimport { validateIdempotencyKey } from \"../services/idempotency/validate\";\nimport { checkTeamCredits } from \"../services/billing/credit_billing\";\nimport expressWs from \"express-ws\";\nimport { crawlStatusWSController } from \"../controllers/v1/crawl-status-ws\";\nimport { isUrlBlocked } from \"../scraper/WebScraper/utils/blocklist\";\nimport { crawlCancelController } from \"../controllers/v1/crawl-cancel\";\nimport { logger } from \"../lib/logger\";\nimport { scrapeStatusController } from \"../controllers/v1/scrape-status\";\nimport { concurrencyCheckController } from \"../controllers/v1/concurrency-check\";\nimport { batchScrapeController } from \"../controllers/v1/batch-scrape\";\nimport { extractController } from \"../controllers/v1/extract\";\n// import { crawlPreviewController } from \"../../src/controllers/v1/crawlPreview\";\n// import { crawlJobStatusPreviewController } from \"../../src/controllers/v1/status\";\n// import { searchController } from \"../../src/controllers/v1/search\";\n// import { crawlCancelController } from \"../../src/controllers/v1/crawl-cancel\";\n// import { keyAuthController } from \"../../src/controllers/v1/keyAuth\";\n// import { livenessController } from \"../controllers/v1/liveness\";\n// import { readinessController } from \"../controllers/v1/readiness\";\n\nfunction checkCreditsMiddleware(minimum?: number): (req: RequestWithAuth, res: Response, next: NextFunction) => void {\n    return (req, res, next) => {\n        (async () => {\n            if (!minimum && req.body) {\n                minimum = (req.body as any)?.limit ?? (req.body as any)?.urls?.length ?? 1;\n            }\n            const { success, remainingCredits, chunk } = await checkTeamCredits(req.acuc, req.auth.team_id, minimum ?? 1);\n            if (chunk) {\n                req.acuc = chunk;\n            }\n            if (!success) {\n                logger.error(`Insufficient credits: ${JSON.stringify({ team_id: req.auth.team_id, minimum, remainingCredits })}`);\n                if (!res.headersSent) {\n                    return res.status(402).json({ success: false, error: \"Insufficient credits to perform this request. For more credits, you can upgrade your plan at https://firecrawl.dev/pricing or try changing the request limit to a lower value.\" });\n                }\n            }\n            req.account = { remainingCredits };\n            next();\n        })()\n            .catch(err => next(err));\n    };\n}\n\nexport function authMiddleware(rateLimiterMode: RateLimiterMode): (req: RequestWithMaybeAuth, res: Response, next: NextFunction) => void {\n    return (req, res, next) => {\n        (async () => {\n            const auth = await authenticateUser(\n                req,\n                res,\n                rateLimiterMode,\n            );\n\n            if (!auth.success) {\n                if (!res.headersSent) {\n                    return res.status(auth.status).json({ success: false, error: auth.error });\n                } else {\n                    return;\n                }\n            }\n\n            const { team_id, plan, chunk } = auth;\n\n            req.auth = { team_id, plan };\n            req.acuc = chunk ?? undefined;\n            if (chunk) {\n                req.account = { remainingCredits: chunk.remaining_credits };\n            }\n            next();\n        })()\n            .catch(err => next(err));\n    }\n}\n\nfunction idempotencyMiddleware(req: Request, res: Response, next: NextFunction) {\n    (async () => {\n        if (req.headers[\"x-idempotency-key\"]) {\n            const isIdempotencyValid = await validateIdempotencyKey(req);\n            if (!isIdempotencyValid) {\n                if (!res.headersSent) {\n                    return res.status(409).json({ success: false, error: \"Idempotency key already used\" });\n                }\n            }\n            createIdempotencyKey(req);\n        }\n        next();\n    })()\n        .catch(err => next(err));\n}\n\nfunction blocklistMiddleware(req: Request, res: Response, next: NextFunction) {\n    if (typeof req.body.url === \"string\" && isUrlBlocked(req.body.url)) {\n        if (!res.headersSent) {\n            return res.status(403).json({ success: false, error: \"URL is blocked intentionally. Firecrawl currently does not support social media scraping due to policy restrictions.\" });\n        }\n    }\n    next();\n}\n\nexport function wrap(controller: (req: Request, res: Response) => Promise<any>): (req: Request, res: Response, next: NextFunction) => any {\n    return (req, res, next) => {\n        controller(req, res)\n            .catch(err => next(err))\n    }\n}\n\nexpressWs(express());\n\nexport const v1Router = express.Router();\n\nv1Router.post(\n    \"/scrape\",\n    authMiddleware(RateLimiterMode.Scrape),\n    checkCreditsMiddleware(1),\n    blocklistMiddleware,\n    wrap(scrapeController)\n);\n\nv1Router.post(\n    \"/crawl\",\n    authMiddleware(RateLimiterMode.Crawl),\n    checkCreditsMiddleware(),\n    blocklistMiddleware,\n    idempotencyMiddleware,\n    wrap(crawlController)\n);\n\nv1Router.post(\n    \"/batch/scrape\",\n    authMiddleware(RateLimiterMode.Crawl),\n    checkCreditsMiddleware(),\n    blocklistMiddleware,\n    idempotencyMiddleware,\n    wrap(batchScrapeController)\n);\n\nv1Router.post(\n    \"/map\",\n    authMiddleware(RateLimiterMode.Map),\n    checkCreditsMiddleware(1),\n    blocklistMiddleware,\n    wrap(mapController)\n);\n\nv1Router.get(\n    \"/crawl/:jobId\",\n    authMiddleware(RateLimiterMode.CrawlStatus),\n    wrap(crawlStatusController)\n);\n\nv1Router.get(\n    \"/batch/scrape/:jobId\",\n    authMiddleware(RateLimiterMode.CrawlStatus),\n    // Yes, it uses the same controller as the normal crawl status controller\n    wrap((req:any, res):any => crawlStatusController(req, res, true))\n);\n\nv1Router.get(\n    \"/scrape/:jobId\",\n    wrap(scrapeStatusController)\n);\n\nv1Router.get(\n    \"/concurrency-check\",\n    authMiddleware(RateLimiterMode.CrawlStatus),\n    wrap(concurrencyCheckController)\n);\n\nv1Router.ws(\n    \"/crawl/:jobId\",\n    crawlStatusWSController\n);\n\nv1Router.post(\n    \"/extract\",\n    authMiddleware(RateLimiterMode.Scrape),\n    checkCreditsMiddleware(1),\n    wrap(extractController)\n);\n\n\n\n// v1Router.post(\"/crawlWebsitePreview\", crawlPreviewController);\n\n\nv1Router.delete(\n  \"/crawl/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  crawlCancelController\n);\n// v1Router.get(\"/checkJobStatus/:jobId\", crawlJobStatusPreviewController);\n\n// // Auth route for key based authentication\n// v1Router.get(\"/keyAuth\", keyAuthController);\n\n// // Search routes\n// v0Router.post(\"/search\", searchController);\n\n// Health/Probe routes\n// v1Router.get(\"/health/liveness\", livenessController);\n// v1Router.get(\"/health/readiness\", readinessController);\n\n"]}
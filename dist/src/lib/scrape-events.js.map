{"version":3,"file":"scrape-events.js","sourceRoot":"","sources":["../../../src/lib/scrape-events.ts"],"names":[],"mappings":";;;AACA,mDAAoE;AACpE,qCAAkC;AAClC,mCAAsC;AAEtC,IAAA,qBAAY,GAAE,CAAC;AA+Bf,MAAa,YAAY;IACvB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAa,EAAE,OAAoB;QACrD,IAAI,KAAK,KAAK,MAAM;YAAE,OAAO,IAAI,CAAC;QAElC,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,CAAC;QACzE,IAAI,mBAAmB,EAAE,CAAC;YACxB,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,2BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;oBACzD,MAAM,EAAE,KAAK;oBACb,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,OAAO,EAAE,OAAO;oBAChB,aAAa;iBACd,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC;gBACrB,OAAQ,MAAM,CAAC,IAAY,CAAC,EAAE,CAAC;YACjC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,0DAA0D;gBAC1D,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAoB,EAAE,MAAmC;QACvF,IAAI,KAAK,KAAK,IAAI;YAAE,OAAO;QAE3B,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,CAAC,MAAM,2BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,IAAW,CAAC;YACzG,MAAM,2BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;gBAC1C,OAAO,EAAE;oBACP,GAAG,WAAW,CAAC,OAAO;oBACtB,MAAM;iBACP;aACF,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAc,EAAE,KAAgC;QACvE,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,CAAE,GAAW,CAAC,EAAE,CAAC,CAAC,CAAE,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAW,EAAE;gBACrE,IAAI,EAAE,OAAO;gBACb,KAAK;gBACL,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;aACnC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,4BAA4B,KAAK,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;CACF;AAlDD,oCAkDC","sourcesContent":["import { Job } from \"bullmq\";\nimport { supabase_service as supabase } from \"../services/supabase\";\nimport { logger } from \"./logger\";\nimport { configDotenv } from \"dotenv\";\nimport { Engine } from \"../scraper/scrapeURL/engines\";\nconfigDotenv();\n\nexport type ScrapeErrorEvent = {\n  type: \"error\",\n  message: string,\n  stack?: string,\n}\n\nexport type ScrapeScrapeEvent = {\n  type: \"scrape\",\n  url: string,\n  worker?: string,\n  method: Engine,\n  result: null | {\n    success: boolean,\n    response_code?: number,\n    response_size?: number,\n    error?: string | object,\n    // proxy?: string,\n    time_taken: number,\n  },\n}\n\nexport type ScrapeQueueEvent = {\n  type: \"queue\",\n  event: \"waiting\" | \"active\" | \"completed\" | \"paused\" | \"resumed\" | \"removed\" | \"failed\",\n  worker?: string,\n}\n\nexport type ScrapeEvent = ScrapeErrorEvent | ScrapeScrapeEvent | ScrapeQueueEvent;\n\nexport class ScrapeEvents {\n  static async insert(jobId: string, content: ScrapeEvent) {\n    if (jobId === \"TEST\") return null;\n    \n    const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === 'true';\n    if (useDbAuthentication) {\n      try {\n        const result = await supabase.from(\"scrape_events\").insert({\n          job_id: jobId,\n          type: content.type,\n          content: content,\n          // created_at\n        }).select().single();\n        return (result.data as any).id;\n      } catch (error) {\n        // logger.error(`Error inserting scrape event: ${error}`);\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  static async updateScrapeResult(logId: number | null, result: ScrapeScrapeEvent[\"result\"]) {\n    if (logId === null) return;\n\n    try {\n      const previousLog = (await supabase.from(\"scrape_events\").select().eq(\"id\", logId).single()).data as any;\n      await supabase.from(\"scrape_events\").update({\n        content: {\n          ...previousLog.content,\n          result,\n        }\n      }).eq(\"id\", logId);\n    } catch (error) {\n      logger.error(`Error updating scrape result: ${error}`);\n    }\n  }\n\n  static async logJobEvent(job: Job | any, event: ScrapeQueueEvent[\"event\"]) {\n    try {\n      await this.insert(((job as any).id ? (job as any).id : job) as string, {\n        type: \"queue\",\n        event,\n        worker: process.env.FLY_MACHINE_ID,\n      });\n    } catch (error) {\n      logger.error(`Error logging job event: ${error}`);\n    }\n  }\n}\n"]}
{"version":3,"file":"supabase-jobs.js","sourceRoot":"","sources":["../../../src/lib/supabase-jobs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAwD;AACxD,qCAAkC;AAClC,qDAAuC;AAEvC;;;;GAIG;AACI,MAAM,kBAAkB,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IACxD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAgB;SAC3C,IAAI,CAAC,gBAAgB,CAAC;SACtB,MAAM,CAAC,GAAG,CAAC;SACX,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC;SACnB,MAAM,EAAE,CAAC;IAEZ,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAhBW,QAAA,kBAAkB,sBAgB7B;AAEF;;;;GAIG;AACI,MAAM,mBAAmB,GAAG,KAAK,EAAE,MAAgB,EAAE,EAAE;IAC5D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAgB;SAC3C,IAAI,CAAC,gBAAgB,CAAC;SACtB,MAAM,EAAE;SACR,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAExB,IAAI,KAAK,EAAE,CAAC;QACV,eAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAjBW,QAAA,mBAAmB,uBAiB9B;AAEF;;;;GAIG;AACI,MAAM,wBAAwB,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;IAChE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAgB;SAC3C,IAAI,CAAC,gBAAgB,CAAC;SACtB,MAAM,EAAE;SACR,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;IAE1B,IAAI,KAAK,EAAE,CAAC;QACV,eAAM,CAAC,KAAK,CAAC,sCAAsC,KAAK,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAjBW,QAAA,wBAAwB,4BAiBnC;AAGK,MAAM,0BAA0B,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IAChE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAgB;SAC3C,IAAI,CAAC,gBAAgB,CAAC;SACtB,MAAM,CAAC,eAAe,CAAC;SACvB,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC;SACnB,MAAM,EAAE,CAAC;IAEZ,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAhBW,QAAA,0BAA0B,8BAgBrC","sourcesContent":["import { supabase_service } from \"../services/supabase\";\nimport { logger } from \"./logger\";\nimport * as Sentry from \"@sentry/node\";\n\n/**\n * Get a single firecrawl_job by ID\n * @param jobId ID of Job\n * @returns {any | null} Job\n */\nexport const supabaseGetJobById = async (jobId: string) => {\n  const { data, error } = await supabase_service\n    .from(\"firecrawl_jobs\")\n    .select(\"*\")\n    .eq(\"job_id\", jobId)\n    .single();\n\n  if (error) {\n    return null;\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return data;\n};\n\n/**\n * Get multiple firecrawl_jobs by ID. Use this if you're not requesting a lot (50+) of jobs at once.\n * @param jobIds IDs of Jobs\n * @returns {any[]} Jobs\n */\nexport const supabaseGetJobsById = async (jobIds: string[]) => {\n  const { data, error } = await supabase_service\n    .from(\"firecrawl_jobs\")\n    .select()\n    .in(\"job_id\", jobIds);\n\n  if (error) {\n    logger.error(`Error in supabaseGetJobsById: ${error}`);\n    Sentry.captureException(error);\n    return [];\n  }\n\n  if (!data) {\n    return [];\n  }\n\n  return data;\n};\n\n/**\n * Get multiple firecrawl_jobs by crawl ID. Use this if you need a lot of jobs at once.\n * @param crawlId ID of crawl\n * @returns {any[]} Jobs\n */\nexport const supabaseGetJobsByCrawlId = async (crawlId: string) => {\n  const { data, error } = await supabase_service\n    .from(\"firecrawl_jobs\")\n    .select()\n    .eq(\"crawl_id\", crawlId)\n\n  if (error) {\n    logger.error(`Error in supabaseGetJobsByCrawlId: ${error}`);\n    Sentry.captureException(error);\n    return [];\n  }\n\n  if (!data) {\n    return [];\n  }\n\n  return data;\n};\n\n\nexport const supabaseGetJobByIdOnlyData = async (jobId: string) => {\n  const { data, error } = await supabase_service\n    .from(\"firecrawl_jobs\")\n    .select(\"docs, team_id\")\n    .eq(\"job_id\", jobId)\n    .single();\n\n  if (error) {\n    return null;\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return data;\n};"]}
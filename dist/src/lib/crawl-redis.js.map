{"version":3,"file":"crawl-redis.js","sourceRoot":"","sources":["../../../src/lib/crawl-redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalOptions } from \"../scraper/scrapeURL\";\nimport { ScrapeOptions } from \"../controllers/v1/types\";\nimport { WebCrawler } from \"../scraper/WebScraper/crawler\";\nimport { redisConnection } from \"../services/queue-service\";\nimport { logger } from \"./logger\";\nimport { getAdjustedMaxDepth } from \"../scraper/WebScraper/utils/maxDepthUtils\";\n\nexport type StoredCrawl = {\n    originUrl?: string;\n    crawlerOptions: any;\n    scrapeOptions: Omit<ScrapeOptions, \"timeout\">;\n    internalOptions: InternalOptions;\n    team_id: string;\n    plan?: string;\n    robots?: string;\n    cancelled?: boolean;\n    createdAt: number;\n};\n\nexport async function saveCrawl(id: string, crawl: StoredCrawl) {\n    await redisConnection.set(\"crawl:\" + id, JSON.stringify(crawl));\n    await redisConnection.expire(\"crawl:\" + id, 24 * 60 * 60, \"NX\");\n}\n\nexport async function getCrawl(id: string): Promise<StoredCrawl | null> {\n    const x = await redisConnection.get(\"crawl:\" + id);\n\n    if (x === null) {\n        return null;\n    }\n\n    return JSON.parse(x);\n}\n\nexport async function getCrawlExpiry(id: string): Promise<Date> {\n    const d = new Date();\n    const ttl = await redisConnection.pttl(\"crawl:\" + id);\n    d.setMilliseconds(d.getMilliseconds() + ttl);\n    d.setMilliseconds(0);\n    return d;\n}\n\nexport async function addCrawlJob(id: string, job_id: string) {\n    await redisConnection.sadd(\"crawl:\" + id + \":jobs\", job_id);\n    await redisConnection.expire(\"crawl:\" + id + \":jobs\", 24 * 60 * 60, \"NX\");\n}\n\nexport async function addCrawlJobs(id: string, job_ids: string[]) {\n    await redisConnection.sadd(\"crawl:\" + id + \":jobs\", ...job_ids);\n    await redisConnection.expire(\"crawl:\" + id + \":jobs\", 24 * 60 * 60, \"NX\");\n}\n\nexport async function addCrawlJobDone(id: string, job_id: string) {\n    await redisConnection.sadd(\"crawl:\" + id + \":jobs_done\", job_id);\n    await redisConnection.rpush(\"crawl:\" + id + \":jobs_done_ordered\", job_id);\n    await redisConnection.expire(\"crawl:\" + id + \":jobs_done\", 24 * 60 * 60, \"NX\");\n    await redisConnection.expire(\"crawl:\" + id + \":jobs_done_ordered\", 24 * 60 * 60, \"NX\");\n}\n\nexport async function getDoneJobsOrderedLength(id: string): Promise<number> {\n    return await redisConnection.llen(\"crawl:\" + id + \":jobs_done_ordered\");\n}\n\nexport async function getDoneJobsOrdered(id: string, start = 0, end = -1): Promise<string[]> {\n    return await redisConnection.lrange(\"crawl:\" + id + \":jobs_done_ordered\", start, end);\n}\n\nexport async function isCrawlFinished(id: string) {\n    return (await redisConnection.scard(\"crawl:\" + id + \":jobs_done\")) === (await redisConnection.scard(\"crawl:\" + id + \":jobs\"));\n}\n\nexport async function isCrawlFinishedLocked(id: string) {\n    return (await redisConnection.exists(\"crawl:\" + id + \":finish\"));\n}\n\nexport async function finishCrawl(id: string) {\n    if (await isCrawlFinished(id)) {\n        const set = await redisConnection.setnx(\"crawl:\" + id + \":finish\", \"yes\");\n        if (set === 1) {\n            await redisConnection.expire(\"crawl:\" + id + \":finish\", 24 * 60 * 60);\n        }\n        return set === 1\n    }\n}\n\nexport async function getCrawlJobs(id: string): Promise<string[]> {\n    return await redisConnection.smembers(\"crawl:\" + id + \":jobs\");\n}\n\nexport async function getThrottledJobs(teamId: string): Promise<string[]> {\n    return await redisConnection.zrangebyscore(\"concurrency-limiter:\" + teamId + \":throttled\", Date.now(), Infinity);\n}\n\nexport function normalizeURL(url: string, sc: StoredCrawl): string {\n    const urlO = new URL(url);\n    if (!sc.crawlerOptions || sc.crawlerOptions.ignoreQueryParameters) {\n        urlO.search = \"\";\n    }\n    urlO.hash = \"\";\n    return urlO.href;\n}\n\nexport function generateURLPermutations(url: string | URL): URL[] {\n    const urlO = new URL(url);\n\n    // Construct two versions, one with www., one without\n    const urlWithWWW = new URL(urlO);\n    const urlWithoutWWW = new URL(urlO);\n    if (urlO.hostname.startsWith(\"www.\")) {\n        urlWithoutWWW.hostname = urlWithWWW.hostname.slice(4);\n    } else {\n        urlWithWWW.hostname = \"www.\" + urlWithoutWWW.hostname;\n    }\n\n    let permutations = [urlWithWWW, urlWithoutWWW];\n\n    // Construct more versions for http/https\n    permutations = permutations.flatMap(urlO => {\n        if (![\"http:\", \"https:\"].includes(urlO.protocol)) {\n            return [urlO];\n        }\n\n        const urlWithHTTP = new URL(urlO);\n        const urlWithHTTPS = new URL(urlO);\n        urlWithHTTP.protocol = \"http:\";\n        urlWithHTTPS.protocol = \"https:\";\n\n        return [urlWithHTTP, urlWithHTTPS];\n    });\n\n    return permutations;\n}\n\nexport async function lockURL(id: string, sc: StoredCrawl, url: string): Promise<boolean> {\n    if (typeof sc.crawlerOptions?.limit === \"number\") {\n        if (await redisConnection.scard(\"crawl:\" + id + \":visited_unique\") >= sc.crawlerOptions.limit) {\n            return false;\n        }\n    }\n\n    url = normalizeURL(url, sc);\n\n    await redisConnection.sadd(\"crawl:\" + id + \":visited_unique\", url);\n    await redisConnection.expire(\"crawl:\" + id + \":visited_unique\", 24 * 60 * 60, \"NX\");\n\n    let res: boolean;\n    if (!sc.crawlerOptions?.deduplicateSimilarURLs) {\n        res = (await redisConnection.sadd(\"crawl:\" + id + \":visited\", url)) !== 0\n    } else {\n        const permutations = generateURLPermutations(url);\n        const x = (await redisConnection.sadd(\"crawl:\" + id + \":visited\", ...permutations.map(x => x.href)));\n        res = x === permutations.length;\n    }\n\n    await redisConnection.expire(\"crawl:\" + id + \":visited\", 24 * 60 * 60, \"NX\");\n    return res;\n}\n\n/// NOTE: does not check limit. only use if limit is checked beforehand e.g. with sitemap\nexport async function lockURLs(id: string, sc: StoredCrawl, urls: string[]): Promise<boolean> {\n    urls = urls.map(url => {\n        return normalizeURL(url, sc);\n    });\n    \n    const res = (await redisConnection.sadd(\"crawl:\" + id + \":visited\", ...urls)) !== 0\n    await redisConnection.expire(\"crawl:\" + id + \":visited\", 24 * 60 * 60, \"NX\");\n    return res;\n}\n\nexport function crawlToCrawler(id: string, sc: StoredCrawl, newBase?: string): WebCrawler {\n    const crawler = new WebCrawler({\n        jobId: id,\n        initialUrl: sc.originUrl!,\n        baseUrl: newBase ? new URL(newBase).origin : undefined,\n        includes: sc.crawlerOptions?.includes ?? [],\n        excludes: sc.crawlerOptions?.excludes ?? [],\n        maxCrawledLinks: sc.crawlerOptions?.maxCrawledLinks ?? 1000,\n        maxCrawledDepth: getAdjustedMaxDepth(sc.originUrl!, sc.crawlerOptions?.maxDepth ?? 10),\n        limit: sc.crawlerOptions?.limit ?? 10000,\n        generateImgAltText: sc.crawlerOptions?.generateImgAltText ?? false,\n        allowBackwardCrawling: sc.crawlerOptions?.allowBackwardCrawling ?? false,\n        allowExternalContentLinks: sc.crawlerOptions?.allowExternalContentLinks ?? false,\n        allowSubdomains: sc.crawlerOptions?.allowSubdomains ?? false,\n        ignoreRobotsTxt: sc.crawlerOptions?.ignoreRobotsTxt ?? false,\n    });\n\n    if (sc.robots !== undefined) {\n        try {\n            crawler.importRobotsTxt(sc.robots);\n        } catch (_) {}\n    }\n\n    return crawler;\n}\n"]}
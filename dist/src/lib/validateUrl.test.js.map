{"version":3,"file":"validateUrl.test.js","sourceRoot":"","sources":["../../../src/lib/validateUrl.test.ts"],"names":[],"mappings":";;AAAA,+CAAkE;AAClE,+CAAgD;AAEhD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;QAC5E,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAAC;QAC7E,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,MAAM,OAAO,GAAG,IAAA,0BAAY,EAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;QAClE,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,4BAA4B,EAAE,oBAAoB,CAAC,CAAC;QAChF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,MAAM,GAAG,IAAA,0BAAY,EAAC,6BAA6B,EAAE,oBAAoB,CAAC,CAAC;QACjF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAKH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;QAChF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,yBAAyB,EAAE,yBAAyB,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,yBAAyB,EAAE,yBAAyB,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;QAC3E,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QACpE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,MAAM,OAAO,GAAG,IAAA,6BAAe,EAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;QACrE,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;QACtF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACnE,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,6BAA6B,EAAE,yBAAyB,CAAC,CAAC;QACzF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;QACrF,MAAM,MAAM,GAAG,IAAA,6BAAe,EAAC,6BAA6B,EAAE,yBAAyB,CAAC,CAAC;QACzF,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,IAAI,GAAG;YACX,oBAAoB;YACpB,qBAAqB;YACrB,wBAAwB;YACxB,yBAAyB;SAC1B,CAAC;QACF,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,IAAI,GAAG;YACX,2BAA2B;YAC3B,2BAA2B;YAC3B,mCAAmC;YACnC,oCAAoC;SACrC,CAAC;QACF,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,2BAA2B;YAC3B,2BAA2B;YAC3B,mCAAmC;YACnC,oCAAoC;SACrC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,IAAI,GAAG;YACX,oBAAoB;YACpB,qBAAqB;SACtB,CAAC;QACF,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,IAAI,GAAG;YACX,yBAAyB;YACzB,qBAAqB;SACtB,CAAC;QACF,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,IAAI,GAAG;YACX,qBAAqB;YACrB,qBAAqB;SACtB,CAAC;QACF,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,IAAI,GAAG;YACX,qBAAqB;YACrB,sBAAsB;SACvB,CAAC;QACF,MAAM,MAAM,GAAG,IAAA,iCAAmB,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { isSameDomain, removeDuplicateUrls } from \"./validateUrl\";\nimport { isSameSubdomain } from \"./validateUrl\";\n\ndescribe(\"isSameDomain\", () => {\n  it(\"should return true for a subdomain\", () => {\n    const result = isSameDomain(\"http://sub.example.com\", \"http://example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return true for the same domain\", () => {\n    const result = isSameDomain(\"http://example.com\", \"http://example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return false for different domains\", () => {\n    const result = isSameDomain(\"http://example.com\", \"http://another.com\");\n    expect(result).toBe(false);\n  });\n\n  it(\"should return true for a subdomain with different protocols\", () => {\n    const result = isSameDomain(\"https://sub.example.com\", \"http://example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return false for invalid URLs\", () => {\n    const result = isSameDomain(\"invalid-url\", \"http://example.com\");\n    expect(result).toBe(false);\n    const result2 = isSameDomain(\"http://example.com\", \"invalid-url\");\n    expect(result2).toBe(false);\n  });\n\n  it(\"should return true for a subdomain with www prefix\", () => {\n    const result = isSameDomain(\"http://www.sub.example.com\", \"http://example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return true for the same domain with www prefix\", () => {\n    const result = isSameDomain(\"http://docs.s.s.example.com\", \"http://example.com\");\n    expect(result).toBe(true);\n  });\n});\n\n\n    \n\ndescribe(\"isSameSubdomain\", () => {\n  it(\"should return false for a subdomain\", () => {\n    const result = isSameSubdomain(\"http://example.com\", \"http://docs.example.com\");\n    expect(result).toBe(false);\n  });\n\n  it(\"should return true for the same subdomain\", () => {\n    const result = isSameSubdomain(\"http://docs.example.com\", \"http://docs.example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return false for different subdomains\", () => {\n    const result = isSameSubdomain(\"http://docs.example.com\", \"http://blog.example.com\");\n    expect(result).toBe(false);\n  });\n\n  it(\"should return false for different domains\", () => {\n    const result = isSameSubdomain(\"http://example.com\", \"http://another.com\");\n    expect(result).toBe(false);\n  });\n\n  it(\"should return false for invalid URLs\", () => {\n    const result = isSameSubdomain(\"invalid-url\", \"http://example.com\");\n    expect(result).toBe(false);\n    const result2 = isSameSubdomain(\"http://example.com\", \"invalid-url\");\n    expect(result2).toBe(false);\n  });\n\n  it(\"should return true for the same subdomain with different protocols\", () => {\n    const result = isSameSubdomain(\"https://docs.example.com\", \"http://docs.example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return true for the same subdomain with www prefix\", () => {\n    const result = isSameSubdomain(\"http://www.docs.example.com\", \"http://docs.example.com\");\n    expect(result).toBe(true);\n  });\n\n  it(\"should return false for a subdomain with www prefix and different subdomain\", () => {\n    const result = isSameSubdomain(\"http://www.docs.example.com\", \"http://blog.example.com\");\n    expect(result).toBe(false);\n  });\n});\n\ndescribe(\"removeDuplicateUrls\", () => {\n  it(\"should remove duplicate URLs with different protocols\", () => {\n    const urls = [\n      \"http://example.com\",\n      \"https://example.com\",\n      \"http://www.example.com\",\n      \"https://www.example.com\"\n    ];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([\"https://example.com\"]);\n  });\n\n  it(\"should keep URLs with different paths\", () => {\n    const urls = [\n      \"https://example.com/page1\",\n      \"https://example.com/page2\",\n      \"https://example.com/page1?param=1\",\n      \"https://example.com/page1#section1\"\n    ];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([\n      \"https://example.com/page1\",\n      \"https://example.com/page2\",\n      \"https://example.com/page1?param=1\",\n      \"https://example.com/page1#section1\"\n    ]);\n  });\n\n  it(\"should prefer https over http\", () => {\n    const urls = [\n      \"http://example.com\",\n      \"https://example.com\"\n    ];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([\"https://example.com\"]);\n  });\n\n  it(\"should prefer non-www over www\", () => {\n    const urls = [\n      \"https://www.example.com\",\n      \"https://example.com\"\n    ];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([\"https://example.com\"]);\n  });\n\n  it(\"should handle empty input\", () => {\n    const urls: string[] = [];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([]);\n  });\n\n  it(\"should handle URLs with different cases\", () => {\n    const urls = [\n      \"https://EXAMPLE.com\",\n      \"https://example.com\"\n    ];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([\"https://EXAMPLE.com\"]);\n  });\n\n  it(\"should handle URLs with trailing slashes\", () => {\n    const urls = [\n      \"https://example.com\",\n      \"https://example.com/\"\n    ];\n    const result = removeDuplicateUrls(urls);\n    expect(result).toEqual([\"https://example.com\"]);\n  });\n});\n"]}
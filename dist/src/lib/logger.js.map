{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/lib/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAmC;AAEnC,mCAAsC;AACtC,IAAA,qBAAY,GAAE,CAAC;AAEf,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAC7C,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAC5L,IAAI,CAAC,QAAQ,EACb,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;IACX,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;QAC3B,OAAO;YACL,GAAG,KAAK;YACR,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAA;IACH,CAAC;SAAM,CAAC;QACN,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CACF,CAAC,CAAC,CAAC,EAAE,EAAE,CACT,CAAA;AAEY,QAAA,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;IACzC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,EAAE,IAAI,OAAO;IAC1D,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;QAC1B,QAAQ,CAAC,GAAG,EAAE,KAAK;YACjB,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;gBAC3B,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,KAAK,EAAE,KAAK,CAAC,KAAK;oBAClB,KAAK,EAAE,KAAK,CAAC,KAAK;iBACnB,CAAA;YACH,CAAC;iBAAM,CAAC;gBACN,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;KACF,CAAC;IACF,UAAU,EAAE;QACV,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC,EAC3D,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,EAAE,CAAC,EAC1E,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,KAAK,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAC1K;SACF,CAAC;KACH;CACF,CAAC,CAAC","sourcesContent":["import * as winston from \"winston\";\n\nimport { configDotenv } from \"dotenv\";\nconfigDotenv();\n\nconst logFormat = winston.format.printf(info => \n  `${info.timestamp} ${info.level} [${info.metadata.module ?? \"\"}:${info.metadata.method ?? \"\"}]: ${info.message} ${info.level.includes(\"error\") || info.level.includes(\"warn\") ? JSON.stringify(\n    info.metadata,\n    (_, value) => {\n      if (value instanceof Error) {\n        return {\n          ...value,\n          name: value.name,\n          message: value.message,\n          stack: value.stack,\n          cause: value.cause,\n        }\n      } else {\n        return value;\n      }\n    }\n  ) : \"\"}`\n)\n\nexport const logger = winston.createLogger({\n  level: process.env.LOGGING_LEVEL?.toLowerCase() ?? \"debug\",\n  format: winston.format.json({\n    replacer(key, value) {\n      if (value instanceof Error) {\n        return {\n          ...value,\n          name: value.name,\n          message: value.message,\n          stack: value.stack,\n          cause: value.cause,\n        }\n      } else {\n        return value;\n      }\n    }\n  }),\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n        winston.format.metadata({ fillExcept: [\"message\", \"level\", \"timestamp\"] }),\n        ...(((process.env.ENV === \"production\" && process.env.SENTRY_ENVIRONMENT === \"dev\") || (process.env.ENV !== \"production\")) ? [winston.format.colorize(), logFormat] : []),\n      ),\n    }),\n  ],\n});\n"]}
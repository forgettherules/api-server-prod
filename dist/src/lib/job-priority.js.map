{"version":3,"file":"job-priority.js","sourceRoot":"","sources":["../../../src/lib/job-priority.ts"],"names":[],"mappings":"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","sourcesContent":["import { redisConnection } from \"../../src/services/queue-service\";\nimport { PlanType } from \"../../src/types\";\nimport { logger } from \"./logger\";\n\nconst SET_KEY_PREFIX = \"limit_team_id:\";\nexport async function addJobPriority(team_id, job_id) {\n  try {\n    const setKey = SET_KEY_PREFIX + team_id;\n\n    // Add scrape job id to the set\n    await redisConnection.sadd(setKey, job_id);\n\n    // This approach will reset the expiration time to 60 seconds every time a new job is added to the set.\n    await redisConnection.expire(setKey, 60);\n  } catch (e) {\n    logger.error(`Add job priority (sadd) failed: ${team_id}, ${job_id}`);\n  }\n}\n\nexport async function deleteJobPriority(team_id, job_id) {\n  try {\n    const setKey = SET_KEY_PREFIX + team_id;\n\n    // remove job_id from the set\n    await redisConnection.srem(setKey, job_id);\n  } catch (e) {\n    logger.error(`Delete job priority (srem) failed: ${team_id}, ${job_id}`);\n  }\n}\n\nexport async function getJobPriority({\n  plan,\n  team_id,\n  basePriority = 10,\n}: {\n  plan: PlanType | undefined;\n  team_id: string;\n  basePriority?: number;\n}): Promise<number> {\n  if (team_id === \"d97c4ceb-290b-4957-8432-2b2a02727d95\") {\n    return 50;\n  }\n\n  try {\n    const setKey = SET_KEY_PREFIX + team_id;\n\n    // Get the length of the set\n    const setLength = await redisConnection.scard(setKey);\n\n    // Determine the priority based on the plan and set length\n    let planModifier = 1;\n    let bucketLimit = 0;\n\n    switch (plan) {\n      case \"free\":\n        bucketLimit = 25;\n        planModifier = 0.5;\n        break;\n      case \"hobby\":\n        bucketLimit = 100;\n        planModifier = 0.3;\n        break;\n      case \"standard\":\n      case \"standardnew\":\n        bucketLimit = 200;\n        planModifier = 0.2;\n        break;\n      case \"growth\":\n      case \"growthdouble\":\n        bucketLimit = 400;\n        planModifier = 0.1;\n        break;\n      case \"etier2c\":\n        bucketLimit = 1000;\n        planModifier = 0.05;\n        break;\n      case \"etier1a\":\n        bucketLimit = 1000;\n        planModifier = 0.05;\n        break;\n\n      default:\n        bucketLimit = 25;\n        planModifier = 1;\n        break;\n    }\n\n    // if length set is smaller than set, just return base priority\n    if (setLength <= bucketLimit) {\n      return basePriority;\n    } else {\n      // If not, we keep base priority + planModifier\n      return Math.ceil(\n        basePriority + Math.ceil((setLength - bucketLimit) * planModifier)\n      );\n    }\n  } catch (e) {\n    logger.error(\n      `Get job priority failed: ${team_id}, ${plan}, ${basePriority}`\n    );\n    return basePriority;\n  }\n}\n"]}
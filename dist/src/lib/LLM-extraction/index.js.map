{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/lib/LLM-extraction/index.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,8CAAsB;AACtB,MAAM,GAAG,GAAG,IAAI,aAAG,EAAE,CAAC,CAAC,4CAA4C;AAEnE,qCAAqD;AAErD,sCAAmC;AAEnC,mCAAmC;AAC5B,KAAK,UAAU,mBAAmB,CACvC,SAAqB,EACrB,iBAA+C,EAC/C,IAA6B;IAE7B,iDAAiD;IAEjD,MAAM,MAAM,GAAG,iBAAiB,EAAE,gBAAgB,CAAC;IACnD,MAAM,YAAY,GAAG,iBAAiB,EAAE,gBAAgB,CAAC;IACzD,MAAM,MAAM,GAAG,iBAAiB,EAAE,UAAU,CAAC;IAE7C,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,0EAA0E;IAE3G,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CACnC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,QAAkB,EAAE,EAAE;QACzC,QAAQ,cAAc,EAAE,CAAC;YACvB,KAAK,QAAQ;gBACX,MAAM,GAAG,GAAG,IAAI,gBAAM,EAAE,CAAC;gBACzB,IAAI,CAAC;oBACH,MAAM,gBAAgB,GAAG,MAAM,IAAA,kCAAyB,EAAC;wBACvD,MAAM,EAAE,GAAG;wBACX,QAAQ,EAAE,QAAQ;wBAClB,MAAM,EAAE,MAAM;wBACd,MAAM,EAAE,MAAM;wBACd,YAAY,EAAE,YAAY;wBAC1B,IAAI,EAAE,IAAI;qBACX,CAAC,CAAC;oBACH,wDAAwD;oBACxD,IAAI,MAAM,EAAE,CAAC;wBACX,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBACrC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC;4BAC/C,8FAA8F;4BAC9F,MAAM,IAAI,KAAK,CACb,0BAA0B,QAAQ,CAAC,MAAM;gCACvC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;iCAC1B,IAAI,CACH,IAAI,CACL,uNAAuN,CAC3N,CAAC;wBACJ,CAAC;oBACH,CAAC;oBAED,OAAO,gBAAgB,CAAC;gBAC1B,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,eAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;oBACvD,MAAM,KAAK,CAAC;gBACd,CAAC;YACH;gBACE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACtC,CAAC;IACH,CAAC,CAAC,CACH,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC;AAtDD,kDAsDC","sourcesContent":["import OpenAI from \"openai\";\nimport Ajv from \"ajv\";\nconst ajv = new Ajv(); // Initialize AJV for JSON schema validation\n\nimport { generateOpenAICompletions } from \"./models\";\nimport { Document, ExtractorOptions } from \"../entities\";\nimport { logger } from \"../logger\";\n\n// Generate completion using OpenAI\nexport async function generateCompletions(\n  documents: Document[],\n  extractionOptions: ExtractorOptions | undefined,\n  mode: \"markdown\" | \"raw-html\"\n): Promise<Document[]> {\n  // const schema = zodToJsonSchema(options.schema)\n\n  const schema = extractionOptions?.extractionSchema;\n  const systemPrompt = extractionOptions?.extractionPrompt;\n  const prompt = extractionOptions?.userPrompt;\n\n  const switchVariable = \"openAI\"; // Placholder, want to think more about how we abstract the model provider\n\n  const completions = await Promise.all(\n    documents.map(async (document: Document) => {\n      switch (switchVariable) {\n        case \"openAI\":\n          const llm = new OpenAI();\n          try {\n            const completionResult = await generateOpenAICompletions({\n              client: llm,\n              document: document,\n              schema: schema,\n              prompt: prompt,\n              systemPrompt: systemPrompt,\n              mode: mode,\n            });\n            // Validate the JSON output against the schema using AJV\n            if (schema) {\n              const validate = ajv.compile(schema);\n              if (!validate(completionResult.llm_extraction)) {\n                //TODO: add Custom Error handling middleware that bubbles this up with proper Error code, etc.\n                throw new Error(\n                  `JSON parsing error(s): ${validate.errors\n                    ?.map((err) => err.message)\n                    .join(\n                      \", \"\n                    )}\\n\\nLLM extraction did not match the extraction schema you provided. This could be because of a model hallucination, or an Error on our side. Try adjusting your prompt, and if it doesn't work reach out to support.`\n                );\n              }\n            }\n\n            return completionResult;\n          } catch (error) {\n            logger.error(`Error generating completions: ${error}`);\n            throw error;\n          }\n        default:\n          throw new Error(\"Invalid client\");\n      }\n    })\n  );\n\n  return completions;\n}\n"]}
{"version":3,"file":"concurrency-limit.js","sourceRoot":"","sources":["../../../src/lib/concurrency-limit.ts"],"names":[],"mappings":";;;AAAA,2DAAgE;AAChE,6DAA4D;AAC5D,oCAA2C;AAG3C,MAAM,YAAY,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,sBAAsB,GAAG,OAAO,CAAC;AAC3E,MAAM,iBAAiB,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,0BAA0B,GAAG,OAAO,CAAC;AACpF,MAAM,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AAE1C,SAAgB,sBAAsB,CAAC,IAAY;IAC/C,OAAO,IAAA,mCAAoB,EAAC,uBAAe,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AACzE,CAAC;AAFD,wDAEC;AAEM,KAAK,UAAU,+BAA+B,CAAC,OAAe,EAAE,MAAc,IAAI,CAAC,GAAG,EAAE;IAC3F,MAAM,+BAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAClF,CAAC;AAFD,0EAEC;AAEM,KAAK,UAAU,6BAA6B,CAAC,OAAe,EAAE,MAAc,IAAI,CAAC,GAAG,EAAE;IACzF,OAAO,MAAM,+BAAe,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AACrF,CAAC;AAFD,sEAEC;AAEM,KAAK,UAAU,6BAA6B,CAAC,OAAe,EAAE,EAAU,EAAE,MAAc,IAAI,CAAC,GAAG,EAAE;IACrG,MAAM,+BAAe,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,GAAG,GAAG,mBAAmB,EAAE,EAAE,CAAC,CAAC;AACrF,CAAC;AAFD,sEAEC;AAEM,KAAK,UAAU,+BAA+B,CAAC,OAAe,EAAE,EAAU;IAC7E,MAAM,+BAAe,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;AAC1D,CAAC;AAFD,0EAEC;AASM,KAAK,UAAU,yBAAyB,CAAC,OAAe;IAC3D,MAAM,GAAG,GAAG,MAAM,+BAAe,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9E,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC;AAPD,8DAOC;AAEM,KAAK,UAAU,yBAAyB,CAAC,OAAe,EAAE,GAA0B;IACvF,MAAM,+BAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,QAAQ,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AACnG,CAAC;AAFD,8DAEC","sourcesContent":["import { getRateLimiterPoints } from \"../services/rate-limiter\";\nimport { redisConnection } from \"../services/queue-service\";\nimport { RateLimiterMode } from \"../types\";\nimport { JobsOptions } from \"bullmq\";\n\nconst constructKey = (team_id: string) => \"concurrency-limiter:\" + team_id;\nconst constructQueueKey = (team_id: string) => \"concurrency-limit-queue:\" + team_id;\nconst stalledJobTimeoutMs = 2 * 60 * 1000;\n\nexport function getConcurrencyLimitMax(plan: string): number {\n    return getRateLimiterPoints(RateLimiterMode.Scrape, undefined, plan);\n}\n\nexport async function cleanOldConcurrencyLimitEntries(team_id: string, now: number = Date.now()) {\n    await redisConnection.zremrangebyscore(constructKey(team_id), -Infinity, now);\n}\n\nexport async function getConcurrencyLimitActiveJobs(team_id: string, now: number = Date.now()): Promise<string[]> {\n    return await redisConnection.zrangebyscore(constructKey(team_id), now, Infinity);\n}\n\nexport async function pushConcurrencyLimitActiveJob(team_id: string, id: string, now: number = Date.now()) {\n    await redisConnection.zadd(constructKey(team_id), now + stalledJobTimeoutMs, id);\n}\n\nexport async function removeConcurrencyLimitActiveJob(team_id: string, id: string) {\n    await redisConnection.zrem(constructKey(team_id), id);\n}\n\nexport type ConcurrencyLimitedJob = {\n    id: string;\n    data: any;\n    opts: JobsOptions;\n    priority?: number;\n}\n\nexport async function takeConcurrencyLimitedJob(team_id: string): Promise<ConcurrencyLimitedJob | null> {\n    const res = await redisConnection.zmpop(1, constructQueueKey(team_id), \"MIN\");\n    if (res === null || res === undefined) {\n        return null;\n    }\n\n    return JSON.parse(res[1][0][0]);\n}\n\nexport async function pushConcurrencyLimitedJob(team_id: string, job: ConcurrencyLimitedJob) {\n    await redisConnection.zadd(constructQueueKey(team_id), job.priority ?? 1, JSON.stringify(job));\n}\n"]}
{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../src/lib/cache.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAG9B,qCAA6C;AAC7C,MAAM,MAAM,GAAG,eAAO,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,OAAO,EAAC,CAAC,CAAC;AAEnC,QAAA,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,iBAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE;IAC7F,oBAAoB,EAAE,IAAI;CAC7B,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAEV,SAAgB,QAAQ,CAAC,GAAW,EAAE,aAA4B,EAAE,eAAgC;IAChG,IAAI,CAAC,kBAAU;QAAE,OAAO,IAAI,CAAC;IAE7B,mCAAmC;IACnC,IAAI,eAAe,CAAC,eAAe,IAAI,eAAe,CAAC,WAAW,IAAI,eAAe,CAAC,aAAa,IAAI,eAAe,CAAC,IAAI;WACpH,CAAC,aAAa,CAAC,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAChE,CAAC;QACC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO,QAAQ,GAAG,GAAG,GAAG,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC;AAChE,CAAC;AAXD,4BAWC;AASM,KAAK,UAAU,gBAAgB,CAAC,GAAW,EAAE,KAAiB;IACjE,IAAI,CAAC,kBAAU;QAAE,OAAO;IAExB,IAAI,CAAC;QACD,MAAM,kBAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACrD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3D,CAAC;AACL,CAAC;AARD,4CAQC;AAEM,KAAK,UAAU,iBAAiB,CAAC,GAAW;IAC/C,IAAI,CAAC,kBAAU;QAAE,OAAO,IAAI,CAAC;IAE7B,IAAI,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,kBAAU,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC;IAC3D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,MAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AATD,8CASC","sourcesContent":["import IORedis from \"ioredis\";\nimport { ScrapeOptions } from \"../controllers/v1/types\";\nimport { InternalOptions } from \"../scraper/scrapeURL\";\nimport { logger as _logger } from \"./logger\";\nconst logger = _logger.child({module: \"cache\"});\n\nexport const cacheRedis = process.env.CACHE_REDIS_URL ? new IORedis(process.env.CACHE_REDIS_URL, {\n    maxRetriesPerRequest: null,\n}) : null;\n\nexport function cacheKey(url: string, scrapeOptions: ScrapeOptions, internalOptions: InternalOptions): string | null {\n    if (!cacheRedis) return null;\n\n    // these options disqualify a cache\n    if (internalOptions.v0CrawlOnlyUrls || internalOptions.forceEngine || internalOptions.v0UseFastMode || internalOptions.atsv\n        || (scrapeOptions.actions && scrapeOptions.actions.length > 0)\n    ) {\n        return null;\n    }\n\n    return \"cache:\" + url + \":waitFor:\" + scrapeOptions.waitFor;\n}\n\nexport type CacheEntry = {\n    url: string;\n    html: string;\n    statusCode: number;\n    error?: string;\n};\n\nexport async function saveEntryToCache(key: string, entry: CacheEntry) {\n    if (!cacheRedis) return;\n\n    try {\n        await cacheRedis.set(key, JSON.stringify(entry));\n    } catch (error) {\n        logger.warn(\"Failed to save to cache\", { key, error });\n    }\n}\n\nexport async function getEntryFromCache(key: string): Promise<CacheEntry | null> {\n    if (!cacheRedis) return null;\n\n    try {\n        return JSON.parse(await cacheRedis.get(key) ?? \"null\");\n    } catch (error) {\n        logger.warn(\"Failed to get from cache\", { key, error });\n        return null;\n    }\n}\n"]}
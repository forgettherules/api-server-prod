{"version":3,"file":"ranker.js","sourceRoot":"","sources":["../../../src/lib/ranker.ts"],"names":[],"mappings":";;;;;;AACA,mCAAsC;AACtC,oDAA4B;AAE5B,IAAA,qBAAY,GAAE,CAAC;AAEf,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC;IACxB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;CACnC,CAAC,CAAC;AAEH,KAAK,UAAU,YAAY,CAAC,IAAY;IACtC,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QAC/C,KAAK,EAAE,wBAAwB;QAC/B,KAAK,EAAE,IAAI;QACX,eAAe,EAAE,OAAO;KACzB,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACrC,CAAC;AAED,MAAM,gBAAgB,GAAG,CAAC,IAAc,EAAE,IAAc,EAAU,EAAE;IAClE,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxE,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAC9C,CAAC;IACF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAC9C,CAAC;IACF,IAAI,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC;IACnD,OAAO,UAAU,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,qCAAqC;AACrC,MAAM,YAAY,GAAG,CAAC,WAAmB,EAAE,IAAY,EAAY,EAAE;IACnE,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACrD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACxB,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;aAClE,MAAM,CAAC;QACV,OAAO,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,KAAK,UAAU,cAAc,CAAC,gBAA0B,EAAE,KAAe,EAAE,WAAmB;IAC5F,IAAI,CAAC;QACH,wBAAwB;QACxB,IAAI,CAAC,WAAW,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAC9D,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,oDAAoD;QACpD,MAAM,cAAc,GAAG,WAAW,CAAC;QAEnC,2CAA2C;QAC3C,MAAM,cAAc,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,CAAC;QAE1D,6DAA6D;QAC7D,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,EAAE;YAC7F,IAAI,CAAC;gBACH,MAAM,aAAa,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,CAAC;gBAC1D,MAAM,KAAK,GAAG,gBAAgB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;gBAE9D,OAAO;oBACL,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC;oBAClB,eAAe;oBACf,KAAK;oBACL,aAAa,EAAE,KAAK;iBACrB,CAAC;YACJ,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,qDAAqD;gBACrD,OAAO;oBACL,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC;oBAClB,eAAe;oBACf,KAAK,EAAE,CAAC;oBACR,aAAa,EAAE,KAAK;iBACrB,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC,CAAC;QAEJ,yFAAyF;QACzF,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3B,MAAM,SAAS,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;YACpC,OAAO,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IACxB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;QAC5D,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAEQ,wCAAc","sourcesContent":["import axios from 'axios';\nimport { configDotenv } from 'dotenv';\nimport OpenAI from \"openai\";\n\nconfigDotenv();\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nasync function getEmbedding(text: string) {\n  const embedding = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: text,\n    encoding_format: \"float\",\n  });\n\n  return embedding.data[0].embedding;\n}\n\nconst cosineSimilarity = (vec1: number[], vec2: number[]): number => {\n  const dotProduct = vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);\n  const magnitude1 = Math.sqrt(\n    vec1.reduce((sum, val) => sum + val * val, 0)\n  );\n  const magnitude2 = Math.sqrt(\n    vec2.reduce((sum, val) => sum + val * val, 0)\n  );\n  if (magnitude1 === 0 || magnitude2 === 0) return 0;\n  return dotProduct / (magnitude1 * magnitude2);\n};\n\n// Function to convert text to vector\nconst textToVector = (searchQuery: string, text: string): number[] => {\n  const words = searchQuery.toLowerCase().split(/\\W+/);\n  return words.map((word) => {\n    const count = (text.toLowerCase().match(new RegExp(word, \"g\")) || [])\n      .length;\n    return count / text.length;\n  });\n};\n\nasync function performRanking(linksWithContext: string[], links: string[], searchQuery: string) {\n  try {\n    // Handle invalid inputs\n    if (!searchQuery || !linksWithContext.length || !links.length) {\n      return [];\n    }\n\n    // Sanitize search query by removing null characters\n    const sanitizedQuery = searchQuery;\n\n    // Generate embeddings for the search query\n    const queryEmbedding = await getEmbedding(sanitizedQuery);\n\n    // Generate embeddings for each link and calculate similarity\n    const linksAndScores = await Promise.all(linksWithContext.map(async (linkWithContext, index) => {\n      try {\n        const linkEmbedding = await getEmbedding(linkWithContext);\n        const score = cosineSimilarity(queryEmbedding, linkEmbedding);\n        \n        return { \n          link: links[index],\n          linkWithContext,\n          score,\n          originalIndex: index\n        };\n      } catch (err) {\n        // If embedding fails for a link, return with score 0\n        return {\n          link: links[index],\n          linkWithContext,\n          score: 0,\n          originalIndex: index\n        };\n      }\n    }));\n\n    // Sort links based on similarity scores while preserving original order for equal scores\n    linksAndScores.sort((a, b) => {\n      const scoreDiff = b.score - a.score;\n      return scoreDiff === 0 ? a.originalIndex - b.originalIndex : scoreDiff;\n    });\n\n    return linksAndScores;\n  } catch (error) {\n    console.error(`Error performing semantic search: ${error}`);\n    return [];\n  }\n}\n\nexport { performRanking };\n"]}
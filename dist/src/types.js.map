{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;;AAqHA,IAAY,eAQX;AARD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,8CAA2B,CAAA;IAC3B,oCAAiB,CAAA;IACjB,sCAAmB,CAAA;IACnB,oCAAiB,CAAA;IACjB,8BAAW,CAAA;AAEb,CAAC,EARW,eAAe,+BAAf,eAAe,QAQ1B;AAeD,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,0DAAsC,CAAA;IACtC,kDAA8B,CAAA;IAC9B,2DAAuC,CAAA;IACvC,iEAA6C,CAAA;IAC7C,+DAA2C,CAAA;AAC7C,CAAC,EANW,gBAAgB,gCAAhB,gBAAgB,QAM3B","sourcesContent":["import { z } from \"zod\";\nimport { AuthCreditUsageChunk, ScrapeOptions, Document as V1Document, webhookSchema } from \"./controllers/v1/types\";\nimport { ExtractorOptions, Document } from \"./lib/entities\";\nimport { InternalOptions } from \"./scraper/scrapeURL\";\n\ntype Mode = \"crawl\" | \"single_urls\" | \"sitemap\";\n\nexport interface CrawlResult {\n  source: string;\n  content: string;\n  options?: {\n    summarize?: boolean;\n    summarize_max_chars?: number;\n  };\n  metadata?: any;\n  raw_context_id?: number | string;\n  permissions?: any[];\n}\n\nexport interface IngestResult {\n  success: boolean;\n  error: string;\n  data: CrawlResult[];\n}\n\nexport interface WebScraperOptions {\n  url: string;\n  mode: Mode;\n  crawlerOptions?: any;\n  scrapeOptions: ScrapeOptions;\n  internalOptions?: InternalOptions;\n  team_id: string;\n  plan: string;\n  origin?: string;\n  crawl_id?: string;\n  sitemapped?: boolean;\n  webhook?: z.infer<typeof webhookSchema>;\n  v1?: boolean;\n  is_scrape?: boolean;\n}\n\nexport interface RunWebScraperParams {\n  url: string;\n  mode: Mode;\n  scrapeOptions: ScrapeOptions;\n  internalOptions?: InternalOptions;\n  // onSuccess: (result: V1Document, mode: string) => void;\n  // onError: (error: Error) => void;\n  team_id: string;\n  bull_job_id: string;\n  priority?: number;\n  is_scrape?: boolean;\n}\n\nexport type RunWebScraperResult = {\n  success: false;\n  error: Error;\n} | {\n  success: true;\n  document: V1Document;\n}\n\nexport interface FirecrawlJob {\n  job_id?: string;\n  success: boolean;\n  message?: string;\n  num_docs: number;\n  docs: any[];\n  time_taken: number;\n  team_id: string;\n  mode: string;\n  url: string;\n  crawlerOptions?: any;\n  scrapeOptions?: any;\n  origin: string;\n  num_tokens?: number,\n  retry?: boolean,\n  crawl_id?: string;\n}\n\nexport interface FirecrawlScrapeResponse {\n  statusCode: number;\n  body: {\n    status: string;\n    data: Document;\n  };\n  error?: string;\n}\n\nexport interface FirecrawlCrawlResponse {\n  statusCode: number;\n  body: {\n    status: string;\n    jobId: string;\n    \n  };\n  error?: string;\n}\n\nexport interface FirecrawlCrawlStatusResponse {\n  statusCode: number;\n  body: {\n    status: string;\n    data: Document[];    \n  };\n  error?: string;\n}\n\nexport interface FirecrawlExtractResponse {\n  statusCode: number;\n  body: {\n    success: boolean;\n    data: any[];\n  };\n  error?: string;\n}\n\nexport enum RateLimiterMode {\n  Crawl = \"crawl\",\n  CrawlStatus = \"crawlStatus\",\n  Scrape = \"scrape\",\n  Preview = \"preview\",\n  Search = \"search\",\n  Map = \"map\",\n\n}\n\nexport type AuthResponse = {\n  success: true;\n  team_id: string;\n  api_key?: string;\n  plan?: PlanType;\n  chunk: AuthCreditUsageChunk | null;\n} | {\n  success: false;\n  error: string;\n  status: number;\n}\n  \n\nexport enum NotificationType {\n  APPROACHING_LIMIT = \"approachingLimit\",\n  LIMIT_REACHED = \"limitReached\",\n  RATE_LIMIT_REACHED = \"rateLimitReached\",\n  AUTO_RECHARGE_SUCCESS = \"autoRechargeSuccess\",\n  AUTO_RECHARGE_FAILED = \"autoRechargeFailed\",\n}\n\nexport type ScrapeLog = {\n  url: string;\n  scraper: string;\n  success?: boolean;\n  response_code?: number;\n  time_taken_seconds?: number;\n  proxy?: string;\n  retried?: boolean;\n  error_message?: string;\n  date_added?: string; // ISO 8601 format\n  html?: string;\n  ipv4_support?: boolean | null;\n  ipv6_support?: boolean | null;\n};\n\nexport type PlanType = \n  | \"starter\"\n  | \"standard\"\n  | \"scale\"\n  | \"hobby\"\n  | \"standardnew\"\n  | \"growth\"\n  | \"growthdouble\"\n  | \"etier2c\"\n  | \"etier1a\"\n  | \"free\"\n  | \"\";\n\n\nexport type WebhookEventType = \"crawl.page\" | \"batch_scrape.page\" | \"crawl.started\" | \"batch_scrape.started\" | \"crawl.completed\" | \"batch_scrape.completed\" | \"crawl.failed\";"]}
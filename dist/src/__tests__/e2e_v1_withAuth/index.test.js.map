{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_v1_withAuth/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport { configDotenv } from \"dotenv\";\nimport {\n  ScrapeRequestInput,\n  ScrapeResponseRequestTest,\n} from \"../../controllers/v1/types\";\n\nconfigDotenv();\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\ndescribe(\"E2E Tests for v1 API Routes\", () => {\n  beforeAll(() => {\n    process.env.USE_DB_AUTHENTICATION = \"true\";\n  });\n\n  afterAll(() => {\n    delete process.env.USE_DB_AUTHENTICATION;\n  });\n\n  describe(\"GET /is-production\", () => {\n    it.concurrent(\"should return the production status\", async () => {\n      const response: ScrapeResponseRequestTest = await request(TEST_URL).get(\n        \"/is-production\"\n      );\n\n      console.log('process.env.USE_DB_AUTHENTICATION', process.env.USE_DB_AUTHENTICATION);\n      console.log('?', process.env.USE_DB_AUTHENTICATION === 'true');\n      const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === 'true';\n      console.log('!!useDbAuthentication', !!useDbAuthentication);\n      console.log('!useDbAuthentication', !useDbAuthentication);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"isProduction\");\n    });\n  });\n\n  describe(\"POST /v1/scrape\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/scrape\")\n      .send({ url: \"https://firecrawl.dev\"})\n\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\"should throw error for blocklisted URL\", async () => {\n      const scrapeRequest: ScrapeRequestInput = {\n        url: \"https://facebook.com/fake-test\",\n      };\n\n      const response = await request(TEST_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(403);\n      expect(response.body.error).toBe(\"URL is blocked. Firecrawl currently does not support social media scraping due to policy restrictions.\");\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      }\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key\",\n      async () => {\n        const scrapeRequest: ScrapeRequestInput = {\n          url: \"https://roastmywebsite.ai\",\n        };\n\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send(scrapeRequest);\n\n        expect(response.statusCode).toBe(200);\n\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).not.toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.markdown).toContain(\"_Roast_\");\n        expect(response.body.data.metadata.error).toBeUndefined();\n        expect(response.body.data.metadata.title).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.description).toBe(\n          \"Welcome to Roast My Website, the ultimate tool for putting your website through the wringer! This repository harnesses the power of Firecrawl to scrape and capture screenshots of websites, and then unleashes the latest LLM vision models to mercilessly roast them. 🌶️\"\n        );\n        expect(response.body.data.metadata.keywords).toBe(\n          \"Roast My Website,Roast,Website,GitHub,Firecrawl\"\n        );\n        expect(response.body.data.metadata.robots).toBe(\"follow, index\");\n        expect(response.body.data.metadata.ogTitle).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.ogDescription).toBe(\n          \"Welcome to Roast My Website, the ultimate tool for putting your website through the wringer! This repository harnesses the power of Firecrawl to scrape and capture screenshots of websites, and then unleashes the latest LLM vision models to mercilessly roast them. 🌶️\"\n        );\n        expect(response.body.data.metadata.ogUrl).toBe(\n          \"https://www.roastmywebsite.ai\"\n        );\n        expect(response.body.data.metadata.ogImage).toBe(\n          \"https://www.roastmywebsite.ai/og.png\"\n        );\n        expect(response.body.data.metadata.ogLocaleAlternate).toStrictEqual([]);\n        expect(response.body.data.metadata.ogSiteName).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.sourceURL).toBe(\n          \"https://roastmywebsite.ai\"\n        );\n        expect(response.body.data.metadata.statusCode).toBe(200);\n      },\n      30000\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response with a valid API key\",\n      async () => {\n        const scrapeRequest: ScrapeRequestInput = {\n          url: \"https://arxiv.org/abs/2410.04840\",\n        };\n\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send(scrapeRequest);\n\n        expect(response.statusCode).toBe(200);\n\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).not.toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.markdown).toContain(\"Strong Model Collapse\");\n        expect(response.body.data.metadata.error).toBeUndefined();\n        expect(response.body.data.metadata.description).toContain(\"Abstract page for arXiv paper 2410.04840: Strong Model Collapse\");\n        expect(response.body.data.metadata.citation_title).toBe(\"Strong Model Collapse\");\n        expect(response.body.data.metadata.citation_author).toEqual([\n          \"Dohmatob, Elvis\",\n          \"Feng, Yunzhen\",\n          \"Subramonian, Arjun\",\n          \"Kempe, Julia\"\n        ]);\n        expect(response.body.data.metadata.citation_date).toBe(\"2024/10/07\");\n        expect(response.body.data.metadata.citation_online_date).toBe(\"2024/10/08\");\n        expect(response.body.data.metadata.citation_pdf_url).toBe(\"http://arxiv.org/pdf/2410.04840\");\n        expect(response.body.data.metadata.citation_arxiv_id).toBe(\"2410.04840\");\n        expect(response.body.data.metadata.citation_abstract).toContain(\"Within the scaling laws paradigm\");\n        expect(response.body.data.metadata.sourceURL).toBe(\"https://arxiv.org/abs/2410.04840\");\n        expect(response.body.data.metadata.statusCode).toBe(200);\n      },\n      30000\n    );\n    it.concurrent(\n      \"should return a successful response with a valid API key and includeHtml set to true\",\n      async () => {\n        const scrapeRequest: ScrapeRequestInput = {\n          url: \"https://roastmywebsite.ai\",\n          formats: [\"markdown\", \"html\"],\n        };\n\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send(scrapeRequest);\n        \n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"html\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.markdown).toContain(\"_Roast_\");\n        expect(response.body.data.html).toContain(\"<h1\");\n        expect(response.body.data.metadata.statusCode).toBe(200);\n        expect(response.body.data.metadata.error).toBeUndefined();\n      },\n      30000\n    );\n    it.concurrent('should return a successful response for a valid scrape with PDF file', async () => {\n        const scrapeRequest: ScrapeRequestInput = {\n          url: \"https://arxiv.org/pdf/astro-ph/9301001.pdf\"\n        //   formats: [\"markdown\", \"html\"],\n        };\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post('/v1/scrape')\n          .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n          .set('Content-Type', 'application/json')\n          .send(scrapeRequest);\n        await new Promise((r) => setTimeout(r, 6000));\n  \n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty('data');\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty('metadata');\n        expect(response.body.data.markdown).toContain('Broad Line Radio Galaxy');\n        expect(response.body.data.metadata.statusCode).toBe(200);\n        expect(response.body.data.metadata.error).toBeUndefined();\n      }, 60000);\n\n      it.concurrent('should return a successful response for a valid scrape with PDF file without explicit .pdf extension', async () => {\n        const scrapeRequest: ScrapeRequestInput = {\n          url: \"https://arxiv.org/pdf/astro-ph/9301001\"\n        };\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post('/v1/scrape')\n          .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n          .set('Content-Type', 'application/json')\n          .send(scrapeRequest);\n        await new Promise((r) => setTimeout(r, 6000));\n  \n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty('data');\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty('markdown');\n        expect(response.body.data).toHaveProperty('metadata');\n        expect(response.body.data.markdown).toContain('Broad Line Radio Galaxy');\n        expect(response.body.data.metadata.statusCode).toBe(200);\n        expect(response.body.data.metadata.error).toBeUndefined();\n      }, 60000);\n\n      it.concurrent(\"should return a successful response with a valid API key with removeTags option\", async () => {\n        const scrapeRequest: ScrapeRequestInput = {\n          url: \"https://www.scrapethissite.com/\",\n          onlyMainContent: false // default is true\n        };\n        const responseWithoutRemoveTags: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send(scrapeRequest);\n        expect(responseWithoutRemoveTags.statusCode).toBe(200);\n        expect(responseWithoutRemoveTags.body).toHaveProperty(\"data\");\n\n        if (!(\"data\" in responseWithoutRemoveTags.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"markdown\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"metadata\");\n        expect(responseWithoutRemoveTags.body.data).not.toHaveProperty(\"html\");\n        expect(responseWithoutRemoveTags.body.data.markdown).toContain(\"[FAQ](/faq/)\"); // .nav\n        expect(responseWithoutRemoveTags.body.data.markdown).toContain(\"Hartley Brody 2023\"); // #footer\n  \n        const scrapeRequestWithRemoveTags: ScrapeRequestInput = {\n            url: \"https://www.scrapethissite.com/\",\n            excludeTags: ['.nav', '#footer', 'strong'],\n            onlyMainContent: false // default is true\n        };\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send(scrapeRequestWithRemoveTags);\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.markdown).not.toContain(\"Hartley Brody 2023\");\n        expect(response.body.data.markdown).not.toContain(\"[FAQ](/faq/)\"); // \n      }, 30000);\n\n      it.concurrent('should return a successful response for a scrape with 400 page', async () => {\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post('/v1/scrape')\n          .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n          .set('Content-Type', 'application/json')\n          .send({ url: 'https://httpstat.us/400' });\n        await new Promise((r) => setTimeout(r, 5000));\n  \n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty('data');\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty('markdown');\n        expect(response.body.data).toHaveProperty('metadata');\n        expect(response.body.data.metadata.statusCode).toBe(400);\n      }, 60000);\n\n\n      it.concurrent('should return a successful response for a scrape with 401 page', async () => {\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post('/v1/scrape')\n          .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n          .set('Content-Type', 'application/json')\n          .send({ url: 'https://httpstat.us/401' });\n        await new Promise((r) => setTimeout(r, 5000));\n  \n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty('data');\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty('markdown');\n        expect(response.body.data).toHaveProperty('metadata');\n        expect(response.body.data.metadata.statusCode).toBe(401);\n      }, 60000);\n\n      // Removed it as we want to retry fallback to the next scraper\n      // it.concurrent('should return a successful response for a scrape with 403 page', async () => {\n      //   const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      //     .post('/v1/scrape')\n      //     .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n      //     .set('Content-Type', 'application/json')\n      //     .send({ url: 'https://httpstat.us/403' });\n      //   await new Promise((r) => setTimeout(r, 5000));\n  \n      //   expect(response.statusCode).toBe(200);\n      //   expect(response.body).toHaveProperty('data');\n      //   if (!(\"data\" in response.body)) {\n      //     throw new Error(\"Expected response body to have 'data' property\");\n      //   }\n      //   expect(response.body.data).toHaveProperty('markdown');\n      //   expect(response.body.data).toHaveProperty('metadata');\n      //   expect(response.body.data.metadata.statusCode).toBe(403);\n      // }, 60000);\n\n      it.concurrent('should return a successful response for a scrape with 404 page', async () => {\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post('/v1/scrape')\n          .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n          .set('Content-Type', 'application/json')\n          .send({ url: 'https://httpstat.us/404' });\n        await new Promise((r) => setTimeout(r, 5000));\n  \n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty('data');\n        if (!(\"data\" in response.body)) {\n          throw new Error(\"Expected response body to have 'data' property\");\n        }\n        expect(response.body.data).toHaveProperty('markdown');\n        expect(response.body.data).toHaveProperty('metadata');\n        expect(response.body.data.metadata.statusCode).toBe(404);\n      }, 60000);\n\n      // it.concurrent('should return a successful response for a scrape with 405 page', async () => {\n      //   const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      //     .post('/v1/scrape')\n      //     .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n      //     .set('Content-Type', 'application/json')\n      //     .send({ url: 'https://httpstat.us/405' });\n      //   await new Promise((r) => setTimeout(r, 5000));\n  \n      //   expect(response.statusCode).toBe(200);\n      //   expect(response.body).toHaveProperty('data');\n      //   if (!(\"data\" in response.body)) {\n      //     throw new Error(\"Expected response body to have 'data' property\");\n      //   }\n      //   expect(response.body.data).toHaveProperty('markdown');\n      //   expect(response.body.data).toHaveProperty('metadata');\n      //   expect(response.body.data.metadata.statusCode).toBe(405);\n      // }, 60000);\n\n      // it.concurrent('should return a successful response for a scrape with 500 page', async () => {\n      //   const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      //     .post('/v1/scrape')\n      //     .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n      //     .set('Content-Type', 'application/json')\n      //     .send({ url: 'https://httpstat.us/500' });\n      //   await new Promise((r) => setTimeout(r, 5000));\n  \n      //   expect(response.statusCode).toBe(200);\n      //   expect(response.body).toHaveProperty('data');\n      //   if (!(\"data\" in response.body)) {\n      //     throw new Error(\"Expected response body to have 'data' property\");\n      //   }\n      //   expect(response.body.data).toHaveProperty('markdown');\n      //   expect(response.body.data).toHaveProperty('metadata');\n      //   expect(response.body.data.metadata.statusCode).toBe(500);\n      // }, 60000);\n\n      it.concurrent(\"should return a timeout error when scraping takes longer than the specified timeout\", async () => {\n        const response: ScrapeResponseRequestTest = await request(TEST_URL)\n          .post(\"/v1/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\", timeout: 1000 });\n  \n        expect(response.statusCode).toBe(408);\n      }, 3000);\n\n      it.concurrent(\n        \"should return a successful response with a valid API key and includeHtml set to true\",\n        async () => {\n          const scrapeRequest: ScrapeRequestInput = {\n            url: \"https://roastmywebsite.ai\",\n            formats: [\"html\",\"rawHtml\"],\n          };\n  \n          const response: ScrapeResponseRequestTest = await request(TEST_URL)\n            .post(\"/v1/scrape\")\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n            .set(\"Content-Type\", \"application/json\")\n            .send(scrapeRequest);\n          \n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"data\");\n          if (!(\"data\" in response.body)) {\n            throw new Error(\"Expected response body to have 'data' property\");\n          }\n          expect(response.body.data).not.toHaveProperty(\"markdown\");\n          expect(response.body.data).toHaveProperty(\"html\");\n          expect(response.body.data).toHaveProperty(\"rawHtml\");\n          expect(response.body.data).toHaveProperty(\"metadata\");\n          expect(response.body.data.html).toContain(\"<h1\");\n          expect(response.body.data.rawHtml).toContain(\"<html\");\n          expect(response.body.data.metadata.statusCode).toBe(200);\n          expect(response.body.data.metadata.error).toBeUndefined();\n        },\n        30000\n      );\n\n      it.concurrent(\n        \"should return a successful response with waitFor\",\n        async () => {\n          const scrapeRequest: ScrapeRequestInput = {\n            url: \"https://ycombinator.com/companies\",\n            formats: [\"markdown\"],\n            waitFor: 8000\n          };\n  \n          const response: ScrapeResponseRequestTest = await request(TEST_URL)\n            .post(\"/v1/scrape\")\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n            .set(\"Content-Type\", \"application/json\")\n            .send(scrapeRequest);\n          \n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"data\");\n          if (!(\"data\" in response.body)) {\n            throw new Error(\"Expected response body to have 'data' property\");\n          }\n          expect(response.body.data).toHaveProperty(\"markdown\");\n          expect(response.body.data).not.toHaveProperty(\"html\");\n          expect(response.body.data).not.toHaveProperty(\"links\");\n          expect(response.body.data).not.toHaveProperty(\"rawHtml\");\n          expect(response.body.data).toHaveProperty(\"metadata\");\n          expect(response.body.data.markdown).toContain(\"PagerDuty\");\n          expect(response.body.data.metadata.statusCode).toBe(200);\n          expect(response.body.data.metadata.error).toBeUndefined();\n\n        },\n        30000\n      );\n\n      it.concurrent(\n        \"should return a successful response with a valid links on page\",\n        async () => {\n          const scrapeRequest: ScrapeRequestInput = {\n            url: \"https://roastmywebsite.ai\",\n            formats: [\"links\"],\n          };\n  \n          const response: ScrapeResponseRequestTest = await request(TEST_URL)\n            .post(\"/v1/scrape\")\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n            .set(\"Content-Type\", \"application/json\")\n            .send(scrapeRequest);\n          \n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"data\");\n          if (!(\"data\" in response.body)) {\n            throw new Error(\"Expected response body to have 'data' property\");\n          }\n          expect(response.body.data).not.toHaveProperty(\"html\");\n          expect(response.body.data).not.toHaveProperty(\"rawHtml\");\n          expect(response.body.data).toHaveProperty(\"links\");\n          expect(response.body.data).toHaveProperty(\"metadata\");\n          expect(response.body.data.links).toContain(\"https://firecrawl.dev\");\n          expect(response.body.data.metadata.statusCode).toBe(200);\n          expect(response.body.data.metadata.error).toBeUndefined();\n        },\n        30000\n      );\n      \n\n  });\n\ndescribe(\"POST /v1/map\", () => {\n  it.concurrent(\"should require authorization\", async () => {\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n    .post(\"/v1/map\")\n    .send({ url: \"https://firecrawl.dev\" });\n    expect(response.statusCode).toBe(401);\n  });\n\n  it.concurrent(\"should return an error response with an invalid API key\", async () => {\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer invalid-api-key`)\n      .set(\"Content-Type\", \"application/json\")\n      .send({ url: \"https://firecrawl.dev\" });\n    expect(response.statusCode).toBe(401);\n  });\n\n  it.concurrent(\"should return a successful response with a valid API key\", async () => {\n    const mapRequest = {\n      url: \"https://roastmywebsite.ai\"\n    };\n\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(mapRequest);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"success\", true);\n    expect(response.body).toHaveProperty(\"links\");\n    if (!(\"links\" in response.body)) {\n      throw new Error(\"Expected response body to have 'links' property\");\n    }\n    const links = response.body.links as unknown[];\n    expect(Array.isArray(links)).toBe(true);\n    expect(links.length).toBeGreaterThan(0);\n  });\n\n  it.concurrent(\"should return a successful response with a valid API key and search\", async () => {\n    const mapRequest = {\n      url: \"https://usemotion.com\",\n      search: \"pricing\"\n    };\n\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(mapRequest);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"success\", true);\n    expect(response.body).toHaveProperty(\"links\");\n    if (!(\"links\" in response.body)) {\n      throw new Error(\"Expected response body to have 'links' property\");\n    }\n    const links = response.body.links as unknown[];\n    expect(Array.isArray(links)).toBe(true);\n    expect(links.length).toBeGreaterThan(0);\n    expect(links[0]).toContain(\"usemotion.com/pricing\");\n  });\n\n  it.concurrent(\"should return a successful response with a valid API key and search and allowSubdomains\", async () => {\n    const mapRequest = {\n      url: \"https://firecrawl.dev\",\n      search: \"docs\",\n      includeSubdomains: true\n    };\n\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(mapRequest);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"success\", true);\n    expect(response.body).toHaveProperty(\"links\");\n    if (!(\"links\" in response.body)) {\n      throw new Error(\"Expected response body to have 'links' property\");\n    }\n    const links = response.body.links as unknown[];\n    expect(Array.isArray(links)).toBe(true);\n    expect(links.length).toBeGreaterThan(0);\n\n    const containsDocsFirecrawlDev = links.some((link: string) => link.includes(\"docs.firecrawl.dev\"));\n    expect(containsDocsFirecrawlDev).toBe(true);\n  });\n\n  it.concurrent(\"should return a successful response with a valid API key and search and allowSubdomains and www\", async () => {\n    const mapRequest = {\n      url: \"https://www.firecrawl.dev\",\n      search: \"docs\",\n      includeSubdomains: true\n    };\n\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(mapRequest);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"success\", true);\n    expect(response.body).toHaveProperty(\"links\");\n    if (!(\"links\" in response.body)) {\n      throw new Error(\"Expected response body to have 'links' property\");\n    }\n    const links = response.body.links as unknown[];\n    expect(Array.isArray(links)).toBe(true);\n    expect(links.length).toBeGreaterThan(0);\n\n    const containsDocsFirecrawlDev = links.some((link: string) => link.includes(\"docs.firecrawl.dev\"));\n    expect(containsDocsFirecrawlDev).toBe(true);\n  }, 10000)\n\n  it.concurrent(\"should return a successful response with a valid API key and search and not allowSubdomains and www\", async () => {\n    const mapRequest = {\n      url: \"https://www.firecrawl.dev\",\n      search: \"docs\",\n      includeSubdomains: false\n    };\n\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(mapRequest);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"success\", true);\n    expect(response.body).toHaveProperty(\"links\");\n    if (!(\"links\" in response.body)) {\n      throw new Error(\"Expected response body to have 'links' property\");\n    }\n    const links = response.body.links as unknown[];\n    expect(Array.isArray(links)).toBe(true);\n    expect(links.length).toBeGreaterThan(0);\n    expect(links[0]).not.toContain(\"docs.firecrawl.dev\");\n  })\n\n  it.concurrent(\"should return an error for invalid URL\", async () => {\n    const mapRequest = {\n      url: \"invalid-url\",\n      includeSubdomains: true,\n      search: \"test\",\n    };\n\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n      .post(\"/v1/map\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(mapRequest);\n\n    expect(response.statusCode).toBe(400);\n    expect(response.body).toHaveProperty(\"success\", false);\n    expect(response.body).toHaveProperty(\"error\");\n  });\n});\n\n\ndescribe(\"POST /v1/crawl\", () => {\n  it.concurrent(\"should require authorization\", async () => {\n    const response: ScrapeResponseRequestTest = await request(TEST_URL)\n    .post(\"/v1/crawl\")\n    .send({ url: \"https://firecrawl.dev\" });\n    expect(response.statusCode).toBe(401);\n  });\n  \n  it.concurrent(\"should throw error for blocklisted URL\", async () => {\n    const scrapeRequest: ScrapeRequestInput = {\n      url: \"https://facebook.com/fake-test\",\n    };\n\n    const response = await request(TEST_URL)\n      .post(\"/v1/crawl\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(scrapeRequest);\n\n    expect(response.statusCode).toBe(403);\n    expect(response.body.error).toBe(\"URL is blocked. Firecrawl currently does not support social media scraping due to policy restrictions.\");\n  });\n\n  it.concurrent(\n    \"should return an error response with an invalid API key\",\n    async () => {\n      const response: ScrapeResponseRequestTest = await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer invalid-api-key`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://firecrawl.dev\" });\n      expect(response.statusCode).toBe(401);\n    }\n  );\n\n  it.concurrent(\"should return a successful response\", async () => {\n    const response = await request(TEST_URL)\n      .post(\"/v1/crawl\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send({ url: \"https://firecrawl.dev\" });\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"id\");\n    expect(response.body.id).toMatch(\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/\n    );\n    expect(response.body).toHaveProperty(\"success\", true);\n    expect(response.body).toHaveProperty(\"url\");\n    expect(response.body.url).toContain(\"/v1/crawl/\");\n  });\n\n  it.concurrent(\n    \"should return a successful response with a valid API key and valid includes option\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://firecrawl.dev\",\n          limit: 40,\n          includePaths: [\"blog/*\"],\n        });\n\n      let response;\n      let isFinished = false;\n\n      while (!isFinished) {\n        response = await request(TEST_URL)\n          .get(`/v1/crawl/${crawlResponse.body.id}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        isFinished = response.body.status === \"completed\";\n\n        if (!isFinished) {\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n        }\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for data to be saved on the database\n      const completedResponse = await request(TEST_URL)\n        .get(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n      const urls = completedResponse.body.data.map(\n        (item: any) => item.metadata?.sourceURL\n      );\n      expect(urls.length).toBeGreaterThan(5);\n      urls.forEach((url: string) => {\n        expect(url).toContain(\"firecrawl.dev/blog\");\n      });\n\n      expect(completedResponse.statusCode).toBe(200);\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"completed\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n      expect(completedResponse.body.data[0]).not.toHaveProperty(\"content\"); // v0\n      expect(completedResponse.body.data[0].metadata.statusCode).toBe(200);\n      expect(completedResponse.body.data[0].metadata.error).toBeUndefined();\n    },\n    180000\n  ); // 180 seconds\n\n  it.concurrent(\n    \"should return a successful response with a valid API key and valid excludes option\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://firecrawl.dev\",\n          limit: 40,\n          excludePaths: [\"blog/*\"],\n        });\n\n      let isFinished = false;\n      let response;\n\n      while (!isFinished) {\n        response = await request(TEST_URL)\n          .get(`/v1/crawl/${crawlResponse.body.id}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        isFinished = response.body.status === \"completed\";\n\n        if (!isFinished) {\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n        }\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for data to be saved on the database\n      const completedResponse = await request(\n        TEST_URL\n      )\n        .get(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n      const urls = completedResponse.body.data.map(\n        (item: any) => item.metadata?.sourceURL\n      );\n      expect(urls.length).toBeGreaterThan(3);\n      urls.forEach((url: string) => {\n        expect(url.startsWith(\"https://www.firecrawl.dev/blog/\")).toBeFalsy();\n      });\n    },\n    90000\n  ); // 90 seconds\n\n  it.concurrent(\n    \"should return a successful response with max depth option for a valid crawl job\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://www.scrapethissite.com\",\n          maxDepth: 1,\n        });\n      expect(crawlResponse.statusCode).toBe(200);\n\n      const response = await request(TEST_URL)\n        .get(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"status\");\n      expect([\"active\", \"waiting\", \"completed\", \"scraping\"]).toContain(response.body.status);\n      // wait for 60 seconds\n      let isCompleted = false;\n      while (!isCompleted) {\n        const statusCheckResponse = await request(TEST_URL)\n          .get(`/v1/crawl/${crawlResponse.body.id}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(statusCheckResponse.statusCode).toBe(200);\n        isCompleted = statusCheckResponse.body.status === \"completed\";\n        if (!isCompleted) {\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n        }\n      }\n      const completedResponse = await request(\n        TEST_URL\n      )\n        .get(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n      expect(completedResponse.statusCode).toBe(200);\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"completed\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data[0]).not.toHaveProperty(\"content\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n      expect(completedResponse.body.data[0].metadata.statusCode).toBe(200);\n      expect(completedResponse.body.data[0].metadata.error).toBeUndefined();\n      const urls = completedResponse.body.data.map(\n        (item: any) => item.metadata?.sourceURL\n      );\n      expect(urls.length).toBeGreaterThan(1);\n\n      // Check if all URLs have a maximum depth of 1\n      urls.forEach((url: string) => {\n        const pathSplits = new URL(url).pathname.split(\"/\");\n        const depth =\n          pathSplits.length -\n          (pathSplits[0].length === 0 &&\n          pathSplits[pathSplits.length - 1].length === 0\n            ? 1\n            : 0);\n        expect(depth).toBeLessThanOrEqual(2);\n      });\n    },\n    180000\n  );\n})\n\ndescribe(\"GET /v1/crawl/:jobId\", () => {\n  it.concurrent(\"should require authorization\", async () => {\n    const response = await request(TEST_URL).get(\"/v1/crawl/123\");\n    expect(response.statusCode).toBe(401);\n  });\n\n  it.concurrent(\n    \"should return an error response with an invalid API key\",\n    async () => {\n      const response = await request(TEST_URL)\n        .get(\"/v1/crawl/123\")\n        .set(\"Authorization\", `Bearer invalid-api-key`);\n      expect(response.statusCode).toBe(401);\n    }\n  );\n\n  it.concurrent(\n    \"should return Job not found for invalid job ID\",\n    async () => {\n      const response = await request(TEST_URL)\n        .get(\"/v1/crawl/invalidJobId\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n      expect(response.statusCode).toBe(404);\n    }\n  );\n\n  it.concurrent(\n    \"should return a successful crawl status response for a valid crawl job\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://docs.firecrawl.dev\" });\n      expect(crawlResponse.statusCode).toBe(200);\n\n      let isCompleted = false;\n\n      while (!isCompleted) {\n        const response = await request(TEST_URL)\n          .get(`/v1/crawl/${crawlResponse.body.id}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n\n        if (response.body.status === \"completed\") {\n          isCompleted = true;\n        } else {\n          await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n        }\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for data to be saved on the database\n      const completedResponse = await request(TEST_URL)\n        .get(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"completed\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data[0]).not.toHaveProperty(\"content\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n      expect(completedResponse.body.data[0].metadata.statusCode).toBe(200);\n      expect(\n        completedResponse.body.data[0].metadata.error\n      ).toBeUndefined();\n\n      const childrenLinks = completedResponse.body.data.filter(\n        (doc) =>\n          doc.metadata &&\n          doc.metadata.sourceURL\n      );\n\n      expect(childrenLinks.length).toBe(completedResponse.body.data.length);\n    },\n    180000\n  ); // 120 seconds\n\n  it.concurrent(\n    \"If someone cancels a crawl job, it should turn into failed status\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://docs.firecrawl.dev\", limit: 10 });\n\n      expect(crawlResponse.statusCode).toBe(200);\n\n      await new Promise((r) => setTimeout(r, 10000));\n\n      const responseCancel = await request(TEST_URL)\n        .delete(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n      expect(responseCancel.statusCode).toBe(200);\n      expect(responseCancel.body).toHaveProperty(\"status\");\n      expect(responseCancel.body.status).toBe(\"cancelled\");\n\n      await new Promise((r) => setTimeout(r, 10000));\n      const completedResponse = await request(TEST_URL)\n        .get(`/v1/crawl/${crawlResponse.body.id}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n      \n      expect(completedResponse.statusCode).toBe(200);\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"cancelled\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n      expect(completedResponse.body.data[0].metadata.statusCode).toBe(200);\n      expect(completedResponse.body.data[0].metadata.error).toBeUndefined();\n    },\n    60000\n  ); // 60 seconds\n})\n});\n"]}
{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_v1_withAuth_all_params/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport { configDotenv } from \"dotenv\";\nimport {\n  ScrapeRequest,\n  ScrapeResponseRequestTest,\n} from \"../../controllers/v1/types\";\n\nconfigDotenv();\nconst FIRECRAWL_API_URL = \"http://127.0.0.1:3002\";\nconst E2E_TEST_SERVER_URL = \"http://firecrawl-e2e-test.vercel.app\"; // @rafaelsideguide/firecrawl-e2e-test\n\ndescribe(\"E2E Tests for v1 API Routes\", () => {\n\n  it.concurrent('should return a successful response for a scrape with 403 page', async () => {\n    const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n      .post('/v1/scrape')\n      .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n      .set('Content-Type', 'application/json')\n      .send({ url: 'https://httpstat.us/403' });\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty('data');\n    if (!(\"data\" in response.body)) {\n      throw new Error(\"Expected response body to have 'data' property\");\n    }\n    expect(response.body.data).toHaveProperty('markdown');\n    expect(response.body.data).toHaveProperty('metadata');\n    expect(response.body.data.metadata.statusCode).toBe(403);\n  }, 30000);\n\n  it.concurrent(\"should handle 'formats:markdown (default)' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL\n      } as ScrapeRequest;\n\n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data).toHaveProperty(\"markdown\");\n      \n      expect(response.body.data.markdown).toContain(\"This page is used for end-to-end (e2e) testing with Firecrawl.\");\n      expect(response.body.data.markdown).toContain(\"Content with id #content-1\");\n      // expect(response.body.data.markdown).toContain(\"Loading...\");\n      expect(response.body.data.markdown).toContain(\"Click me!\");\n      expect(response.body.data.markdown).toContain(\"Power your AI apps with clean data crawled from any website. It's also open-source.\"); // firecrawl.dev inside an iframe\n      expect(response.body.data.markdown).toContain(\"This content loads only when you see it. Don't blink! 👼\"); // the browser always scroll to the bottom\n      expect(response.body.data.markdown).not.toContain(\"Header\"); // Only main content is returned by default\n      expect(response.body.data.markdown).not.toContain(\"footer\"); // Only main content is returned by default\n      expect(response.body.data.markdown).not.toContain(\"This content is only visible on mobile\");\n    },\n  30000);\n\n  it.concurrent(\"should handle 'formats:html' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"html\"]\n      } as ScrapeRequest;\n\n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n\n      expect(response.body.data).not.toHaveProperty(\"markdown\");\n      expect(response.body.data).toHaveProperty(\"html\");\n\n      expect(response.body.data.html).not.toContain(\"<header class=\\\"row-start-1\\\" style=\\\"\\\">Header</header>\");\n      expect(response.body.data.html).toContain(\"<p style=\\\"\\\">This page is used for end-to-end (e2e) testing with Firecrawl.</p>\");\n    },\n  30000);\n\n  it.concurrent(\"should handle 'rawHtml' in 'formats' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"rawHtml\"]\n      } as ScrapeRequest;\n\n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data).not.toHaveProperty(\"markdown\");\n      expect(response.body.data).toHaveProperty(\"rawHtml\");\n\n      expect(response.body.data.rawHtml).toContain(\">This page is used for end-to-end (e2e) testing with Firecrawl.</p>\");\n      expect(response.body.data.rawHtml).toContain(\">Header</header>\");\n    },\n  30000);\n  \n  // - TODO: tests for links\n  // - TODO: tests for screenshot\n  // - TODO: tests for screenshot@fullPage\n\n  it.concurrent(\"should handle 'headers' parameter correctly\", async () => {\n    // @ts-ignore\n    const scrapeRequest = {\n      url: E2E_TEST_SERVER_URL,\n      headers: { \"e2e-header-test\": \"firecrawl\" }\n    } as ScrapeRequest;\n\n    const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n      .post(\"/v1/scrape\")\n      .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n      .set(\"Content-Type\", \"application/json\")\n      .send(scrapeRequest);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty(\"data\");\n    if (!(\"data\" in response.body)) {\n      throw new Error(\"Expected response body to have 'data' property\");\n    }\n\n    expect(response.body.data.markdown).toContain(\"e2e-header-test: firecrawl\");\n  }, 30000);\n  \n  it.concurrent(\"should handle 'includeTags' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        includeTags: ['#content-1']\n      } as ScrapeRequest;\n\n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).not.toContain(\"<p>This page is used for end-to-end (e2e) testing with Firecrawl.</p>\");\n      expect(response.body.data.markdown).toContain(\"Content with id #content-1\");\n    },\n  30000);\n  \n  it.concurrent(\"should handle 'excludeTags' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        excludeTags: ['#content-1']\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).toContain(\"This page is used for end-to-end (e2e) testing with Firecrawl.\");\n      expect(response.body.data.markdown).not.toContain(\"Content with id #content-1\");\n    },\n  30000);\n  \n  it.concurrent(\"should handle 'onlyMainContent' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"html\", \"markdown\"],\n        onlyMainContent: false\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      \n      expect(response.body.data.markdown).toContain(\"This page is used for end-to-end (e2e) testing with Firecrawl.\");\n      expect(response.body.data.html).toContain(\"<header class=\\\"row-start-1\\\" style=\\\"\\\">Header</header>\");\n    },\n  30000);\n  \n  it.concurrent(\"should handle 'timeout' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        timeout: 500\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(408);\n\n      if (!(\"error\" in response.body)) {\n        throw new Error(\"Expected response body to have 'error' property\");\n      }\n      expect(response.body.error).toBe(\"Request timed out\");\n      expect(response.body.success).toBe(false);\n    }, 30000);\n\n  \n  it.concurrent(\"should handle 'mobile' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        mobile: true\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.markdown).toContain(\"This content is only visible on mobile\");\n    },\n  30000);\n  \n  it.concurrent(\"should handle 'parsePDF' parameter correctly\",\n    async () => {  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: 'https://arxiv.org/pdf/astro-ph/9301001.pdf'});\n      await new Promise((r) => setTimeout(r, 6000));\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty('data');\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).toContain('arXiv:astro-ph/9301001v1 7 Jan 1993');\n      expect(response.body.data.markdown).not.toContain('h7uKu14adDL6yGfnGf2qycY5uq8kC3OKCWkPxm');\n\n      const responseNoParsePDF: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: 'https://arxiv.org/pdf/astro-ph/9301001.pdf', parsePDF: false });\n      await new Promise((r) => setTimeout(r, 6000));\n\n      expect(responseNoParsePDF.statusCode).toBe(200);\n      expect(responseNoParsePDF.body).toHaveProperty('data');\n      if (!(\"data\" in responseNoParsePDF.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(responseNoParsePDF.body.data.markdown).toContain('h7uKu14adDL6yGfnGf2qycY5uq8kC3OKCWkPxm');\n    },\n  30000);\n  \n  // it.concurrent(\"should handle 'location' parameter correctly\",\n  //   async () => {\n  //     const scrapeRequest: ScrapeRequest = {\n  //       url: \"https://roastmywebsite.ai\",\n  //       location: {\n  //         country: \"US\",\n  //         languages: [\"en\"]\n  //       }\n  //     };\n  \n  //     const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n  //       .post(\"/v1/scrape\")\n  //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //       .set(\"Content-Type\", \"application/json\")\n  //       .send(scrapeRequest);\n  \n  //     expect(response.statusCode).toBe(200);\n  //     // Add assertions to verify location is handled correctly\n  //   },\n  // 30000);\n  \n  it.concurrent(\"should handle 'skipTlsVerification' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: \"https://expired.badssl.com/\",\n        timeout: 120000\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n        console.log(\"Error1a\")\n        // console.log(response.body)\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.metadata.pageStatusCode).toBe(500);\n      console.log(\"Error?\")\n      \n      const scrapeRequestWithSkipTlsVerification = {\n        url: \"https://expired.badssl.com/\",\n        skipTlsVerification: true,\n        timeout: 120000\n\n      } as ScrapeRequest;\n  \n      const responseWithSkipTlsVerification: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequestWithSkipTlsVerification);\n  \n      console.log(\"Error1b\")\n      // console.log(responseWithSkipTlsVerification.body)\n      expect(responseWithSkipTlsVerification.statusCode).toBe(200);\n      if (!(\"data\" in responseWithSkipTlsVerification.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      // console.log(responseWithSkipTlsVerification.body.data)\n      expect(responseWithSkipTlsVerification.body.data.markdown).toContain(\"badssl.com\");\n    },\n  60000);\n  \n  it.concurrent(\"should handle 'removeBase64Images' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        removeBase64Images: true\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      // console.log(response.body.data.markdown)\n      // - TODO: not working for every image\n      // expect(response.body.data.markdown).toContain(\"Image-Removed\");\n    },\n  30000);\n\n  it.concurrent(\"should handle 'action wait' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [{\n          type: \"wait\",\n          milliseconds: 10000\n        }]\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.markdown).not.toContain(\"Loading...\");\n      expect(response.body.data.markdown).toContain(\"Content loaded after 5 seconds!\");\n    },\n  30000);\n\n  // screenshot\n  it.concurrent(\"should handle 'action screenshot' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [{\n          type: \"screenshot\"\n        }]\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      if (!response.body.data.actions?.screenshots) {\n        throw new Error(\"Expected response body to have screenshots array\");\n      }\n      expect(response.body.data.actions.screenshots[0].length).toBeGreaterThan(0);\n      expect(response.body.data.actions.screenshots[0]).toContain(\"https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-\");\n\n      // TODO compare screenshot with expected screenshot\n    },\n  30000);\n\n  it.concurrent(\"should handle 'action screenshot@fullPage' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [{\n          type: \"screenshot\",\n          fullPage: true\n        },\n      {\n        type:\"scrape\"\n      }]\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      // console.log(response.body.data.actions?.screenshots[0])\n      if (!response.body.data.actions?.screenshots) {\n        throw new Error(\"Expected response body to have screenshots array\");\n      }\n      expect(response.body.data.actions.screenshots[0].length).toBeGreaterThan(0);\n      expect(response.body.data.actions.screenshots[0]).toContain(\"https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-\");\n\n      if (!response.body.data.actions?.scrapes) {\n        throw new Error(\"Expected response body to have scrapes array\"); \n      }\n      expect(response.body.data.actions.scrapes[0].url).toBe(\"https://firecrawl-e2e-test.vercel.app/\");\n      expect(response.body.data.actions.scrapes[0].html).toContain(\"This page is used for end-to-end (e2e) testing with Firecrawl.</p>\");\n      // TODO compare screenshot with expected full page screenshot\n    },\n  30000);\n\n  it.concurrent(\"should handle 'action click' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [{\n          type: \"click\",\n          selector: \"#click-me\"\n        }]\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.markdown).not.toContain(\"Click me!\");\n      expect(response.body.data.markdown).toContain(\"Text changed after click!\");\n    },\n  30000);\n\n  it.concurrent(\"should handle 'action write' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"html\"],\n        actions: [{\n          type: \"click\",\n          selector: \"#input-1\"\n        },\n        {\n          type: \"write\",\n          text: \"Hello, world!\"\n        }\n      ]} as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      \n      // TODO: fix this test (need to fix fire-engine first)\n      // uncomment the following line:\n      // expect(response.body.data.html).toContain(\"<input id=\\\"input-1\\\" type=\\\"text\\\" placeholder=\\\"Enter text here...\\\" style=\\\"padding:8px;margin:10px;border:1px solid #ccc;border-radius:4px;background-color:#000\\\" value=\\\"Hello, world!\\\">\");\n    },\n  30000);\n\n  // TODO: fix this test (need to fix fire-engine first)\n  it.concurrent(\"should handle 'action pressKey' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"markdown\"],\n        actions: [\n          {\n            type: \"press\",\n            key: \"ArrowDown\"\n          }\n        ]\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      // // TODO: fix this test (need to fix fire-engine first)\n      // // right now response.body is: { success: false, error: '(Internal server error) - null' }\n      // expect(response.statusCode).toBe(200);\n      // if (!(\"data\" in response.body)) {\n      //   throw new Error(\"Expected response body to have 'data' property\");\n      // }\n      // expect(response.body.data.markdown).toContain(\"Last Key Clicked: ArrowDown\")\n    },\n  30000);\n\n  // TODO: fix this test (need to fix fire-engine first)\n  it.concurrent(\"should handle 'action scroll' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"markdown\"],\n        actions: [\n          {\n            type: \"click\",\n            selector: \"#scroll-bottom-loader\"\n          },\n          {\n            type: \"scroll\",\n            direction: \"down\",\n            amount: 2000\n          }\n        ]\n      } as ScrapeRequest;\n  \n      const response: ScrapeResponseRequestTest = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n  \n      // TODO: uncomment this tests\n      // expect(response.statusCode).toBe(200);\n      // if (!(\"data\" in response.body)) {\n      //   throw new Error(\"Expected response body to have 'data' property\");\n      // }\n      // \n      // expect(response.body.data.markdown).toContain(\"You have reached the bottom!\")\n    },\n  30000);\n\n  // TODO: test scrape action\n\n});"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/transformers/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseMarkdown } from \"../../../lib/html-to-markdown\";\nimport { Meta } from \"..\";\nimport { Document } from \"../../../controllers/v1/types\";\nimport { removeUnwantedElements } from \"../lib/removeUnwantedElements\";\nimport { extractLinks } from \"../lib/extractLinks\";\nimport { extractMetadata } from \"../lib/extractMetadata\";\nimport { performLLMExtract } from \"./llmExtract\";\nimport { uploadScreenshot } from \"./uploadScreenshot\";\nimport { removeBase64Images } from \"./removeBase64Images\";\nimport { saveToCache } from \"./cache\";\n\nexport type Transformer = (meta: Meta, document: Document) => Document | Promise<Document>;\n\nexport function deriveMetadataFromRawHTML(meta: Meta, document: Document): Document {\n    if (document.rawHtml === undefined) {\n        throw new Error(\"rawHtml is undefined -- this transformer is being called out of order\");\n    }\n\n    document.metadata = {\n        ...extractMetadata(meta, document.rawHtml),\n        ...document.metadata,\n    };\n    return document;\n}\n\nexport function deriveHTMLFromRawHTML(meta: Meta, document: Document): Document {\n    if (document.rawHtml === undefined) {\n        throw new Error(\"rawHtml is undefined -- this transformer is being called out of order\");\n    }\n\n    document.html = removeUnwantedElements(document.rawHtml, meta.options);\n    return document;\n}\n\nexport async function deriveMarkdownFromHTML(_meta: Meta, document: Document): Promise<Document> {\n    if (document.html === undefined) {\n        throw new Error(\"html is undefined -- this transformer is being called out of order\");\n    }\n\n    document.markdown = await parseMarkdown(document.html);\n    return document;\n}\n\nexport function deriveLinksFromHTML(meta: Meta, document: Document): Document {\n    // Only derive if the formats has links\n    if (meta.options.formats.includes(\"links\")) {\n        if (document.html === undefined) {\n            throw new Error(\"html is undefined -- this transformer is being called out of order\");\n        }\n\n        document.links = extractLinks(document.html, meta.url);\n    }\n\n    return document;\n}\n\nexport function coerceFieldsToFormats(meta: Meta, document: Document): Document {\n    const formats = new Set(meta.options.formats);\n\n    if (!formats.has(\"markdown\") && document.markdown !== undefined) {\n        delete document.markdown;\n    } else if (formats.has(\"markdown\") && document.markdown === undefined) {\n        meta.logger.warn(\"Request had format: markdown, but there was no markdown field in the result.\");\n    }\n\n    if (!formats.has(\"rawHtml\") && document.rawHtml !== undefined) {\n        delete document.rawHtml;\n    } else if (formats.has(\"rawHtml\") && document.rawHtml === undefined) {\n        meta.logger.warn(\"Request had format: rawHtml, but there was no rawHtml field in the result.\");\n    }\n\n    if (!formats.has(\"html\") && document.html !== undefined) {\n        delete document.html;\n    } else if (formats.has(\"html\") && document.html === undefined) {\n        meta.logger.warn(\"Request had format: html, but there was no html field in the result.\");\n    }\n\n    if (!formats.has(\"screenshot\") && !formats.has(\"screenshot@fullPage\") && document.screenshot !== undefined) {\n        meta.logger.warn(\"Removed screenshot from Document because it wasn't in formats -- this is very wasteful and indicates a bug.\");\n        delete document.screenshot;\n    } else if ((formats.has(\"screenshot\") || formats.has(\"screenshot@fullPage\")) && document.screenshot === undefined) {\n        meta.logger.warn(\"Request had format: screenshot / screenshot@fullPage, but there was no screenshot field in the result.\");\n    }\n\n    if (!formats.has(\"links\") && document.links !== undefined) {\n        meta.logger.warn(\"Removed links from Document because it wasn't in formats -- this is wasteful and indicates a bug.\");\n        delete document.links;\n    } else if (formats.has(\"links\") && document.links === undefined) {\n        meta.logger.warn(\"Request had format: links, but there was no links field in the result.\");\n    }\n\n    if (!formats.has(\"extract\") && document.extract !== undefined) {\n        meta.logger.warn(\"Removed extract from Document because it wasn't in formats -- this is extremely wasteful and indicates a bug.\");\n        delete document.extract;\n    } else if (formats.has(\"extract\") && document.extract === undefined) {\n        meta.logger.warn(\"Request had format: extract, but there was no extract field in the result.\");\n    }\n\n    if (meta.options.actions === undefined || meta.options.actions.length === 0) {\n        delete document.actions;\n    }\n\n    return document;\n}\n\n// TODO: allow some of these to run in parallel\nexport const transformerStack: Transformer[] = [\n    saveToCache,\n    deriveHTMLFromRawHTML,\n    deriveMarkdownFromHTML,\n    deriveLinksFromHTML,\n    deriveMetadataFromRawHTML,\n    uploadScreenshot,\n    performLLMExtract,\n    coerceFieldsToFormats,\n    removeBase64Images, \n];\n\nexport async function executeTransformers(meta: Meta, document: Document): Promise<Document> {\n    const executions: [string, number][] = [];\n\n    for (const transformer of transformerStack) {\n        const _meta = {\n            ...meta,\n            logger: meta.logger.child({ method: \"executeTransformers/\" + transformer.name }),\n        };\n        const start = Date.now();\n        document = await transformer(_meta, document);\n        executions.push([transformer.name, Date.now() - start]);\n    }\n\n    meta.logger.debug(\"Executed transformers.\", { executions });\n\n    return document;\n}\n"]}
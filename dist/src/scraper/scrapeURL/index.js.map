{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/scraper/scrapeURL/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"winston\";\nimport * as Sentry from \"@sentry/node\";\n\nimport { Document, ScrapeOptions } from \"../../controllers/v1/types\";\nimport { logger } from \"../../lib/logger\";\nimport { buildFallbackList, Engine, EngineScrapeResult, FeatureFlag, scrapeURLWithEngine } from \"./engines\";\nimport { parseMarkdown } from \"../../lib/html-to-markdown\";\nimport { AddFeatureError, EngineError, NoEnginesLeftError, SiteError, TimeoutError } from \"./error\";\nimport { executeTransformers } from \"./transformers\";\nimport { LLMRefusalError } from \"./transformers/llmExtract\";\nimport { urlSpecificParams } from \"./lib/urlSpecificParams\";\n\nexport type ScrapeUrlResponse = ({\n    success: true,\n    document: Document,\n} | {\n    success: false,\n    error: any,\n}) & {\n    logs: any[],\n    engines: EngineResultsTracker,\n}\n\nexport type Meta = {\n    id: string;\n    url: string;\n    options: ScrapeOptions;\n    internalOptions: InternalOptions;\n    logger: Logger;\n    logs: any[];\n    featureFlags: Set<FeatureFlag>;\n}\n\nfunction buildFeatureFlags(url: string, options: ScrapeOptions, internalOptions: InternalOptions): Set<FeatureFlag> {\n    const flags: Set<FeatureFlag> = new Set();\n\n    if (options.actions !== undefined) {\n        flags.add(\"actions\");\n    }\n\n    if (options.formats.includes(\"screenshot\")) {\n        flags.add(\"screenshot\");\n    }\n\n    if (options.formats.includes(\"screenshot@fullPage\")) {\n        flags.add(\"screenshot@fullScreen\");\n    }\n\n    if (options.waitFor !== 0) {\n        flags.add(\"waitFor\");\n    }\n\n    if (internalOptions.atsv) {\n        flags.add(\"atsv\");\n    }\n\n    if (options.location || options.geolocation) {\n        flags.add(\"location\");\n    }\n\n    if (options.mobile) {\n        flags.add(\"mobile\");\n    }\n    \n    if (options.skipTlsVerification) {\n        flags.add(\"skipTlsVerification\");\n    }\n\n    if (internalOptions.v0UseFastMode) {\n        flags.add(\"useFastMode\");\n    }\n\n    const urlO = new URL(url);\n\n    if (urlO.pathname.endsWith(\".pdf\")) {\n        flags.add(\"pdf\");\n    }\n\n    if (urlO.pathname.endsWith(\".docx\")) {\n        flags.add(\"docx\");\n    }\n\n    return flags;\n}\n\n// The meta object contains all required information to perform a scrape.\n// For example, the scrape ID, URL, options, feature flags, logs that occur while scraping.\n// The meta object is usually immutable, except for the logs array, and in edge cases (e.g. a new feature is suddenly required)\n// Having a meta object that is treated as immutable helps the code stay clean and easily tracable,\n// while also retaining the benefits that WebScraper had from its OOP design.\nfunction buildMetaObject(id: string, url: string, options: ScrapeOptions, internalOptions: InternalOptions): Meta {\n    const specParams = urlSpecificParams[new URL(url).hostname.replace(/^www\\./, \"\")];\n    if (specParams !== undefined) {\n        options = Object.assign(options, specParams.scrapeOptions);\n        internalOptions = Object.assign(internalOptions, specParams.internalOptions);\n    }\n\n    const _logger = logger.child({ module: \"ScrapeURL\", scrapeId: id, scrapeURL: url });\n    const logs: any[] = [];\n\n    return {\n        id, url, options, internalOptions,\n        logger: _logger,\n        logs,\n        featureFlags: buildFeatureFlags(url, options, internalOptions),\n    };\n}\n\nexport type InternalOptions = {\n    priority?: number; // Passed along to fire-engine\n    forceEngine?: Engine;\n    atsv?: boolean; // anti-bot solver, beta\n\n    v0CrawlOnlyUrls?: boolean;\n    v0UseFastMode?: boolean;\n    v0DisableJsDom?: boolean;\n};\n\nexport type EngineResultsTracker = { [E in Engine]?: ({\n    state: \"error\",\n    error: any,\n    unexpected: boolean,\n} | {\n    state: \"success\",\n    result: EngineScrapeResult & { markdown: string },\n    factors: Record<string, boolean>,\n    unsupportedFeatures: Set<FeatureFlag>,\n} | {\n    state: \"timeout\",\n}) & {\n    startedAt: number,\n    finishedAt: number,\n} };\n\nexport type EngineScrapeResultWithContext = {\n    engine: Engine,\n    unsupportedFeatures: Set<FeatureFlag>,\n    result: (EngineScrapeResult & { markdown: string }),\n};\n\nfunction safeguardCircularError<T>(error: T): T {\n    if (typeof error === \"object\" && error !== null && (error as any).results) {\n        const newError = structuredClone(error);\n        delete (newError as any).results;\n        return newError;\n    } else {\n        return error;\n    }\n}\n\nasync function scrapeURLLoop(\n    meta: Meta\n): Promise<ScrapeUrlResponse> {\n    meta.logger.info(`Scraping URL ${JSON.stringify(meta.url)}...`,);\n\n    // TODO: handle sitemap data, see WebScraper/index.ts:280\n    // TODO: ScrapeEvents\n\n    const fallbackList = buildFallbackList(meta);\n\n    const results: EngineResultsTracker = {};\n    let result: EngineScrapeResultWithContext | null = null;\n\n    for (const { engine, unsupportedFeatures } of fallbackList) {\n        const startedAt = Date.now();\n        try {\n            meta.logger.info(\"Scraping via \" + engine + \"...\");\n            const _engineResult = await scrapeURLWithEngine(meta, engine);\n            if (_engineResult.markdown === undefined) { // Some engines emit Markdown directly.\n                _engineResult.markdown = await parseMarkdown(_engineResult.html);\n            }\n            const engineResult = _engineResult as EngineScrapeResult & { markdown: string };\n\n            // Success factors\n            const isLongEnough = engineResult.markdown.length >= 20;\n            const isGoodStatusCode = (engineResult.statusCode >= 200 && engineResult.statusCode < 300) || engineResult.statusCode === 304;\n            const hasNoPageError = engineResult.error === undefined;\n\n            results[engine] = {\n                state: \"success\",\n                result: engineResult,\n                factors: { isLongEnough, isGoodStatusCode, hasNoPageError },\n                unsupportedFeatures,\n                startedAt,\n                finishedAt: Date.now(),\n            };\n\n            // NOTE: TODO: what to do when status code is bad is tough...\n            // we cannot just rely on text because error messages can be brief and not hit the limit\n            // should we just use all the fallbacks and pick the one with the longest text? - mogery\n            if (isLongEnough || !isGoodStatusCode) {\n                meta.logger.info(\"Scrape via \" + engine + \" deemed successful.\", { factors: { isLongEnough, isGoodStatusCode, hasNoPageError } });\n                result = {\n                    engine,\n                    unsupportedFeatures,\n                    result: engineResult as EngineScrapeResult & { markdown: string }\n                };\n                break;\n            }\n        } catch (error) {\n            if (error instanceof EngineError) {\n                meta.logger.info(\"Engine \" + engine + \" could not scrape the page.\", { error });\n                results[engine] = {\n                    state: \"error\",\n                    error: safeguardCircularError(error),\n                    unexpected: false,\n                    startedAt,\n                    finishedAt: Date.now(),\n                };\n            } else if (error instanceof TimeoutError) {\n                meta.logger.info(\"Engine \" + engine + \" timed out while scraping.\", { error });\n                results[engine] = {\n                    state: \"timeout\",\n                    startedAt,\n                    finishedAt: Date.now(),\n                };\n            } else if (error instanceof AddFeatureError) {\n                throw error;\n            } else if (error instanceof LLMRefusalError) {\n                results[engine] = {\n                    state: \"error\",\n                    error: safeguardCircularError(error),\n                    unexpected: true,\n                    startedAt,\n                    finishedAt: Date.now(),\n                }\n                error.results = results;\n                meta.logger.warn(\"LLM refusal encountered\", { error });\n                throw error;\n            } else if (error instanceof SiteError) {\n                throw error;\n            } else {\n                Sentry.captureException(error);\n                meta.logger.info(\"An unexpected error happened while scraping with \" + engine + \".\", { error });\n                results[engine] = {\n                    state: \"error\",\n                    error: safeguardCircularError(error),\n                    unexpected: true,\n                    startedAt,\n                    finishedAt: Date.now(),\n                }\n            }\n        }\n    }\n\n    if (result === null) {\n        throw new NoEnginesLeftError(fallbackList.map(x => x.engine), results);\n    }\n\n    let document: Document = {\n        markdown: result.result.markdown,\n        rawHtml: result.result.html,\n        screenshot: result.result.screenshot,\n        actions: result.result.actions,\n        metadata: {\n            sourceURL: meta.url,\n            url: result.result.url,\n            statusCode: result.result.statusCode,\n            error: result.result.error,\n        },\n    }\n\n    if (result.unsupportedFeatures.size > 0) {\n        const warning = `The engine used does not support the following features: ${[...result.unsupportedFeatures].join(\", \")} -- your scrape may be partial.`;\n        meta.logger.warn(warning, { engine: result.engine, unsupportedFeatures: result.unsupportedFeatures });\n        document.warning = document.warning !== undefined ? document.warning + \" \" + warning : warning;\n    }\n\n    document = await executeTransformers(meta, document);\n\n    return {\n        success: true,\n        document,\n        logs: meta.logs,\n        engines: results,\n    };\n}\n\nexport async function scrapeURL(\n    id: string,\n    url: string,\n    options: ScrapeOptions,\n    internalOptions: InternalOptions = {},\n): Promise<ScrapeUrlResponse> {\n    const meta = buildMetaObject(id, url, options, internalOptions);\n    try {\n        while (true) {\n            try {\n                return await scrapeURLLoop(meta);\n            } catch (error) {\n                if (error instanceof AddFeatureError && meta.internalOptions.forceEngine === undefined) {\n                    meta.logger.debug(\"More feature flags requested by scraper: adding \" + error.featureFlags.join(\", \"), { error, existingFlags: meta.featureFlags });\n                    meta.featureFlags = new Set([...meta.featureFlags].concat(error.featureFlags));\n                } else {\n                    throw error;\n                }\n            }\n        }\n    } catch (error) {\n        let results: EngineResultsTracker = {};\n\n        if (error instanceof NoEnginesLeftError) {\n            meta.logger.warn(\"scrapeURL: All scraping engines failed!\", { error });\n            results = error.results;\n        } else if (error instanceof LLMRefusalError) {\n            meta.logger.warn(\"scrapeURL: LLM refused to extract content\", { error });\n            results = error.results!;\n        } else if (error instanceof Error && error.message.includes(\"Invalid schema for response_format\")) { // TODO: seperate into custom error\n            meta.logger.warn(\"scrapeURL: LLM schema error\", { error });\n            // TODO: results?\n        } else if (error instanceof SiteError) {\n            meta.logger.warn(\"scrapeURL: Site failed to load in browser\", { error });\n        } else {\n            Sentry.captureException(error);\n            meta.logger.error(\"scrapeURL: Unexpected error happened\", { error });\n            // TODO: results?\n        }\n\n        return {\n            success: false,\n            error,\n            logs: meta.logs,\n            engines: results,\n        }\n    }\n}\n"]}
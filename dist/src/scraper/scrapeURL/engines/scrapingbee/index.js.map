{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/scrapingbee/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ScrapingBeeClient } from \"scrapingbee\";\nimport { Meta } from \"../..\";\nimport { EngineScrapeResult } from \"..\";\nimport { specialtyScrapeCheck } from \"../utils/specialtyHandler\";\nimport { AxiosError, type AxiosResponse } from \"axios\";\nimport { EngineError } from \"../../error\";\n\nconst client = new ScrapingBeeClient(process.env.SCRAPING_BEE_API_KEY!);\n\nexport function scrapeURLWithScrapingBee(wait_browser: \"domcontentloaded\" | \"networkidle2\"): ((meta: Meta) => Promise<EngineScrapeResult>) {\n    return async (meta: Meta): Promise<EngineScrapeResult> => {\n        let response: AxiosResponse<any>;\n        try {\n            response = await client.get({\n                url: meta.url,\n                params: {\n                    timeout: 15000, // TODO: dynamic timeout based on request timeout\n                    wait_browser: wait_browser,\n                    wait: Math.min(meta.options.waitFor, 35000),\n                    transparent_status_code: true,\n                    json_response: true,\n                    screenshot: meta.options.formats.includes(\"screenshot\"),\n                    screenshot_full_page: meta.options.formats.includes(\"screenshot@fullPage\"),             \n                },\n                headers: {\n                    \"ScrapingService-Request\": \"TRUE\", // this is sent to the page, not to ScrapingBee - mogery\n                },\n            });\n        } catch (error) {\n            if (error instanceof AxiosError && error.response !== undefined) {\n                response = error.response;\n            } else {\n                throw error;\n            }\n        }\n\n        const data: Buffer = response.data;\n        const body = JSON.parse(new TextDecoder().decode(data));\n\n        const headers = body.headers ?? {};\n        const isHiddenEngineError = !(headers[\"Date\"] ?? headers[\"date\"] ?? headers[\"Content-Type\"] ?? headers[\"content-type\"]);\n\n        if (body.errors || body.body?.error || isHiddenEngineError) {\n            meta.logger.error(\"ScrapingBee threw an error\", { body: body.body?.error ?? body.errors ?? body.body ?? body });\n            throw new EngineError(\"Engine error #34\", { cause: { body, statusCode: response.status } });\n        }\n\n        if (typeof body.body !== \"string\") {\n            meta.logger.error(\"ScrapingBee: Body is not string??\", { body });\n            throw new EngineError(\"Engine error #35\", { cause: { body, statusCode: response.status } });\n        }\n\n        specialtyScrapeCheck(meta.logger.child({ method: \"scrapeURLWithScrapingBee/specialtyScrapeCheck\" }), body.headers);\n\n        return {\n            url: body[\"resolved-url\"] ?? meta.url,\n\n            html: body.body,\n            error: response.status >= 300 ? response.statusText : undefined,\n            statusCode: response.status,\n            ...(body.screenshot ? ({\n                screenshot: `data:image/png;base64,${body.screenshot}`,\n            }) : {}),\n        };\n    };\n}\n"]}
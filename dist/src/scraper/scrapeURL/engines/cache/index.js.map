{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/cache/index.ts"],"names":[],"mappings":";;;AAAA,iDAAoE;AAGpE,uCAA0C;AAEnC,KAAK,UAAU,WAAW,CAAC,IAAU;IACxC,MAAM,GAAG,GAAG,IAAA,gBAAQ,EAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACnE,IAAI,GAAG,KAAK,IAAI;QAAE,MAAM,IAAI,mBAAW,CAAC,iCAAiC,CAAC,CAAC;IAE3E,MAAM,KAAK,GAAG,MAAM,IAAA,yBAAiB,EAAC,GAAG,CAAC,CAAC;IAC3C,IAAI,KAAK,KAAK,IAAI;QAAE,MAAM,IAAI,mBAAW,CAAC,cAAc,CAAC,CAAC;IAE1D,OAAO;QACH,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,UAAU,EAAE,KAAK,CAAC,UAAU;QAC5B,KAAK,EAAE,KAAK,CAAC,KAAK;KACrB,CAAC;AACN,CAAC;AAbD,kCAaC","sourcesContent":["import { cacheKey, getEntryFromCache } from \"../../../../lib/cache\";\nimport { EngineScrapeResult } from \"..\";\nimport { Meta } from \"../..\";\nimport { EngineError } from \"../../error\";\n\nexport async function scrapeCache(meta: Meta): Promise<EngineScrapeResult> {\n    const key = cacheKey(meta.url, meta.options, meta.internalOptions);\n    if (key === null) throw new EngineError(\"Scrape not eligible for caching\");\n\n    const entry = await getEntryFromCache(key);\n    if (entry === null) throw new EngineError(\"Cache missed\");\n\n    return {\n        url: entry.url,\n        html: entry.html,\n        statusCode: entry.statusCode,\n        error: entry.error,\n    };\n}"]}
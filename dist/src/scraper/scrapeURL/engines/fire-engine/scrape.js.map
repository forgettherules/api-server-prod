{"version":3,"file":"scrape.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/fire-engine/scrape.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qDAAuC;AACvC,6BAAwB;AAGxB,2CAA8C;AAoD9C,MAAM,MAAM,GAAG,OAAC,CAAC,MAAM,CAAC;IACpB,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;IACjB,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE;CAC1B,CAAC,CAAC;AAEI,KAAK,UAAU,gBAAgB,CAClC,MAAc,EACd,OAA+C;IAE/C,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAqB,CAAC;IAExD,gBAAgB;IAEhB,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC;QACzC,IAAI,EAAE,qBAAqB;QAC3B,UAAU,EAAE;YACR,GAAG,EAAE,OAAO,CAAC,GAAG;SACnB;KACJ,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;QACZ,OAAO,MAAM,IAAA,mBAAW,EACpB;YACI,GAAG,EAAE,GAAG,aAAa,SAAS;YAC9B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC1B,cAAc,EAAE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;oBAC9C,SAAS,EAAE,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC;iBAC9C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;aACX;YACD,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,8BAA8B,EAAE,CAAC;YAChE,MAAM;YACN,QAAQ,EAAE,CAAC;SACd,CACJ,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;AACzB,CAAC;AAjCD,4CAiCC","sourcesContent":["import { Logger } from \"winston\";\nimport * as Sentry from \"@sentry/node\";\nimport { z } from \"zod\";\n\nimport { Action } from \"../../../../lib/entities\";\nimport { robustFetch } from \"../../lib/fetch\";\n\nexport type FireEngineScrapeRequestCommon = {\n    url: string;\n    \n    headers?: { [K: string]: string };\n\n    blockMedia?: boolean; // default: true\n    blockAds?: boolean; // default: true\n    // pageOptions?: any; // unused, .scrollXPaths is considered on FE side\n\n    // useProxy?: boolean; // unused, default: true\n    // customProxy?: string; // unused\n\n    // disableSmartWaitCache?: boolean; // unused, default: false\n    // skipDnsCheck?: boolean; // unused, default: false\n\n    priority?: number; // default: 1\n    // team_id?: string; // unused\n    logRequest?: boolean; // default: true\n    instantReturn?: boolean; // default: false\n    geolocation?: { country?: string; languages?: string[]; };\n\n    timeout?: number;\n}\n\nexport type FireEngineScrapeRequestChromeCDP = {\n    engine: \"chrome-cdp\";\n    skipTlsVerification?: boolean;\n    actions?: Action[];\n    blockMedia?: true; // cannot be false\n    mobile?: boolean;\n};\n\nexport type FireEngineScrapeRequestPlaywright = {\n    engine: \"playwright\";\n    blockAds?: boolean; // default: true\n\n    // mutually exclusive, default: false\n    screenshot?: boolean;\n    fullPageScreenshot?: boolean;\n\n    wait?: number; // default: 0\n};\n\nexport type FireEngineScrapeRequestTLSClient = {\n    engine: \"tlsclient\";\n    atsv?: boolean; // v0 only, default: false\n    disableJsDom?: boolean; // v0 only, default: false\n    // blockAds?: boolean; // default: true\n};\n\nconst schema = z.object({\n    jobId: z.string(),\n    processing: z.boolean(),\n});\n\nexport async function fireEngineScrape<Engine extends FireEngineScrapeRequestChromeCDP | FireEngineScrapeRequestPlaywright | FireEngineScrapeRequestTLSClient> (\n    logger: Logger,\n    request: FireEngineScrapeRequestCommon & Engine,\n): Promise<z.infer<typeof schema>> {\n    const fireEngineURL = process.env.FIRE_ENGINE_BETA_URL!;\n\n    // TODO: retries\n\n    const scrapeRequest = await Sentry.startSpan({\n        name: \"fire-engine: Scrape\",\n        attributes: {\n            url: request.url,\n        },\n    }, async span => {\n        return await robustFetch(\n            {\n                url: `${fireEngineURL}/scrape`,\n                method: \"POST\",\n                headers: {\n                    ...(Sentry.isInitialized() ? ({\n                        \"sentry-trace\": Sentry.spanToTraceHeader(span),\n                        \"baggage\": Sentry.spanToBaggageHeader(span),\n                    }) : {}),\n                },\n                body: request,\n                logger: logger.child({ method: \"fireEngineScrape/robustFetch\" }),\n                schema,\n                tryCount: 3,\n            }\n        );\n    });\n\n    return scrapeRequest;\n}"]}
{"version":3,"file":"checkStatus.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/fire-engine/checkStatus.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"winston\";\nimport * as Sentry from \"@sentry/node\";\nimport { z } from \"zod\";\n\nimport { robustFetch } from \"../../lib/fetch\";\nimport { EngineError, SiteError } from \"../../error\";\n\nconst successSchema = z.object({\n    jobId: z.string(),\n    state: z.literal(\"completed\"),\n    processing: z.literal(false),\n\n    // timeTaken: z.number(),\n    content: z.string(),\n    url: z.string().optional(),\n\n    pageStatusCode: z.number(),\n    pageError: z.string().optional(),\n\n    // TODO: this needs to be non-optional, might need fixes on f-e side to ensure reliability\n    responseHeaders: z.record(z.string(), z.string()).optional(),\n\n    // timeTakenCookie: z.number().optional(),\n    // timeTakenRequest: z.number().optional(),\n\n    // legacy: playwright only\n    screenshot: z.string().optional(),\n\n    // new: actions\n    screenshots: z.string().array().optional(),\n    actionContent: z.object({\n        url: z.string(),\n        html: z.string(),\n    }).array().optional(),\n})\n\nexport type FireEngineCheckStatusSuccess = z.infer<typeof successSchema>;\n\nconst processingSchema = z.object({\n    jobId: z.string(),\n    state: z.enum([\"delayed\", \"active\", \"waiting\", \"waiting-children\", \"unknown\", \"prioritized\"]),\n    processing: z.boolean(),\n});\n\nconst failedSchema = z.object({\n    jobId: z.string(),\n    state: z.literal(\"failed\"),\n    processing: z.literal(false),\n    error: z.string(),\n});\n\nexport class StillProcessingError extends Error {\n    constructor(jobId: string) {\n        super(\"Job is still under processing\", { cause: { jobId } })\n    }\n}\n\nexport async function fireEngineCheckStatus(logger: Logger, jobId: string): Promise<FireEngineCheckStatusSuccess> {\n    const fireEngineURL = process.env.FIRE_ENGINE_BETA_URL!;\n\n    const status = await Sentry.startSpan({\n        name: \"fire-engine: Check status\",\n        attributes: {\n            jobId,\n        }\n    }, async span => {\n        return await robustFetch(\n            {\n                url: `${fireEngineURL}/scrape/${jobId}`,\n                method: \"GET\",\n                logger: logger.child({ method: \"fireEngineCheckStatus/robustFetch\" }),\n                headers: {\n                    ...(Sentry.isInitialized() ? ({\n                        \"sentry-trace\": Sentry.spanToTraceHeader(span),\n                        \"baggage\": Sentry.spanToBaggageHeader(span),\n                    }) : {}),\n                },\n            }\n        )\n    });\n\n    const successParse = successSchema.safeParse(status);\n    const processingParse = processingSchema.safeParse(status);\n    const failedParse = failedSchema.safeParse(status);\n\n    if (successParse.success) {\n        logger.debug(\"Scrape succeeded!\", { jobId });\n        return successParse.data;\n    } else if (processingParse.success) {\n        throw new StillProcessingError(jobId);\n    } else if (failedParse.success) {\n        logger.debug(\"Scrape job failed\", { status, jobId });\n        if (typeof status.error === \"string\" && status.error.includes(\"Chrome error: \")) {\n            throw new SiteError(status.error.split(\"Chrome error: \")[1]);\n        } else {\n            throw new EngineError(\"Scrape job failed\", {\n                cause: {\n                    status, jobId\n                }\n            });\n        }\n    } else {\n        logger.debug(\"Check status returned response not matched by any schema\", { status, jobId });\n        throw new Error(\"Check status returned response not matched by any schema\", {\n            cause: {\n                status, jobId\n            }\n        });\n    }\n}\n"]}
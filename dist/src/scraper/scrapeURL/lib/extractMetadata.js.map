{"version":3,"file":"extractMetadata.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/lib/extractMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { load } from \"cheerio\";\nimport { Document } from \"../../../controllers/v1/types\";\nimport { Meta } from \"..\";\n\nexport function extractMetadata(meta: Meta, html: string): Document[\"metadata\"] {\n  let title: string | undefined = undefined;\n  let description: string | undefined = undefined;\n  let language: string | undefined = undefined;\n  let keywords: string | undefined = undefined;\n  let robots: string | undefined = undefined;\n  let ogTitle: string | undefined = undefined;\n  let ogDescription: string | undefined = undefined;\n  let ogUrl: string | undefined = undefined;\n  let ogImage: string | undefined = undefined;\n  let ogAudio: string | undefined = undefined;\n  let ogDeterminer: string | undefined = undefined;\n  let ogLocale: string | undefined = undefined;\n  let ogLocaleAlternate: string[] | undefined = undefined;\n  let ogSiteName: string | undefined = undefined;\n  let ogVideo: string | undefined = undefined;\n  let dcTermsCreated: string | undefined = undefined;\n  let dcDateCreated: string | undefined = undefined;\n  let dcDate: string | undefined = undefined;\n  let dcTermsType: string | undefined = undefined;\n  let dcType: string | undefined = undefined;\n  let dcTermsAudience: string | undefined = undefined;\n  let dcTermsSubject: string | undefined = undefined;\n  let dcSubject: string | undefined = undefined;\n  let dcDescription: string | undefined = undefined;\n  let dcTermsKeywords: string | undefined = undefined;\n  let modifiedTime: string | undefined = undefined;\n  let publishedTime: string | undefined = undefined;\n  let articleTag: string | undefined = undefined;\n  let articleSection: string | undefined = undefined;\n  const customMetadata: Record<string, string | string[]> = {};\n\n  const soup = load(html);\n\n  try {\n    title = soup(\"title\").text() || undefined;\n    description = soup('meta[name=\"description\"]').attr(\"content\") || undefined;\n    \n    // Assuming the language is part of the URL as per the regex pattern\n    language = soup('html').attr('lang') || undefined;\n\n    keywords = soup('meta[name=\"keywords\"]').attr(\"content\") || undefined;\n    robots = soup('meta[name=\"robots\"]').attr(\"content\") || undefined;\n    ogTitle = soup('meta[property=\"og:title\"]').attr(\"content\") || undefined;\n    ogDescription = soup('meta[property=\"og:description\"]').attr(\"content\") || undefined;\n    ogUrl = soup('meta[property=\"og:url\"]').attr(\"content\") || undefined;\n    ogImage = soup('meta[property=\"og:image\"]').attr(\"content\") || undefined;\n    ogAudio = soup('meta[property=\"og:audio\"]').attr(\"content\") || undefined;\n    ogDeterminer = soup('meta[property=\"og:determiner\"]').attr(\"content\") || undefined;\n    ogLocale = soup('meta[property=\"og:locale\"]').attr(\"content\") || undefined;\n    ogLocaleAlternate = soup('meta[property=\"og:locale:alternate\"]').map((i, el) => soup(el).attr(\"content\")).get() || undefined;\n    ogSiteName = soup('meta[property=\"og:site_name\"]').attr(\"content\") || undefined;\n    ogVideo = soup('meta[property=\"og:video\"]').attr(\"content\") || undefined;\n    articleSection = soup('meta[name=\"article:section\"]').attr(\"content\") || undefined;\n    articleTag = soup('meta[name=\"article:tag\"]').attr(\"content\") || undefined;\n    publishedTime = soup('meta[property=\"article:published_time\"]').attr(\"content\") || undefined;\n    modifiedTime = soup('meta[property=\"article:modified_time\"]').attr(\"content\") || undefined;\n    dcTermsKeywords = soup('meta[name=\"dcterms.keywords\"]').attr(\"content\") || undefined;\n    dcDescription = soup('meta[name=\"dc.description\"]').attr(\"content\") || undefined;\n    dcSubject = soup('meta[name=\"dc.subject\"]').attr(\"content\") || undefined;\n    dcTermsSubject = soup('meta[name=\"dcterms.subject\"]').attr(\"content\") || undefined;\n    dcTermsAudience = soup('meta[name=\"dcterms.audience\"]').attr(\"content\") || undefined;\n    dcType = soup('meta[name=\"dc.type\"]').attr(\"content\") || undefined;\n    dcTermsType = soup('meta[name=\"dcterms.type\"]').attr(\"content\") || undefined;\n    dcDate = soup('meta[name=\"dc.date\"]').attr(\"content\") || undefined;\n    dcDateCreated = soup('meta[name=\"dc.date.created\"]').attr(\"content\") || undefined;\n    dcTermsCreated = soup('meta[name=\"dcterms.created\"]').attr(\"content\") || undefined;\n\n    try {\n      // Extract all meta tags for custom metadata\n      soup(\"meta\").each((i, elem) => {\n        try {\n          const name = soup(elem).attr(\"name\") || soup(elem).attr(\"property\");\n          const content = soup(elem).attr(\"content\");\n\n          if (name && content) {\n            if (customMetadata[name] === undefined) {\n              customMetadata[name] = content;\n            } else if (Array.isArray(customMetadata[name])) {\n              (customMetadata[name] as string[]).push(content);\n            } else {\n              customMetadata[name] = [customMetadata[name] as string, content];\n            }\n          }\n        } catch (error) {\n          meta.logger.error(`Error extracting custom metadata (in)`, { error });\n        }\n      });\n    } catch (error) {\n      meta.logger.error(`Error extracting custom metadata`, { error });\n    }\n  } catch (error) {\n    meta.logger.error(`Error extracting metadata`, { error });\n  }\n\n  return {\n    title,\n    description,\n    language,\n    keywords,\n    robots,\n    ogTitle,\n    ogDescription,\n    ogUrl,\n    ogImage,\n    ogAudio,\n    ogDeterminer,\n    ogLocale,\n    ogLocaleAlternate,\n    ogSiteName,\n    ogVideo,\n    dcTermsCreated,\n    dcDateCreated,\n    dcDate,\n    dcTermsType,\n    dcType,\n    dcTermsAudience,\n    dcTermsSubject,\n    dcSubject,\n    dcDescription,\n    dcTermsKeywords,\n    modifiedTime,\n    publishedTime,\n    articleTag,\n    articleSection,\n    ...customMetadata,\n  };\n}\n"]}
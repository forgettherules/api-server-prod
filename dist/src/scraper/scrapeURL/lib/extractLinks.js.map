{"version":3,"file":"extractLinks.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/lib/extractLinks.ts"],"names":[],"mappings":";;;AAAA,iBAAiB;AACjB,qCAA+B;AAC/B,gDAA6C;AAE7C,SAAgB,YAAY,CAAC,IAAY,EAAE,OAAe;IACtD,MAAM,CAAC,GAAG,IAAA,cAAI,EAAC,IAAI,CAAC,CAAC;IACrB,MAAM,KAAK,GAAa,EAAE,CAAC;IAE3B,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;QACvB,MAAM,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,IAAI,EAAE,CAAC;YACP,IAAI,CAAC;gBACD,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC5D,0BAA0B;oBAC1B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrB,CAAC;qBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC9B,mDAAmD;oBACnD,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC5C,CAAC;qBAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBAC9D,yDAAyD;oBACzD,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC5C,CAAC;qBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBACpC,2BAA2B;oBAC3B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrB,CAAC;gBACD,sCAAsC;YAC1C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,eAAM,CAAC,KAAK,CAAC,qCAAqC,IAAI,eAAe,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC/F,CAAC;QACL,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+BAA+B;IAC/B,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/B,CAAC;AA9BD,oCA8BC","sourcesContent":["// TODO: refactor\nimport { load } from \"cheerio\";\nimport { logger } from \"../../../lib/logger\";\n\nexport function extractLinks(html: string, baseUrl: string): string[] {\n    const $ = load(html);\n    const links: string[] = [];\n  \n    $('a').each((_, element) => {\n        const href = $(element).attr('href');\n        if (href) {\n            try {\n                if (href.startsWith('http://') || href.startsWith('https://')) {\n                    // Absolute URL, add as is\n                    links.push(href);\n                } else if (href.startsWith('/')) {\n                    // Relative URL starting with '/', append to origin\n                    links.push(new URL(href, baseUrl).href);\n                } else if (!href.startsWith('#') && !href.startsWith('mailto:')) {\n                    // Relative URL not starting with '/', append to base URL\n                    links.push(new URL(href, baseUrl).href);\n                } else if (href.startsWith('mailto:')) {\n                    // mailto: links, add as is\n                    links.push(href);\n                }\n                // Fragment-only links (#) are ignored\n            } catch (error) {\n                logger.error(`Failed to construct URL for href: ${href} with base: ${baseUrl}`, { error });\n            }\n        }\n    });\n  \n    // Remove duplicates and return\n    return [...new Set(links)];\n}"]}
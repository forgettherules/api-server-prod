{"version":3,"file":"crawler.js","sourceRoot":"","sources":["../../../../src/scraper/WebScraper/crawler.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosError } from \"axios\";\nimport cheerio, { load } from \"cheerio\";\nimport { URL } from \"url\";\nimport { getLinksFromSitemap } from \"./sitemap\";\nimport robotsParser from \"robots-parser\";\nimport { getURLDepth } from \"./utils/maxDepthUtils\";\nimport { axiosTimeout } from \"../../../src/lib/timeout\";\nimport { logger } from \"../../../src/lib/logger\";\nimport https from \"https\";\nexport class WebCrawler {\n  private jobId: string;\n  private initialUrl: string;\n  private baseUrl: string;\n  private includes: string[];\n  private excludes: string[];\n  private maxCrawledLinks: number;\n  private maxCrawledDepth: number;\n  private visited: Set<string> = new Set();\n  private crawledUrls: Map<string, string> = new Map();\n  private limit: number;\n  private robotsTxtUrl: string;\n  public robots: any;\n  private generateImgAltText: boolean;\n  private allowBackwardCrawling: boolean;\n  private allowExternalContentLinks: boolean;\n  private allowSubdomains: boolean;\n  private ignoreRobotsTxt: boolean;\n\n  constructor({\n    jobId,\n    initialUrl,\n    baseUrl,\n    includes,\n    excludes,\n    maxCrawledLinks = 10000,\n    limit = 10000,\n    generateImgAltText = false,\n    maxCrawledDepth = 10,\n    allowBackwardCrawling = false,\n    allowExternalContentLinks = false,\n    allowSubdomains = false,\n    ignoreRobotsTxt = false,\n  }: {\n    jobId: string;\n    initialUrl: string;\n    baseUrl?: string;\n    includes?: string[];\n    excludes?: string[];\n    maxCrawledLinks?: number;\n    limit?: number;\n    generateImgAltText?: boolean;\n    maxCrawledDepth?: number;\n    allowBackwardCrawling?: boolean;\n    allowExternalContentLinks?: boolean;\n    allowSubdomains?: boolean;\n    ignoreRobotsTxt?: boolean;\n  }) {\n    this.jobId = jobId;\n    this.initialUrl = initialUrl;\n    this.baseUrl = baseUrl ?? new URL(initialUrl).origin;\n    this.includes = Array.isArray(includes) ? includes : [];\n    this.excludes = Array.isArray(excludes) ? excludes : [];\n    this.limit = limit;\n    this.robotsTxtUrl = `${this.baseUrl}/robots.txt`;\n    this.robots = robotsParser(this.robotsTxtUrl, \"\");\n    // Deprecated, use limit instead\n    this.maxCrawledLinks = maxCrawledLinks ?? limit;\n    this.maxCrawledDepth = maxCrawledDepth ?? 10;\n    this.generateImgAltText = generateImgAltText ?? false;\n    this.allowBackwardCrawling = allowBackwardCrawling ?? false;\n    this.allowExternalContentLinks = allowExternalContentLinks ?? false;\n    this.allowSubdomains = allowSubdomains ?? false;\n    this.ignoreRobotsTxt = ignoreRobotsTxt ?? false;\n  }\n\n  public filterLinks(sitemapLinks: string[], limit: number, maxDepth: number, fromMap: boolean = false): string[] {\n    // If the initial URL is a sitemap.xml, skip filtering\n    if (this.initialUrl.endsWith('sitemap.xml') && fromMap) {\n      return sitemapLinks.slice(0, limit);\n    }\n\n    return sitemapLinks\n      .filter((link) => {\n        let url: URL;\n        try {\n          url = new URL(link.trim(), this.baseUrl);\n        } catch (error) {\n          logger.debug(`Error processing link: ${link} | Error: ${error.message}`);\n          return false;\n        }\n        const path = url.pathname;\n        \n        const depth = getURLDepth(url.toString());\n\n        \n        // Check if the link exceeds the maximum depth allowed\n        if (depth > maxDepth) {\n          return false;\n        }\n\n        // Check if the link should be excluded\n        if (this.excludes.length > 0 && this.excludes[0] !== \"\") {\n          if (\n            this.excludes.some((excludePattern) =>\n              new RegExp(excludePattern).test(path)\n            )\n          ) {\n            return false;\n          }\n        }\n\n        // Check if the link matches the include patterns, if any are specified\n        if (this.includes.length > 0 && this.includes[0] !== \"\") {\n          if (!this.includes.some((includePattern) =>\n            new RegExp(includePattern).test(path)\n          )) {\n            return false;\n          }\n        }\n\n        // Normalize the initial URL and the link to account for www and non-www versions\n        const normalizedInitialUrl = new URL(this.initialUrl);\n        let normalizedLink;\n        try {\n          normalizedLink = new URL(link);\n        } catch (_) {\n          return false;\n        }\n        const initialHostname = normalizedInitialUrl.hostname.replace(/^www\\./, '');\n        const linkHostname = normalizedLink.hostname.replace(/^www\\./, '');\n\n        // Ensure the protocol and hostname match, and the path starts with the initial URL's path\n        // commented to able to handling external link on allowExternalContentLinks\n        // if (linkHostname !== initialHostname) {\n        //   return false;\n        // }\n\n        if (!this.allowBackwardCrawling) {\n          if (!normalizedLink.pathname.startsWith(normalizedInitialUrl.pathname)) {\n            return false;\n          }\n        }\n\n        const isAllowed = this.ignoreRobotsTxt ? true : (this.robots.isAllowed(link, \"FireCrawlAgent\") ?? true);\n        // Check if the link is disallowed by robots.txt\n        if (!isAllowed) {\n          logger.debug(`Link disallowed by robots.txt: ${link}`);\n          return false;\n        }\n\n        if (this.isFile(link)) {\n          return false;\n        }\n\n        return true;\n      })\n      .slice(0, limit);\n  }\n\n  public async getRobotsTxt(skipTlsVerification = false): Promise<string> {\n    let extraArgs = {};\n    if(skipTlsVerification) {\n      extraArgs[\"httpsAgent\"] = new https.Agent({\n        rejectUnauthorized: false\n      });\n    }\n    const response = await axios.get(this.robotsTxtUrl, { timeout: axiosTimeout, ...extraArgs });\n    return response.data;\n  }\n\n  public importRobotsTxt(txt: string) {\n    this.robots = robotsParser(this.robotsTxtUrl, txt);\n  }\n\n  public async tryGetSitemap(fromMap: boolean = false, onlySitemap: boolean = false): Promise<{ url: string; html: string; }[] | null> {\n    logger.debug(`Fetching sitemap links from ${this.initialUrl}`);\n    const sitemapLinks = await this.tryFetchSitemapLinks(this.initialUrl);\n    if(fromMap && onlySitemap) {\n      return sitemapLinks.map(link => ({ url: link, html: \"\" }));\n    }\n    if (sitemapLinks.length > 0) {\n      let filteredLinks = this.filterLinks(sitemapLinks, this.limit, this.maxCrawledDepth, fromMap);\n      return filteredLinks.map(link => ({ url: link, html: \"\" }));\n    }\n    return null;\n  }\n\n  public filterURL(href: string, url: string): string | null {\n    let fullUrl = href;\n    if (!href.startsWith(\"http\")) {\n      try {\n        fullUrl = new URL(href, url).toString();\n      } catch (_) {\n        return null;\n      }\n    }\n    let urlObj;\n    try {\n      urlObj = new URL(fullUrl);\n    } catch (_) {\n      return null;\n    }\n    const path = urlObj.pathname;\n\n    if (this.isInternalLink(fullUrl)) { // INTERNAL LINKS\n      if (this.isInternalLink(fullUrl) &&\n        this.noSections(fullUrl) &&\n        !this.matchesExcludes(path) &&\n        this.isRobotsAllowed(fullUrl, this.ignoreRobotsTxt)\n      ) {\n        return fullUrl;\n      }\n    } else { // EXTERNAL LINKS\n      if (\n        this.isInternalLink(url) &&\n        this.allowExternalContentLinks &&\n        !this.isSocialMediaOrEmail(fullUrl) &&\n        !this.matchesExcludes(fullUrl, true) &&\n        !this.isExternalMainPage(fullUrl)\n      ) {\n        return fullUrl;\n      }\n    }\n\n    if (this.allowSubdomains && !this.isSocialMediaOrEmail(fullUrl) && this.isSubdomain(fullUrl)) {\n      return fullUrl;\n    }\n\n    return null;\n  }\n\n  public extractLinksFromHTML(html: string, url: string) {\n    let links: string[] = [];\n\n    const $ = load(html);\n    $(\"a\").each((_, element) => {\n      let href = $(element).attr(\"href\");\n      if (href) {\n        if (href.match(/^https?:\\/[^\\/]/)) {\n          href = href.replace(/^https?:\\//, \"$&/\");\n        }\n        const u = this.filterURL(href, url);\n        if (u !== null) {\n          links.push(u);\n        }\n      }\n    });\n\n    // Extract links from iframes with inline src\n    $(\"iframe\").each((_, element) => {\n      const src = $(element).attr(\"src\");\n      if (src && src.startsWith(\"data:text/html\")) {\n        const iframeHtml = decodeURIComponent(src.split(\",\")[1]);\n        const iframeLinks = this.extractLinksFromHTML(iframeHtml, url);\n        links = links.concat(iframeLinks);\n      }\n    });\n\n    return links;\n  }\n\n  private isRobotsAllowed(url: string, ignoreRobotsTxt: boolean = false): boolean {\n    return (ignoreRobotsTxt ? true : (this.robots ? (this.robots.isAllowed(url, \"FireCrawlAgent\") ?? true) : true))\n  }\n\n  private matchesExcludes(url: string, onlyDomains: boolean = false): boolean {\n    return this.excludes.some((pattern) => {\n      if (onlyDomains)\n        return this.matchesExcludesExternalDomains(url);\n\n      return this.excludes.some((pattern) => new RegExp(pattern).test(url));\n    });\n  }\n\n  // supported formats: \"example.com/blog\", \"https://example.com\", \"blog.example.com\", \"example.com\"\n  private matchesExcludesExternalDomains(url: string) {\n    try {\n      const urlObj = new URL(url);\n      const hostname = urlObj.hostname;\n      const pathname = urlObj.pathname;\n\n      for (let domain of this.excludes) {\n        let domainObj = new URL('http://' + domain.replace(/^https?:\\/\\//, ''));\n        let domainHostname = domainObj.hostname;\n        let domainPathname = domainObj.pathname;\n\n        if (hostname === domainHostname || hostname.endsWith(`.${domainHostname}`)) {\n          if (pathname.startsWith(domainPathname)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private isExternalMainPage(url:string):boolean {\n    return !Boolean(url.split(\"/\").slice(3).filter(subArray => subArray.length > 0).length)\n  }\n\n  private noSections(link: string): boolean {\n    return !link.includes(\"#\");\n  }\n\n  private isInternalLink(link: string): boolean {\n    const urlObj = new URL(link, this.baseUrl);\n    const baseDomain = this.baseUrl.replace(/^https?:\\/\\//, \"\").replace(/^www\\./, \"\").trim();\n    const linkDomain = urlObj.hostname.replace(/^www\\./, \"\").trim();\n    \n    return linkDomain === baseDomain;\n  }\n\n  private isSubdomain(link: string): boolean {\n    return new URL(link, this.baseUrl).hostname.endsWith(\".\" + new URL(this.baseUrl).hostname.split(\".\").slice(-2).join(\".\"));\n  }\n\n  public isFile(url: string): boolean {\n    const fileExtensions = [\n      \".png\",\n      \".jpg\",\n      \".jpeg\",\n      \".gif\",\n      \".css\",\n      \".js\",\n      \".ico\",\n      \".svg\",\n      \".tiff\",\n      // \".pdf\", \n      \".zip\",\n      \".exe\",\n      \".dmg\",\n      \".mp4\",\n      \".mp3\",\n      \".pptx\",\n      // \".docx\",\n      \".xlsx\",\n      \".xml\",\n      \".avi\",\n      \".flv\",\n      \".woff\",\n      \".ttf\",\n      \".woff2\",\n      \".webp\",\n      \".inc\"\n    ];\n\n    try {\n      const urlWithoutQuery = url.split('?')[0].toLowerCase();\n      return fileExtensions.some((ext) => urlWithoutQuery.endsWith(ext));\n    } catch (error) {\n      logger.error(`Error processing URL in isFile: ${error}`);\n      return false;\n    }\n  }\n\n  private isSocialMediaOrEmail(url: string): boolean {\n    const socialMediaOrEmail = [\n      \"facebook.com\",\n      \"twitter.com\",\n      \"linkedin.com\",\n      \"instagram.com\",\n      \"pinterest.com\",\n      \"mailto:\",\n      \"github.com\",\n      \"calendly.com\",\n      \"discord.gg\",\n      \"discord.com\",\n    ];\n    return socialMediaOrEmail.some((ext) => url.includes(ext));\n  }\n\n  private async tryFetchSitemapLinks(url: string): Promise<string[]> {\n    const normalizeUrl = (url: string) => {\n      url = url.replace(/^https?:\\/\\//, \"\").replace(/^www\\./, \"\");\n      if (url.endsWith(\"/\")) {\n        url = url.slice(0, -1);\n      }\n      return url;\n    };\n\n\n    const sitemapUrl = url.endsWith(\".xml\")\n      ? url\n      : `${url}/sitemap.xml`;\n\n    let sitemapLinks: string[] = [];\n\n    try {\n      const response = await axios.get(sitemapUrl, { timeout: axiosTimeout });\n      if (response.status === 200) {\n        sitemapLinks = await getLinksFromSitemap({ sitemapUrl });\n      }\n    } catch (error) { \n      logger.debug(`Failed to fetch sitemap with axios from ${sitemapUrl}: ${error}`);\n      if (error instanceof AxiosError && error.response?.status === 404) {\n        // ignore 404\n      } else {\n        const response = await getLinksFromSitemap({ sitemapUrl, mode: 'fire-engine' });\n        if (response) {\n          sitemapLinks = response;\n        }\n      }\n    }\n\n    if (sitemapLinks.length === 0) {\n      const baseUrlSitemap = `${this.baseUrl}/sitemap.xml`;\n      try {\n        const response = await axios.get(baseUrlSitemap, { timeout: axiosTimeout });\n        if (response.status === 200) {\n          sitemapLinks = await getLinksFromSitemap({ sitemapUrl: baseUrlSitemap, mode: 'fire-engine' });\n        }\n      } catch (error) {\n        logger.debug(`Failed to fetch sitemap from ${baseUrlSitemap}: ${error}`);\n        if (error instanceof AxiosError && error.response?.status === 404) {\n          // ignore 404\n        } else {\n          sitemapLinks = await getLinksFromSitemap({ sitemapUrl: baseUrlSitemap, mode: 'fire-engine' });\n        }\n      }\n    }\n\n    const normalizedUrl = normalizeUrl(url);\n    const normalizedSitemapLinks = sitemapLinks.map(link => normalizeUrl(link));\n    // has to be greater than 0 to avoid adding the initial URL to the sitemap links, and preventing crawler to crawl\n    if (!normalizedSitemapLinks.includes(normalizedUrl) && sitemapLinks.length > 0) {\n      sitemapLinks.push(url);\n    }\n    return sitemapLinks;\n  }\n}\n"]}
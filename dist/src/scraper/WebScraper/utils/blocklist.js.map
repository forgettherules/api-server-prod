{"version":3,"file":"blocklist.js","sourceRoot":"","sources":["../../../../../src/scraper/WebScraper/utils/blocklist.ts"],"names":[],"mappings":";;;AAAA,gDAA6C;AAE7C,MAAM,oBAAoB,GAAG;IAC3B,cAAc;IACd,OAAO;IACP,aAAa;IACb,eAAe;IACf,cAAc;IACd,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,cAAc;IACd,YAAY;IACZ,cAAc;IACd,iBAAiB;IACjB,aAAa;IACb,cAAc;IACd,eAAe;IACf,aAAa;CACd,CAAC;AAEF,MAAM,eAAe,GAAG;IACtB,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,gBAAgB;IAChB,OAAO;IACP,MAAM;IACN,UAAU;IACV,SAAS;IACT,SAAS;IACT,OAAO;IACP,SAAS;IACT,MAAM;IACN,OAAO;IACP,YAAY;IACZ,KAAK;IACL,uBAAuB;IACvB,mBAAmB;IACnB,wBAAwB;IACxB,4BAA4B;CAC7B,CAAC;AAEF,SAAgB,YAAY,CAAC,GAAW;IACtC,MAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IAEvC,gEAAgE;IAChE,IAAI,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,MAAM,OAAO,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC;QAC5F,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9D,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC;QACzB,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE/C,uDAAuD;QACvD,MAAM,SAAS,GAAG,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACnD,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YACrF,OAAO,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IACnB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,uDAAuD;QACvD,eAAM,CAAC,KAAK,CAAC,oCAAoC,GAAG,EAAE,CAAC,CAAC;QACxD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AA5BD,oCA4BC","sourcesContent":["import { logger } from \"../../../lib/logger\";\n\nconst socialMediaBlocklist = [\n  'facebook.com',\n  'x.com',\n  'twitter.com',\n  'instagram.com',\n  'linkedin.com',\n  'snapchat.com',\n  'tiktok.com',\n  'reddit.com',\n  'tumblr.com',\n  'flickr.com',\n  'whatsapp.com',\n  'wechat.com',\n  'telegram.org',\n  'researchhub.com',\n  'youtube.com',\n  'corterix.com',\n  'southwest.com',\n  'ryanair.com'\n];\n\nconst allowedKeywords = [\n  'pulse',\n  'privacy',\n  'terms',\n  'policy',\n  'user-agreement',\n  'legal',\n  'help',\n  'policies',\n  'support',\n  'contact',\n  'about',\n  'careers',\n  'blog',\n  'press',\n  'conditions',\n  'tos',\n  '://library.tiktok.com',\n  '://ads.tiktok.com',\n  '://tiktok.com/business',\n  '://developers.facebook.com'\n];\n\nexport function isUrlBlocked(url: string): boolean {\n  const lowerCaseUrl = url.toLowerCase();\n\n  // Check if the URL contains any allowed keywords as whole words\n  if (allowedKeywords.some(keyword => new RegExp(`\\\\b${keyword}\\\\b`, 'i').test(lowerCaseUrl))) {\n    return false;\n  }\n\n  try {\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://' + url;\n    }\n    \n    const urlObj = new URL(url);\n    const hostname = urlObj.hostname.toLowerCase();\n\n    // Check if the URL matches any domain in the blocklist\n    const isBlocked = socialMediaBlocklist.some(domain => {\n      const domainPattern = new RegExp(`(^|\\\\.)${domain.replace('.', '\\\\.')}(\\\\.|$)`, 'i');\n      return domainPattern.test(hostname);\n    });\n\n    return isBlocked;\n  } catch (e) {\n    // If an error occurs (e.g., invalid URL), return false\n    logger.error(`Error parsing the following URL: ${url}`);\n    return false;\n  }\n}\n"]}
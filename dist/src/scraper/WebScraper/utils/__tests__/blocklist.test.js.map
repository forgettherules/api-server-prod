{"version":3,"file":"blocklist.test.js","sourceRoot":"","sources":["../../../../../../src/scraper/WebScraper/utils/__tests__/blocklist.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUrlBlocked } from '../blocklist';\n\ndescribe('Blocklist Functionality', () => {\n  describe('isUrlBlocked', () => {\n    test.each([\n      'https://facebook.com/fake-test',\n      'https://x.com/user-profile',\n      'https://twitter.com/home',\n      'https://instagram.com/explore',\n      'https://linkedin.com/in/johndoe',\n      'https://snapchat.com/add/johndoe',\n      'https://tiktok.com/@johndoe',\n      'https://reddit.com/r/funny',\n      'https://tumblr.com/dashboard',\n      'https://flickr.com/photos/johndoe',\n      'https://whatsapp.com/download',\n      'https://wechat.com/features',\n      'https://telegram.org/apps'\n    ])('should return true for blocklisted URL %s', (url) => {\n      expect(isUrlBlocked(url)).toBe(true);\n    });\n\n    test.each([\n      'https://facebook.com/policy',\n      'https://twitter.com/tos',\n      'https://instagram.com/about/legal/terms',\n      'https://linkedin.com/legal/privacy-policy',\n      'https://pinterest.com/about/privacy',\n      'https://snapchat.com/legal/terms',\n      'https://tiktok.com/legal/privacy-policy',\n      'https://reddit.com/policies',\n      'https://tumblr.com/policy/en/privacy',\n      'https://flickr.com/help/terms',\n      'https://whatsapp.com/legal',\n      'https://wechat.com/en/privacy-policy',\n      'https://telegram.org/tos'\n    ])('should return false for allowed URLs with keywords %s', (url) => {\n      expect(isUrlBlocked(url)).toBe(false);\n    });\n\n    test('should return false for non-blocklisted domain', () => {\n      const url = 'https://example.com';\n      expect(isUrlBlocked(url)).toBe(false);\n    });\n\n    test('should handle invalid URLs gracefully', () => {\n      const url = 'htp://invalid-url';\n      expect(isUrlBlocked(url)).toBe(false);\n    });\n  });\n\n  test.each([\n    'https://subdomain.facebook.com',\n    'https://facebook.com.someotherdomain.com',\n    'https://www.facebook.com/profile',\n    'https://api.twitter.com/info',\n    'https://instagram.com/accounts/login'\n  ])('should return true for URLs with blocklisted domains in subdomains or paths %s', (url) => {\n    expect(isUrlBlocked(url)).toBe(true);\n  });\n\n  test.each([\n    'https://example.com/facebook.com',\n    'https://example.com/redirect?url=https://twitter.com',\n    'https://facebook.com.policy.example.com'\n  ])('should return false for URLs where blocklisted domain is part of another domain or path %s', (url) => {\n    expect(isUrlBlocked(url)).toBe(false);\n  });\n\n  test.each([\n    'https://FACEBOOK.com',\n    'https://INSTAGRAM.com/@something'\n  ])('should handle case variations %s', (url) => {\n    expect(isUrlBlocked(url)).toBe(true);\n  });\n\n  test.each([\n    'https://facebook.com?redirect=https://example.com',\n    'https://twitter.com?query=something'\n  ])('should handle query parameters %s', (url) => {\n    expect(isUrlBlocked(url)).toBe(true);\n  });\n\n  test('should handle internationalized domain names', () => {\n    const url = 'https://xn--d1acpjx3f.xn--p1ai';\n    expect(isUrlBlocked(url)).toBe(false);\n  });\n});"]}
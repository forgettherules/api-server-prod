{"version":3,"file":"status.js","sourceRoot":"","sources":["../../../../src/controllers/v0/status.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oDAAiD;AACjD,8DAAsE;AACtE,iDAAyC;AACzC,qDAAuC;AAEhC,KAAK,UAAU,+BAA+B,CAAC,GAAY,EAAE,GAAa;IAC/E,IAAI,CAAC;QACH,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAQ,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAY,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEpD,8BAA8B;QAC9B,sDAAsD;QACtD,qEAAqE;QAErE,wBAAwB;QACxB,gCAAgC;QAChC,MAAM;QACN,IAAI;QAEJ,MAAM,IAAI,GAAG,CAAC,MAAM,IAAA,sBAAO,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QACjG,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACnE,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAElK,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAE5F,GAAG,CAAC,IAAI,CAAC;YACP,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,MAAM;YAC5E,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,IAAI,EAAE,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;YAC7C,YAAY,EAAE,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;SAC5E,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;AACH,CAAC;AApCD,0EAoCC","sourcesContent":["import { Request, Response } from \"express\";\nimport { logger } from \"../../../src/lib/logger\";\nimport { getCrawl, getCrawlJobs } from \"../../../src/lib/crawl-redis\";\nimport { getJobs } from \"./crawl-status\";\nimport * as Sentry from \"@sentry/node\";\n\nexport async function crawlJobStatusPreviewController(req: Request, res: Response) {\n  try {\n    const sc = await getCrawl(req.params.jobId);\n    if (!sc) {\n      return res.status(404).json({ error: \"Job not found\" });\n    }\n\n    const jobIDs = await getCrawlJobs(req.params.jobId);\n\n    // let data = job.returnvalue;\n    // if (process.env.USE_DB_AUTHENTICATION === \"true\") {\n    //   const supabaseData = await supabaseGetJobById(req.params.jobId);\n\n    //   if (supabaseData) {\n    //     data = supabaseData.docs;\n    //   }\n    // }\n\n    const jobs = (await getJobs(req.params.jobId, jobIDs)).sort((a, b) => a.timestamp - b.timestamp);\n    const jobStatuses = await Promise.all(jobs.map(x => x.getState()));\n    const jobStatus = sc.cancelled ? \"failed\" : jobStatuses.every(x => x === \"completed\") ? \"completed\" : jobStatuses.some(x => x === \"failed\") ? \"failed\" : \"active\";\n\n    const data = jobs.map(x => Array.isArray(x.returnvalue) ? x.returnvalue[0] : x.returnvalue);\n\n    res.json({\n      status: jobStatus,\n      current: jobStatuses.filter(x => x === \"completed\" || x === \"failed\").length,\n      total: jobs.length,\n      data: jobStatus === \"completed\" ? data : null,\n      partial_data: jobStatus === \"completed\" ? [] : data.filter(x => x !== null),\n    });\n  } catch (error) {\n    Sentry.captureException(error);\n    logger.error(error);\n    return res.status(500).json({ error: error.message });\n  }\n}\n"]}
{"version":3,"file":"crawl.js","sourceRoot":"","sources":["../../../../src/controllers/v0/crawl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport { checkTeamCredits } from \"../../../src/services/billing/credit_billing\";\nimport { authenticateUser } from \"../auth\";\nimport { RateLimiterMode } from \"../../../src/types\";\nimport { addScrapeJob } from \"../../../src/services/queue-jobs\";\nimport { isUrlBlocked } from \"../../../src/scraper/WebScraper/utils/blocklist\";\nimport { logCrawl } from \"../../../src/services/logging/crawl_log\";\nimport { validateIdempotencyKey } from \"../../../src/services/idempotency/validate\";\nimport { createIdempotencyKey } from \"../../../src/services/idempotency/create\";\nimport { defaultCrawlPageOptions, defaultCrawlerOptions, defaultOrigin } from \"../../../src/lib/default-values\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { logger } from \"../../../src/lib/logger\";\nimport { addCrawlJob, addCrawlJobs, crawlToCrawler, lockURL, lockURLs, saveCrawl, StoredCrawl } from \"../../../src/lib/crawl-redis\";\nimport { getScrapeQueue } from \"../../../src/services/queue-service\";\nimport { checkAndUpdateURL } from \"../../../src/lib/validateUrl\";\nimport * as Sentry from \"@sentry/node\";\nimport { getJobPriority } from \"../../lib/job-priority\";\nimport { fromLegacyScrapeOptions, url as urlSchema } from \"../v1/types\";\nimport { ZodError } from \"zod\";\n\nexport async function crawlController(req: Request, res: Response) {\n  try {\n    const auth = await authenticateUser(\n      req,\n      res,\n      RateLimiterMode.Crawl\n    );\n    if (!auth.success) {\n      return res.status(auth.status).json({ error: auth.error });\n    }\n\n    const { team_id, plan, chunk } = auth;\n\n    if (req.headers[\"x-idempotency-key\"]) {\n      const isIdempotencyValid = await validateIdempotencyKey(req);\n      if (!isIdempotencyValid) {\n        return res.status(409).json({ error: \"Idempotency key already used\" });\n      }\n      try {\n        createIdempotencyKey(req);\n      } catch (error) {\n        logger.error(error);\n        return res.status(500).json({ error: error.message });\n      }\n    }\n\n    const crawlerOptions = {\n      ...defaultCrawlerOptions,\n      ...req.body.crawlerOptions,\n    };\n    const pageOptions = { ...defaultCrawlPageOptions, ...req.body.pageOptions };\n\n    if (Array.isArray(crawlerOptions.includes)) {\n      for (const x of crawlerOptions.includes) {\n        try {\n          new RegExp(x);\n        } catch (e) {\n          return res.status(400).json({ error: e.message });\n        }\n      }\n    }\n\n    if (Array.isArray(crawlerOptions.excludes)) {\n      for (const x of crawlerOptions.excludes) {\n        try {\n          new RegExp(x);\n        } catch (e) {\n          return res.status(400).json({ error: e.message });\n        }\n      }\n    }\n\n    const limitCheck = req.body?.crawlerOptions?.limit ?? 1;\n    const { success: creditsCheckSuccess, message: creditsCheckMessage, remainingCredits } =\n      await checkTeamCredits(chunk, team_id, limitCheck);\n\n    if (!creditsCheckSuccess) {\n      return res.status(402).json({ error: \"Insufficient credits. You may be requesting with a higher limit than the amount of credits you have left. If not, upgrade your plan at https://firecrawl.dev/pricing or contact us at help@firecrawl.com\" });\n    }\n\n    // TODO: need to do this to v1\n    crawlerOptions.limit = Math.min(remainingCredits, crawlerOptions.limit);\n    \n    let url = urlSchema.parse(req.body.url);\n    if (!url) {\n      return res.status(400).json({ error: \"Url is required\" });\n    }\n    if (typeof url !== \"string\") {\n      return res.status(400).json({ error: \"URL must be a string\" });\n    }\n    try {\n      url = checkAndUpdateURL(url).url;\n    } catch (e) {\n      return res\n        .status(e instanceof Error && e.message === \"Invalid URL\" ? 400 : 500)\n        .json({ error: e.message ?? e });\n    }\n\n    if (isUrlBlocked(url)) {\n      return res.status(403).json({\n        error:\n          \"Firecrawl currently does not support social media scraping due to policy restrictions. We're actively working on building support for it.\",\n      });\n    }\n\n    // if (mode === \"single_urls\" && !url.includes(\",\")) { // NOTE: do we need this?\n    //   try {\n    //     const a = new WebScraperDataProvider();\n    //     await a.setOptions({\n    //       jobId: uuidv4(),\n    //       mode: \"single_urls\",\n    //       urls: [url],\n    //       crawlerOptions: { ...crawlerOptions, returnOnlyUrls: true },\n    //       pageOptions: pageOptions,\n    //     });\n\n    //     const docs = await a.getDocuments(false, (progress) => {\n    //       job.updateProgress({\n    //         current: progress.current,\n    //         total: progress.total,\n    //         current_step: \"SCRAPING\",\n    //         current_url: progress.currentDocumentUrl,\n    //       });\n    //     });\n    //     return res.json({\n    //       success: true,\n    //       documents: docs,\n    //     });\n    //   } catch (error) {\n    //     logger.error(error);\n    //     return res.status(500).json({ error: error.message });\n    //   }\n    // }\n\n    const id = uuidv4();\n\n    await logCrawl(id, team_id);\n\n    const { scrapeOptions, internalOptions } = fromLegacyScrapeOptions(pageOptions, undefined, undefined);\n\n    delete (scrapeOptions as any).timeout;\n\n    const sc: StoredCrawl = {\n      originUrl: url,\n      crawlerOptions,\n      scrapeOptions,\n      internalOptions,\n      team_id,\n      plan,\n      createdAt: Date.now(),\n    };\n\n    const crawler = crawlToCrawler(id, sc);\n\n    try {\n      sc.robots = await crawler.getRobotsTxt();\n    } catch (_) {}\n\n    await saveCrawl(id, sc);\n\n    const sitemap = sc.crawlerOptions?.ignoreSitemap\n      ? null\n      : await crawler.tryGetSitemap();\n\n\n    if (sitemap !== null && sitemap.length > 0) {\n      let jobPriority = 20;\n      // If it is over 1000, we need to get the job priority,\n      // otherwise we can use the default priority of 20\n      if(sitemap.length > 1000){\n        // set base to 21\n        jobPriority = await getJobPriority({plan, team_id, basePriority: 21})\n      }\n      const jobs = sitemap.map((x) => {\n        const url = x.url;\n        const uuid = uuidv4();\n        return {\n          name: uuid,\n          data: {\n            url,\n            mode: \"single_urls\",\n            crawlerOptions,\n            scrapeOptions,\n            internalOptions,\n            team_id,\n            plan,\n            origin: req.body.origin ?? defaultOrigin,\n            crawl_id: id,\n            sitemapped: true,\n          },\n          opts: {\n            jobId: uuid,\n            priority: jobPriority,\n          },\n        };\n      });\n\n      await lockURLs(\n        id,\n        sc,\n        jobs.map((x) => x.data.url)\n      );\n      await addCrawlJobs(\n        id,\n        jobs.map((x) => x.opts.jobId)\n      );\n      for (const job of jobs) {\n        // add with sentry instrumentation\n        await addScrapeJob(job.data as any, {}, job.opts.jobId);\n      }\n    } else {\n      await lockURL(id, sc, url);\n\n      // Not needed, first one should be 15.\n      // const jobPriority = await getJobPriority({plan, team_id, basePriority: 10})\n\n      const jobId = uuidv4();\n      await addScrapeJob(\n        {\n          url,\n          mode: \"single_urls\",\n          crawlerOptions,\n          scrapeOptions,\n          internalOptions,\n          team_id,\n          plan: plan!,\n          origin: req.body.origin ?? defaultOrigin,\n          crawl_id: id,\n        },\n        {\n          priority: 15, // prioritize request 0 of crawl jobs same as scrape jobs\n        },\n        jobId,\n      );\n      await addCrawlJob(id, jobId);\n    }\n\n    res.json({ jobId: id });\n  } catch (error) {\n    Sentry.captureException(error);\n    logger.error(error);\n    return res.status(500).json({ error: error instanceof ZodError\n      ? \"Invalid URL\"\n      : error.message });\n  }\n}\n"]}
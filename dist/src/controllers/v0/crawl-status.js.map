{"version":3,"file":"crawl-status.js","sourceRoot":"","sources":["../../../../src/controllers/v0/crawl-status.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport { authenticateUser } from \"../auth\";\nimport { RateLimiterMode } from \"../../../src/types\";\nimport { getScrapeQueue } from \"../../../src/services/queue-service\";\nimport { logger } from \"../../../src/lib/logger\";\nimport { getCrawl, getCrawlJobs } from \"../../../src/lib/crawl-redis\";\nimport { supabaseGetJobsByCrawlId } from \"../../../src/lib/supabase-jobs\";\nimport * as Sentry from \"@sentry/node\";\nimport { configDotenv } from \"dotenv\";\nimport { Job } from \"bullmq\";\nimport { toLegacyDocument } from \"../v1/types\";\nconfigDotenv();\n\nexport async function getJobs(crawlId: string, ids: string[]) {\n  const jobs = (await Promise.all(ids.map(x => getScrapeQueue().getJob(x)))).filter(x => x) as Job[];\n  \n  if (process.env.USE_DB_AUTHENTICATION === \"true\") {\n    const supabaseData = await supabaseGetJobsByCrawlId(crawlId);\n\n    supabaseData.forEach(x => {\n      const job = jobs.find(y => y.id === x.job_id);\n      if (job) {\n        job.returnvalue = x.docs;\n      }\n    })\n  }\n\n  jobs.forEach(job => {\n    job.returnvalue = Array.isArray(job.returnvalue) ? job.returnvalue[0] : job.returnvalue;\n  });\n\n  return jobs;\n}\n\nexport async function crawlStatusController(req: Request, res: Response) {\n  try {\n    const auth = await authenticateUser(\n      req,\n      res,\n      RateLimiterMode.CrawlStatus\n    );\n    if (!auth.success) {\n      return res.status(auth.status).json({ error: auth.error });\n    }\n\n    const { team_id } = auth;\n\n    const sc = await getCrawl(req.params.jobId);\n    if (!sc) {\n      return res.status(404).json({ error: \"Job not found\" });\n    }\n\n    if (sc.team_id !== team_id) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    let jobIDs = await getCrawlJobs(req.params.jobId);\n    let jobs = await getJobs(req.params.jobId, jobIDs);\n    let jobStatuses = await Promise.all(jobs.map(x => x.getState()));\n\n    // Combine jobs and jobStatuses into a single array of objects\n    let jobsWithStatuses = jobs.map((job, index) => ({\n      job,\n      status: jobStatuses[index]\n    }));\n\n    // Filter out failed jobs\n    jobsWithStatuses = jobsWithStatuses.filter(x => x.status !== \"failed\" && x.status !== \"unknown\");\n\n    // Sort jobs by timestamp\n    jobsWithStatuses.sort((a, b) => a.job.timestamp - b.job.timestamp);\n\n    // Extract sorted jobs and statuses\n    jobs = jobsWithStatuses.map(x => x.job);\n    jobStatuses = jobsWithStatuses.map(x => x.status);\n\n    const jobStatus = sc.cancelled ? \"failed\" : jobStatuses.every(x => x === \"completed\") ? \"completed\" : \"active\";\n\n    const data = jobs.filter(x => x.failedReason !== \"Concurreny limit hit\" && x.returnvalue !== null).map(x => Array.isArray(x.returnvalue) ? x.returnvalue[0] : x.returnvalue);\n\n    if (\n      jobs.length > 0 &&\n      jobs[0].data &&\n      jobs[0].data.pageOptions &&\n      !jobs[0].data.pageOptions.includeRawHtml\n    ) {\n      data.forEach(item => {\n        if (item) {\n          delete item.rawHtml;\n        }\n      });\n    }\n\n    res.json({\n      status: jobStatus,\n      current: jobStatuses.filter(x => x === \"completed\" || x === \"failed\").length,\n      total: jobs.length,\n      data: jobStatus === \"completed\" ? data.map(x => toLegacyDocument(x, sc.internalOptions)) : null,\n      partial_data: jobStatus === \"completed\" ? [] : data.filter(x => x !== null).map(x => toLegacyDocument(x, sc.internalOptions)),\n    });\n  } catch (error) {\n    Sentry.captureException(error);\n    logger.error(error);\n    return res.status(500).json({ error: error.message });\n  }\n}\n"]}
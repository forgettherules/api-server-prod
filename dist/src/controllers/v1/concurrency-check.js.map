{"version":3,"file":"concurrency-check.js","sourceRoot":"","sources":["../../../../src/controllers/v1/concurrency-check.ts"],"names":[],"mappings":";;;AAQA,gEAA+D;AAC/D,+CAA+C;AACxC,KAAK,UAAU,0BAA0B,CAC9C,GAAkE,EAClE,GAAuC;IAEvC,MAAM,qBAAqB,GAAG,sBAAsB,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IACxE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,gBAAgB,GAAG,MAAM,+BAAe,CAAC,aAAa,CAC1D,qBAAqB,EACrB,GAAG,EACH,QAAQ,CACT,CAAC;IACF,OAAO,GAAG;SACP,MAAM,CAAC,GAAG,CAAC;SACX,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;AACnE,CAAC;AAdD,gEAcC","sourcesContent":["import { authenticateUser } from \"../auth\";\nimport {\n  ConcurrencyCheckParams,\n  ConcurrencyCheckResponse,\n  RequestWithAuth,\n} from \"./types\";\nimport { RateLimiterMode } from \"../../types\";\nimport { Response } from \"express\";\nimport { redisConnection } from \"../../services/queue-service\";\n// Basically just middleware and error wrapping\nexport async function concurrencyCheckController(\n  req: RequestWithAuth<ConcurrencyCheckParams, undefined, undefined>,\n  res: Response<ConcurrencyCheckResponse>\n) {\n  const concurrencyLimiterKey = \"concurrency-limiter:\" + req.auth.team_id;\n  const now = Date.now();\n  const activeJobsOfTeam = await redisConnection.zrangebyscore(\n    concurrencyLimiterKey,\n    now,\n    Infinity\n  );\n  return res\n    .status(200)\n    .json({ success: true, concurrency: activeJobsOfTeam.length });\n}\n"]}
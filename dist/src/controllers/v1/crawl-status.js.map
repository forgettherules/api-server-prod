{"version":3,"file":"crawl-status.js","sourceRoot":"","sources":["../../../../src/controllers/v1/crawl-status.ts"],"names":[],"mappings":"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","sourcesContent":["import { Response } from \"express\";\nimport { CrawlStatusParams, CrawlStatusResponse, ErrorResponse, RequestWithAuth } from \"./types\";\nimport { getCrawl, getCrawlExpiry, getCrawlJobs, getDoneJobsOrdered, getDoneJobsOrderedLength, getThrottledJobs } from \"../../lib/crawl-redis\";\nimport { getScrapeQueue } from \"../../services/queue-service\";\nimport { supabaseGetJobById, supabaseGetJobsById } from \"../../lib/supabase-jobs\";\nimport { configDotenv } from \"dotenv\";\nimport { Job, JobState } from \"bullmq\";\nconfigDotenv();\n\nexport async function getJob(id: string) {\n  const job = await getScrapeQueue().getJob(id);\n  if (!job) return job;\n  \n  if (process.env.USE_DB_AUTHENTICATION === \"true\") {\n    const supabaseData = await supabaseGetJobById(id);\n\n    if (supabaseData) {\n      job.returnvalue = supabaseData.docs;\n    }\n  }\n\n  job.returnvalue = Array.isArray(job.returnvalue) ? job.returnvalue[0] : job.returnvalue;\n\n  return job;\n}\n\nexport async function getJobs(ids: string[]) {\n  const jobs: (Job & { id: string })[] = (await Promise.all(ids.map(x => getScrapeQueue().getJob(x)))).filter(x => x) as (Job & {id: string})[];\n  \n  if (process.env.USE_DB_AUTHENTICATION === \"true\") {\n    const supabaseData = await supabaseGetJobsById(ids);\n\n    supabaseData.forEach(x => {\n      const job = jobs.find(y => y.id === x.job_id);\n      if (job) {\n        job.returnvalue = x.docs;\n      }\n    })\n  }\n\n  jobs.forEach(job => {\n    job.returnvalue = Array.isArray(job.returnvalue) ? job.returnvalue[0] : job.returnvalue;\n  });\n\n  return jobs;\n}\n\nexport async function crawlStatusController(req: RequestWithAuth<CrawlStatusParams, undefined, CrawlStatusResponse>, res: Response<CrawlStatusResponse>, isBatch = false) {\n  const sc = await getCrawl(req.params.jobId);\n  if (!sc) {\n    return res.status(404).json({ success: false, error: \"Job not found\" });\n  }\n\n  if (sc.team_id !== req.auth.team_id) {\n    return res.status(403).json({ success: false, error: \"Forbidden\" });\n  }\n\n  const start = typeof req.query.skip === \"string\" ? parseInt(req.query.skip, 10) : 0;\n  const end = typeof req.query.limit === \"string\" ? (start + parseInt(req.query.limit, 10) - 1) : undefined;\n\n  let jobIDs = await getCrawlJobs(req.params.jobId);\n  let jobStatuses = await Promise.all(jobIDs.map(async x => [x, await getScrapeQueue().getJobState(x)] as const));\n  const throttledJobs = new Set(...await getThrottledJobs(req.auth.team_id));\n\n  const throttledJobsSet = new Set(throttledJobs);\n\n  const validJobStatuses: [string, JobState | \"unknown\"][] = [];\n  const validJobIDs: string[] = [];\n\n  for (const [id, status] of jobStatuses) {\n    if (!throttledJobsSet.has(id) && status !== \"failed\" && status !== \"unknown\") {\n      validJobStatuses.push([id, status]);\n      validJobIDs.push(id);\n    }\n  }\n\n  const status: Exclude<CrawlStatusResponse, ErrorResponse>[\"status\"] = sc.cancelled ? \"cancelled\" : validJobStatuses.every(x => x[1] === \"completed\") ? \"completed\" : \"scraping\";\n\n  // Use validJobIDs instead of jobIDs for further processing\n  jobIDs = validJobIDs;\n\n  const doneJobsLength = await getDoneJobsOrderedLength(req.params.jobId);\n  const doneJobsOrder = await getDoneJobsOrdered(req.params.jobId, start, end ?? -1);\n\n  let doneJobs: Job[] = [];\n\n  if (end === undefined) { // determine 10 megabyte limit\n    let bytes = 0;\n    const bytesLimit = 10485760; // 10 MiB in bytes\n    const factor = 100; // chunking for faster retrieval\n\n    for (let i = 0; i < doneJobsOrder.length && bytes < bytesLimit; i += factor) {\n      // get current chunk and retrieve jobs\n      const currentIDs = doneJobsOrder.slice(i, i+factor);\n      const jobs = await getJobs(currentIDs);\n\n      // iterate through jobs and add them one them one to the byte counter\n      // both loops will break once we cross the byte counter\n      for (let ii = 0; ii < jobs.length && bytes < bytesLimit; ii++) {\n        const job = jobs[ii];\n        doneJobs.push(job);\n        bytes += JSON.stringify(job.returnvalue).length;\n      }\n    }\n\n    // if we ran over the bytes limit, remove the last document, except if it's the only document\n    if (bytes > bytesLimit && doneJobs.length !== 1) {\n      doneJobs.splice(doneJobs.length - 1, 1);\n    }\n  } else {\n    doneJobs = await getJobs(doneJobsOrder);\n  }\n\n  const data = doneJobs.map(x => x.returnvalue);\n\n  const protocol = process.env.ENV === \"local\" ? req.protocol : \"https\";\n  const nextURL = new URL(`${protocol}://${req.get(\"host\")}/v1/${isBatch ? \"batch/scrape\" : \"crawl\"}/${req.params.jobId}`);\n\n  nextURL.searchParams.set(\"skip\", (start + data.length).toString());\n\n  if (typeof req.query.limit === \"string\") {\n    nextURL.searchParams.set(\"limit\", req.query.limit);\n  }\n\n  if (data.length > 0) {\n    if (!doneJobs[0].data.scrapeOptions.formats.includes(\"rawHtml\")) {\n      for (let ii = 0; ii < doneJobs.length; ii++) {\n        if (data[ii]) {\n          delete data[ii].rawHtml;\n        }\n      }\n    }\n  }\n\n  res.status(200).json({\n    success: true,\n    status,\n    completed: doneJobsLength,\n    total: jobIDs.length,\n    creditsUsed: jobIDs.length,\n    expiresAt: (await getCrawlExpiry(req.params.jobId)).toISOString(),\n    next:\n      status !== \"scraping\" && (start + data.length) === doneJobsLength // if there's not gonna be any documents after this\n        ? undefined\n        : nextURL.href,\n    data: data,\n  });\n}\n\n"]}
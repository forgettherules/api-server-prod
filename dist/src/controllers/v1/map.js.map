{"version":3,"file":"map.js","sourceRoot":"","sources":["../../../../src/controllers/v1/map.ts"],"names":[],"mappings":"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","sourcesContent":["import { Response } from \"express\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { MapDocument, mapRequestSchema, RequestWithAuth, scrapeOptions } from \"./types\";\nimport { crawlToCrawler, StoredCrawl } from \"../../lib/crawl-redis\";\nimport { MapResponse, MapRequest } from \"./types\";\nimport { configDotenv } from \"dotenv\";\nimport {\n  checkAndUpdateURLForMap,\n  isSameDomain,\n  isSameSubdomain,\n  removeDuplicateUrls,\n} from \"../../lib/validateUrl\";\nimport { fireEngineMap } from \"../../search/fireEngine\";\nimport { billTeam } from \"../../services/billing/credit_billing\";\nimport { logJob } from \"../../services/logging/log_job\";\nimport { performCosineSimilarity } from \"../../lib/map-cosine\";\nimport { logger } from \"../../lib/logger\";\nimport Redis from \"ioredis\";\n\nconfigDotenv();\nconst redis = new Redis(process.env.REDIS_URL!);\n\n// Max Links that /map can return\nconst MAX_MAP_LIMIT = 5000;\n// Max Links that \"Smart /map\" can return\nconst MAX_FIRE_ENGINE_RESULTS = 1000;\n\ninterface MapResult {\n  success: boolean;\n  links: string[] | any[];\n  scrape_id?: string;\n  job_id: string;\n  time_taken: number;\n}\n\nexport async function getMapResults({\n  url,\n  search,\n  limit = MAX_MAP_LIMIT,\n  ignoreSitemap = false,\n  includeSubdomains = true,\n  crawlerOptions = {},\n  teamId,\n  plan,\n  origin,\n  includeMetadata = false,\n  allowExternalLinks\n}: {\n  url: string;\n  search?: string;\n  limit?: number;\n  ignoreSitemap?: boolean;\n  includeSubdomains?: boolean;\n  crawlerOptions?: any;\n  teamId: string;\n  plan?: string;\n  origin?: string;\n  includeMetadata?: boolean;\n  allowExternalLinks?: boolean;\n}): Promise<MapResult> {\n  const id = uuidv4();\n  let links: string[] = [url];\n  let mapResults: MapDocument[] = [];\n\n  const sc: StoredCrawl = {\n    originUrl: url,\n    crawlerOptions: {\n      ...crawlerOptions,\n      limit: crawlerOptions.sitemapOnly ? 10000000 : limit,\n      scrapeOptions: undefined,\n    },\n    scrapeOptions: scrapeOptions.parse({}),\n    internalOptions: {},\n    team_id: teamId,\n    createdAt: Date.now(),\n    plan: plan,\n  };\n\n  const crawler = crawlToCrawler(id, sc);\n\n  // If sitemapOnly is true, only get links from sitemap\n  if (crawlerOptions.sitemapOnly) {\n    const sitemap = await crawler.tryGetSitemap(true, true);\n    if (sitemap !== null) {\n      sitemap.forEach((x) => {\n        links.push(x.url);\n      });\n      links = links.slice(1)\n        .map((x) => {\n          try {\n            return checkAndUpdateURLForMap(x).url.trim();\n          } catch (_) {\n            return null;\n          }\n        })\n        .filter((x) => x !== null) as string[];\n      // links = links.slice(1, limit); // don't slice, unnecessary\n    }\n  } else {\n    let urlWithoutWww = url.replace(\"www.\", \"\");\n\n    let mapUrl = search && allowExternalLinks\n      ? `${search} ${urlWithoutWww}`\n      : search ? `${search} site:${urlWithoutWww}`\n      : `site:${url}`;\n\n    const resultsPerPage = 100;\n    const maxPages = Math.ceil(Math.min(MAX_FIRE_ENGINE_RESULTS, limit) / resultsPerPage);\n\n    const cacheKey = `fireEngineMap:${mapUrl}`;\n    const cachedResult = await redis.get(cacheKey);\n\n    let allResults: any[] = [];\n    let pagePromises: Promise<any>[] = [];\n\n    if (cachedResult) {\n      allResults = JSON.parse(cachedResult);\n    } else {\n      const fetchPage = async (page: number) => {\n        return fireEngineMap(mapUrl, {\n          numResults: resultsPerPage,\n          page: page,\n        });\n      };\n\n      pagePromises = Array.from({ length: maxPages }, (_, i) =>\n        fetchPage(i + 1)\n      );\n      allResults = await Promise.all(pagePromises);\n\n      await redis.set(cacheKey, JSON.stringify(allResults), \"EX\", 24 * 60 * 60); // Cache for 24 hours\n    }\n\n    // Parallelize sitemap fetch with serper search\n    const [sitemap, ...searchResults] = await Promise.all([\n      ignoreSitemap ? null : crawler.tryGetSitemap(true),\n      ...(cachedResult ? [] : pagePromises),\n    ]);\n\n    if (!cachedResult) {\n      allResults = searchResults;\n    }\n\n    if (sitemap !== null) {\n      sitemap.forEach((x) => {\n        links.push(x.url);\n      });\n    }\n\n    mapResults = allResults\n      .flat()\n      .filter((result) => result !== null && result !== undefined);\n\n    const minumumCutoff = Math.min(MAX_MAP_LIMIT, limit);\n    if (mapResults.length > minumumCutoff) {\n      mapResults = mapResults.slice(0, minumumCutoff);\n    }\n\n    if (mapResults.length > 0) {\n      if (search) {\n        // Ensure all map results are first, maintaining their order\n        links = [\n          mapResults[0].url,\n          ...mapResults.slice(1).map((x) => x.url),\n          ...links,\n        ];\n      } else {\n        mapResults.map((x) => {\n          links.push(x.url);\n        });\n      }\n    }\n\n    // Perform cosine similarity between the search query and the list of links\n    if (search) {\n      const searchQuery = search.toLowerCase();\n      links = performCosineSimilarity(links, searchQuery);\n    }\n\n    links = links\n      .map((x) => {\n        try {\n          return checkAndUpdateURLForMap(x).url.trim();\n        } catch (_) {\n          return null;\n        }\n      })\n      .filter((x) => x !== null) as string[];\n\n    // allows for subdomains to be included\n    links = links.filter((x) => isSameDomain(x, url));\n\n    // if includeSubdomains is false, filter out subdomains\n    if (!includeSubdomains) {\n      links = links.filter((x) => isSameSubdomain(x, url));\n    }\n\n    // remove duplicates that could be due to http/https or www\n    links = removeDuplicateUrls(links);\n  }\n\n  const linksToReturn = crawlerOptions.sitemapOnly ? links : links.slice(0, limit);\n\n  return {\n    success: true,\n    links: includeMetadata ? mapResults : linksToReturn,\n    scrape_id: origin?.includes(\"website\") ? id : undefined,\n    job_id: id,\n    time_taken: (new Date().getTime() - Date.now()) / 1000,\n  };\n}\n\nexport async function mapController(\n  req: RequestWithAuth<{}, MapResponse, MapRequest>,\n  res: Response<MapResponse>\n) {\n  req.body = mapRequestSchema.parse(req.body);\n\n  const result = await getMapResults({\n    url: req.body.url,\n    search: req.body.search,\n    limit: req.body.limit,\n    ignoreSitemap: req.body.ignoreSitemap,\n    includeSubdomains: req.body.includeSubdomains,\n    crawlerOptions: req.body,\n    origin: req.body.origin,\n    teamId: req.auth.team_id,\n    plan: req.auth.plan,\n  });\n\n  // Bill the team\n  billTeam(req.auth.team_id, req.acuc?.sub_id, 1).catch((error) => {\n    logger.error(\n      `Failed to bill team ${req.auth.team_id} for 1 credit: ${error}`\n    );\n  });\n\n  // Log the job\n  logJob({\n    job_id: result.job_id,\n    success: result.links.length > 0,\n    message: \"Map completed\",\n    num_docs: result.links.length,\n    docs: result.links,\n    time_taken: result.time_taken,\n    team_id: req.auth.team_id,\n    mode: \"map\", \n    url: req.body.url,\n    crawlerOptions: {},\n    scrapeOptions: {},\n    origin: req.body.origin ?? \"api\",\n    num_tokens: 0,\n  });\n\n  const response = {\n    success: true as const,\n    links: result.links,\n    scrape_id: result.scrape_id\n  };\n\n  return res.status(200).json(response);\n}"]}
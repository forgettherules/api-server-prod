{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../src/controllers/v1/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport {\n  // Document,\n  RequestWithAuth,\n  ExtractRequest,\n  extractRequestSchema,\n  ExtractResponse,\n  MapDocument,\n  scrapeOptions,\n} from \"./types\";\nimport { Document } from \"../../lib/entities\";\nimport Redis from \"ioredis\";\nimport { configDotenv } from \"dotenv\";\nimport { performRanking } from \"../../lib/ranker\";\nimport { billTeam } from \"../../services/billing/credit_billing\";\nimport { logJob } from \"../../services/logging/log_job\";\nimport { logger } from \"../../lib/logger\";\nimport { getScrapeQueue } from \"../../services/queue-service\";\nimport { waitForJob } from \"../../services/queue-jobs\";\nimport { addScrapeJob } from \"../../services/queue-jobs\";\nimport { PlanType } from \"../../types\";\nimport { getJobPriority } from \"../../lib/job-priority\";\nimport { generateOpenAICompletions } from \"../../scraper/scrapeURL/transformers/llmExtract\";\nimport { isUrlBlocked } from \"../../scraper/WebScraper/utils/blocklist\";\nimport { getMapResults } from \"./map\";\nimport { buildDocument } from \"../../lib/extract/build-document\";\n\nconfigDotenv();\nconst redis = new Redis(process.env.REDIS_URL!);\n\nconst MAX_EXTRACT_LIMIT = 100;\nconst MAX_RANKING_LIMIT = 10;\nconst INITIAL_SCORE_THRESHOLD = 0.75;\nconst FALLBACK_SCORE_THRESHOLD = 0.5;\nconst MIN_REQUIRED_LINKS = 1;\n\n/**\n * Extracts data from the provided URLs based on the request parameters.\n * Currently in beta.\n * @param req - The request object containing authentication and extraction details.\n * @param res - The response object to send the extraction results.\n * @returns A promise that resolves when the extraction process is complete.\n */\nexport async function extractController(\n  req: RequestWithAuth<{}, ExtractResponse, ExtractRequest>,\n  res: Response<ExtractResponse>\n) {\n  const selfHosted = process.env.USE_DB_AUTHENTICATION !== \"true\";\n  \n  req.body = extractRequestSchema.parse(req.body);\n\n  const id = crypto.randomUUID();\n  let links: string[] = [];\n  let docs: Document[] = [];\n  const earlyReturn = false;\n\n  // Process all URLs in parallel\n  const urlPromises = req.body.urls.map(async (url) => {\n    if (url.includes('/*') || req.body.allowExternalLinks) {\n      // Handle glob pattern URLs\n      const baseUrl = url.replace('/*', '');\n      // const pathPrefix = baseUrl.split('/').slice(3).join('/'); // Get path after domain if any\n\n      const allowExternalLinks = req.body.allowExternalLinks ?? true;\n      let urlWithoutWww = baseUrl.replace(\"www.\", \"\");\n      let mapUrl = req.body.prompt && allowExternalLinks\n        ? `${req.body.prompt} ${urlWithoutWww}`\n        : req.body.prompt ? `${req.body.prompt} site:${urlWithoutWww}`\n        : `site:${urlWithoutWww}`;\n\n      const mapResults = await getMapResults({\n        url: baseUrl,\n        search: req.body.prompt,\n        teamId: req.auth.team_id,\n        plan: req.auth.plan,\n        allowExternalLinks,\n        origin: req.body.origin,\n        limit: req.body.limit,\n        // If we're self-hosted, we don't want to ignore the sitemap, due to our fire-engine mapping\n        ignoreSitemap: !selfHosted ? true : false,\n        includeMetadata: true,\n        includeSubdomains: req.body.includeSubdomains,\n      });\n\n      let mappedLinks = mapResults.links as MapDocument[];\n      // Limit number of links to MAX_EXTRACT_LIMIT\n      mappedLinks = mappedLinks.slice(0, MAX_EXTRACT_LIMIT);\n\n      let mappedLinksRerank = mappedLinks.map(x => `url: ${x.url}, title: ${x.title}, description: ${x.description}`);\n      \n      // Filter by path prefix if present\n      // wrong\n      // if (pathPrefix) {\n      //   mappedLinks = mappedLinks.filter(x => x.url && x.url.includes(`/${pathPrefix}/`));\n      // }\n\n      if (req.body.prompt) {\n        // Get similarity scores between the search query and each link's context\n        const linksAndScores = await performRanking(mappedLinksRerank, mappedLinks.map(l => l.url), mapUrl);\n        \n        // First try with high threshold\n        let filteredLinks = filterAndProcessLinks(mappedLinks, linksAndScores, INITIAL_SCORE_THRESHOLD);\n        \n        // If we don't have enough high-quality links, try with lower threshold\n        if (filteredLinks.length < MIN_REQUIRED_LINKS) {\n          logger.info(`Only found ${filteredLinks.length} links with score > ${INITIAL_SCORE_THRESHOLD}. Trying lower threshold...`);\n          filteredLinks = filterAndProcessLinks(mappedLinks, linksAndScores, FALLBACK_SCORE_THRESHOLD);\n          \n          if (filteredLinks.length === 0) {\n            // If still no results, take top N results regardless of score\n            logger.warn(`No links found with score > ${FALLBACK_SCORE_THRESHOLD}. Taking top ${MIN_REQUIRED_LINKS} results.`);\n            filteredLinks = linksAndScores\n              .sort((a, b) => b.score - a.score)\n              .slice(0, MIN_REQUIRED_LINKS)\n              .map(x => mappedLinks.find(link => link.url === x.link))\n              .filter((x): x is MapDocument => x !== undefined && x.url !== undefined && !isUrlBlocked(x.url));\n          }\n        }\n\n        mappedLinks = filteredLinks.slice(0, MAX_RANKING_LIMIT);\n      }\n\n      return mappedLinks.map(x => x.url) as string[];\n\n    } else {\n      // Handle direct URLs without glob pattern\n      if (!isUrlBlocked(url)) {\n        return [url];\n      }\n      return [];\n    }\n  });\n\n  // Wait for all URL processing to complete and flatten results\n  const processedUrls = await Promise.all(urlPromises);\n  links.push(...processedUrls.flat());\n\n  if (links.length === 0) {\n    return res.status(400).json({\n      success: false,\n      error: \"No valid URLs found to scrape. Try adjusting your search criteria or including more URLs.\"\n    });\n  }\n\n  // Scrape all links in parallel with retries\n  const scrapePromises = links.map(async (url) => {\n    const origin = req.body.origin || \"api\";\n    const timeout = Math.floor((req.body.timeout || 40000) * 0.7) || 30000; // Use 70% of total timeout for individual scrapes\n    const jobId = crypto.randomUUID();\n\n    const jobPriority = await getJobPriority({\n      plan: req.auth.plan as PlanType,\n      team_id: req.auth.team_id,\n      basePriority: 10,\n    });\n\n    await addScrapeJob(\n      {\n        url,\n        mode: \"single_urls\", \n        team_id: req.auth.team_id,\n        scrapeOptions: scrapeOptions.parse({}),\n        internalOptions: {},\n        plan: req.auth.plan!,\n        origin,\n        is_scrape: true,\n      },\n      {},\n      jobId,\n      jobPriority\n    );\n\n    try {\n      const doc = await waitForJob<Document>(jobId, timeout);\n      await getScrapeQueue().remove(jobId);\n      if (earlyReturn) {\n        return null;\n      }\n      return doc;\n    } catch (e) {\n      logger.error(`Error in scrapeController: ${e}`);\n      if (e instanceof Error && (e.message.startsWith(\"Job wait\") || e.message === \"timeout\")) {\n        throw {\n          status: 408,\n          error: \"Request timed out\"\n        };\n      } else {\n        throw {\n          status: 500,\n          error: `(Internal server error) - ${(e && e.message) ? e.message : e}`\n        };\n      }\n    }\n  });\n\n  try {\n    const results = await Promise.all(scrapePromises);\n    docs.push(...results.filter(doc => doc !== null).map(x => x!));\n  } catch (e) {\n    return res.status(e.status).json({\n      success: false,\n      error: e.error\n    });\n  }\n\n  const completions = await generateOpenAICompletions(\n    logger.child({ method: \"extractController/generateOpenAICompletions\" }),\n    {\n      mode: \"llm\",\n      systemPrompt: \"Always prioritize using the provided content to answer the question. Do not make up an answer. Be concise and follow the schema if provided.\",\n      prompt: req.body.prompt,\n      schema: req.body.schema,\n    },\n    docs.map(x => buildDocument(x)).join('\\n'),\n    undefined,\n    true // isExtractEndpoint\n  );\n\n  // TODO: change this later\n  // While on beta, we're billing 5 credits per link discovered/scraped.\n  billTeam(req.auth.team_id, req.acuc?.sub_id, links.length * 5).catch(error => {\n    logger.error(`Failed to bill team ${req.auth.team_id} for ${links.length * 5} credits: ${error}`);\n  });\n\n  let data = completions.extract ?? {};\n  let warning = completions.warning;\n\n  logJob({\n    job_id: id,\n    success: true,\n    message: \"Extract completed\",\n    num_docs: 1,\n    docs: data,\n    time_taken: (new Date().getTime() - Date.now()) / 1000,\n    team_id: req.auth.team_id,\n    mode: \"extract\",\n    url: req.body.urls.join(\", \"),\n    scrapeOptions: req.body,\n    origin: req.body.origin ?? \"api\",\n    num_tokens: completions.numTokens ?? 0\n  });\n\n  return res.status(200).json({\n    success: true,\n    data: data,\n    scrape_id: id,\n    warning: warning\n  });\n}\n\n/**\n * Filters links based on their similarity score to the search query.\n * @param mappedLinks - The list of mapped links to filter.\n * @param linksAndScores - The list of links and their similarity scores.\n * @param threshold - The score threshold to filter by.\n * @returns The filtered list of links.\n */\nfunction filterAndProcessLinks(\n  mappedLinks: MapDocument[], \n  linksAndScores: { link: string, linkWithContext: string, score: number, originalIndex: number }[],\n  threshold: number\n): MapDocument[] {\n  return linksAndScores\n    .filter(x => x.score > threshold)\n    .map(x => mappedLinks.find(link => link.url === x.link))\n    .filter((x): x is MapDocument => x !== undefined && x.url !== undefined && !isUrlBlocked(x.url));\n}"]}
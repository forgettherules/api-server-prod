{"version":3,"file":"urlValidation.test.js","sourceRoot":"","sources":["../../../../../src/controllers/v1/__tests__/urlValidation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { url } from \"../types\";\n\ndescribe(\"URL Schema Validation\", () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it(\"should prepend http:// to URLs without a protocol\", () => {\n    const result = url.parse(\"example.com\");\n    expect(result).toBe(\"http://example.com\");\n  });\n\n  it(\"should allow valid URLs with http or https\", () => {\n    expect(() => url.parse(\"http://example.com\")).not.toThrow();\n    expect(() => url.parse(\"https://example.com\")).not.toThrow();\n  });\n\n  it(\"should allow valid URLs with http or https\", () => {\n    expect(() => url.parse(\"example.com\")).not.toThrow();\n  });\n\n  it(\"should reject URLs with unsupported protocols\", () => {\n    expect(() => url.parse(\"ftp://example.com\")).toThrow(\"Invalid URL\");\n  });\n\n  it(\"should reject URLs without a valid top-level domain\", () => {\n    expect(() => url.parse(\"http://example\")).toThrow(\"URL must have a valid top-level domain or be a valid path\");\n  });\n\n  it(\"should reject blocked URLs\", () => {\n    expect(() => url.parse(\"https://facebook.com\")).toThrow(\"Firecrawl currently does not support social media scraping due to policy restrictions. We're actively working on building support for it.\");\n  });\n\n  it(\"should handle URLs with subdomains correctly\", () => {\n    expect(() => url.parse(\"http://sub.example.com\")).not.toThrow();\n    expect(() => url.parse(\"https://blog.example.com\")).not.toThrow();\n  });\n\n  it(\"should handle URLs with paths correctly\", () => {\n    expect(() => url.parse(\"http://example.com/path\")).not.toThrow();\n    expect(() => url.parse(\"https://example.com/another/path\")).not.toThrow();\n  });\n\n  it(\"should handle URLs with subdomains that are blocked\", () => {\n    expect(() => url.parse(\"https://sub.facebook.com\")).toThrow(\"Firecrawl currently does not support social media scraping due to policy restrictions. We're actively working on building support for it.\");\n  });\n\n  it(\"should handle URLs with paths that are blocked\", () => {\n    expect(() => url.parse(\"http://facebook.com/path\")).toThrow(\"Firecrawl currently does not support social media scraping due to policy restrictions. We're actively working on building support for it.\");\n    expect(() => url.parse(\"https://facebook.com/another/path\")).toThrow(\"Firecrawl currently does not support social media scraping due to policy restrictions. We're actively working on building support for it.\");\n  });\n  \n  it(\"should reject malformed URLs starting with 'http://http'\", () => {\n    expect(() => url.parse(\"http://http://example.com\")).toThrow(\"Invalid URL. Invalid protocol.\");\n  });\n\n  it(\"should reject malformed URLs containing multiple 'http://'\", () => {\n    expect(() => url.parse(\"http://example.com/http://example.com\")).not.toThrow();\n  });\n\n  it(\"should reject malformed URLs containing multiple 'http://'\", () => {\n    expect(() => url.parse(\"http://ex ample.com/\")).toThrow(\"Invalid URL\");\n  });\n})"]}
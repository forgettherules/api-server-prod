{"version":3,"file":"scrape-status.js","sourceRoot":"","sources":["../../../../src/controllers/v1/scrape-status.ts"],"names":[],"mappings":";;;AACA,2DAAqE;AACrE,8DAAsE;AAE/D,KAAK,UAAU,sBAAsB,CAAC,GAAQ,EAAE,GAAQ;IAC7D,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,sCAAuB,CAAC;QAC5C,MAAM,UAAU,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAChD,GAAG,CAAC,MAAM,CAAC,aAAa,CAAW,CAAC;QACtC,MAAM,OAAO,GAAG,UAAU,CAAC;QAC3B,MAAM,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEnC,MAAM,GAAG,GAAG,MAAM,IAAA,0CAA0B,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,YAAY,GAAG;YACnB,sCAAsC;YACtC,sCAAsC;SACvC,CAAC;QAEF,IAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,EAAC,CAAC;YACvC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,8CAA8C;aACtD,CAAC,CAAC;QACL,CAAC;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;SACnB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,IAAI,mBAAmB,EAAE,CAAC;YACnE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,8CAA8C;aACtD,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,+BAA+B;aACvC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;AACH,CAAC;AArCD,wDAqCC","sourcesContent":["import { Response } from \"express\";\nimport { supabaseGetJobByIdOnlyData } from \"../../lib/supabase-jobs\";\nimport { scrapeStatusRateLimiter } from \"../../services/rate-limiter\";\n\nexport async function scrapeStatusController(req: any, res: any) {\n  try {\n    const rateLimiter = scrapeStatusRateLimiter;\n    const incomingIP = (req.headers[\"x-forwarded-for\"] ||\n      req.socket.remoteAddress) as string;\n    const iptoken = incomingIP;\n    await rateLimiter.consume(iptoken);\n\n    const job = await supabaseGetJobByIdOnlyData(req.params.jobId);\n    const allowedTeams = [\n      \"41bdbfe1-0579-4d9b-b6d5-809f16be12f5\", \n      \"511544f2-2fce-4183-9c59-6c29b02c69b5\"\n    ];\n\n    if(!allowedTeams.includes(job?.team_id)){\n      return res.status(403).json({\n        success: false,\n        error: \"You are not allowed to access this resource.\",\n      });\n    }\n    return res.status(200).json({\n      success: true,\n      data: job?.docs[0],\n    });\n  } catch (error) {\n    if (error instanceof Error && error.message == \"Too Many Requests\") {\n      return res.status(429).json({\n        success: false,\n        error: \"Rate limit exceeded. Please try again later.\",\n      });\n    } else {\n      return res.status(500).json({\n        success: false,\n        error: \"An unexpected error occurred.\",\n      });\n    }\n  }\n}\n"]}
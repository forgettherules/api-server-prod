{"version":3,"file":"crawl-status-ws.js","sourceRoot":"","sources":["../../../../src/controllers/v1/crawl-status-ws.ts"],"names":[],"mappings":"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","sourcesContent":["import { authMiddleware } from \"../../routes/v1\";\nimport { RateLimiterMode } from \"../../types\";\nimport { authenticateUser } from \"../auth\";\nimport { CrawlStatusParams, CrawlStatusResponse, Document, ErrorResponse, RequestWithAuth } from \"./types\";\nimport { WebSocket } from \"ws\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { logger } from \"../../lib/logger\";\nimport { getCrawl, getCrawlExpiry, getCrawlJobs, getDoneJobsOrdered, getDoneJobsOrderedLength, getThrottledJobs, isCrawlFinished, isCrawlFinishedLocked } from \"../../lib/crawl-redis\";\nimport { getScrapeQueue } from \"../../services/queue-service\";\nimport { getJob, getJobs } from \"./crawl-status\";\nimport * as Sentry from \"@sentry/node\";\nimport { Job, JobState } from \"bullmq\";\n\ntype ErrorMessage = {\n  type: \"error\",\n  error: string,\n}\n\ntype CatchupMessage = {\n  type: \"catchup\",\n  data: CrawlStatusResponse,\n}\n\ntype DocumentMessage = {\n  type: \"document\",\n  data: Document,\n}\n\ntype DoneMessage = { type: \"done\" }\n\ntype Message = ErrorMessage | CatchupMessage | DoneMessage | DocumentMessage;\n\nfunction send(ws: WebSocket, msg: Message) {\n  if (ws.readyState === 1) {\n    return new Promise((resolve, reject) => {\n      ws.send(JSON.stringify(msg), (err) => {\n        if (err) reject(err);\n        else resolve(null);\n      });\n    });\n  }\n}\n\nfunction close(ws: WebSocket, code: number, msg: Message) {\n  if (ws.readyState <= 1) {\n    ws.close(code, JSON.stringify(msg));\n  }\n}\n\nasync function crawlStatusWS(ws: WebSocket, req: RequestWithAuth<CrawlStatusParams, undefined, undefined>) {\n  const sc = await getCrawl(req.params.jobId);\n  if (!sc) {\n    return close(ws, 1008, { type: \"error\", error: \"Job not found\" });\n  }\n\n  if (sc.team_id !== req.auth.team_id) {\n    return close(ws, 3003, { type: \"error\", error: \"Forbidden\" });\n  }\n\n  let doneJobIDs: string[] = [];\n  let finished = false;\n\n  const loop = async () => {\n    if (finished) return;\n\n    const jobIDs = await getCrawlJobs(req.params.jobId);\n\n    if (jobIDs.length === doneJobIDs.length) {\n      return close(ws, 1000, { type: \"done\" });\n    }\n\n    const notDoneJobIDs = jobIDs.filter(x => !doneJobIDs.includes(x));\n    const jobStatuses = await Promise.all(notDoneJobIDs.map(async x => [x, await getScrapeQueue().getJobState(x)]));\n    const newlyDoneJobIDs: string[] = jobStatuses.filter(x => x[1] === \"completed\" || x[1] === \"failed\").map(x => x[0]);\n    const newlyDoneJobs: Job[] = (await Promise.all(newlyDoneJobIDs.map(x => getJob(x)))).filter(x => x !== undefined) as Job[]\n\n    for (const job of newlyDoneJobs) {\n      if (job.returnvalue) {\n        send(ws, {\n          type: \"document\",\n          data: job.returnvalue,\n        })\n      } else {\n        return close(ws, 3000, { type: \"error\", error: job.failedReason });\n      }\n    }\n\n    doneJobIDs.push(...newlyDoneJobIDs);\n\n    setTimeout(loop, 1000);\n  };\n\n  setTimeout(loop, 1000);\n\n  doneJobIDs = await getDoneJobsOrdered(req.params.jobId);\n\n  let jobIDs = await getCrawlJobs(req.params.jobId);\n  let jobStatuses = await Promise.all(jobIDs.map(async x => [x, await getScrapeQueue().getJobState(x)] as const));\n  const throttledJobs = new Set(...await getThrottledJobs(req.auth.team_id));\n\n  const throttledJobsSet = new Set(throttledJobs);\n\n  const validJobStatuses: [string, JobState | \"unknown\"][] = [];\n  const validJobIDs: string[] = [];\n\n  for (const [id, status] of jobStatuses) {\n    if (!throttledJobsSet.has(id) && status !== \"failed\" && status !== \"unknown\") {\n      validJobStatuses.push([id, status]);\n      validJobIDs.push(id);\n    }\n  }\n\n  const status: Exclude<CrawlStatusResponse, ErrorResponse>[\"status\"] = sc.cancelled ? \"cancelled\" : validJobStatuses.every(x => x[1] === \"completed\") ? \"completed\" : \"scraping\";\n\n  jobIDs = validJobIDs; // Use validJobIDs instead of jobIDs for further processing\n\n  const doneJobs = await getJobs(doneJobIDs);\n  const data = doneJobs.map(x => x.returnvalue);\n\n  send(ws, {\n    type: \"catchup\",\n    data: {\n      success: true,\n      status,\n      total: jobIDs.length,\n      completed: doneJobIDs.length,\n      creditsUsed: jobIDs.length,\n      expiresAt: (await getCrawlExpiry(req.params.jobId)).toISOString(),\n      data: data,\n    }\n  });\n\n  if (status !== \"scraping\") {\n    finished = true;\n    return close(ws, 1000, { type: \"done\" });\n  }\n}\n\n// Basically just middleware and error wrapping\nexport async function crawlStatusWSController(ws: WebSocket, req: RequestWithAuth<CrawlStatusParams, undefined, undefined>) {\n  try {\n    const auth = await authenticateUser(\n      req,\n      null,\n      RateLimiterMode.CrawlStatus,\n    );\n\n    if (!auth.success) {\n      return close(ws, 3000, {\n        type: \"error\",\n        error: auth.error,\n      });\n    }\n\n    const { team_id, plan } = auth;\n\n    req.auth = { team_id, plan };\n\n    await crawlStatusWS(ws, req);\n  } catch (err) {\n    Sentry.captureException(err);\n\n    const id = uuidv4();\n    let verbose = JSON.stringify(err);\n    if (verbose === \"{}\") {\n      if (err instanceof Error) {\n        verbose = JSON.stringify({\n          message: err.message,\n          name: err.name,\n          stack: err.stack,\n        });\n      }\n    }\n\n    logger.error(\"Error occurred in WebSocket! (\" + req.path + \") -- ID \" + id + \" -- \" + verbose);\n    return close(ws, 1011, {\n      type: \"error\",\n      error: \"An unexpected error occurred. Please contact help@firecrawl.com for help. Your exception ID is \" + id\n    });\n  }\n}\n"]}
{"version":3,"file":"googlesearch.js","sourceRoot":"","sources":["../../../src/search/googlesearch.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport * as querystring from 'querystring';\nimport { SearchResult } from '../../src/lib/entities';\nimport { logger } from '../../src/lib/logger';\n\nconst _useragent_list = [\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.62',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0'\n];\n\nfunction get_useragent(): string {\n    return _useragent_list[Math.floor(Math.random() * _useragent_list.length)];\n}\n\nasync function _req(term: string, results: number, lang: string, country: string, start: number, proxies: any, timeout: number, tbs: string | undefined = undefined, filter: string | undefined = undefined) {\n    const params = {\n        \"q\": term,\n        \"num\": results,  // Number of results to return\n        \"hl\": lang,\n        \"gl\": country,\n        \"start\": start,\n    };\n    if (tbs) {\n        params[\"tbs\"] = tbs;\n    }\n    if (filter) {\n        params[\"filter\"] = filter;\n    }\n    try {\n        const resp = await axios.get(\"https://www.google.com/search\", {\n            headers: {\n                \"User-Agent\": get_useragent()\n            },\n            params: params,\n            proxy: proxies,\n            timeout: timeout,\n        });\n        return resp;\n    } catch (error) {\n        if (error.response && error.response.status === 429) {\n            throw new Error('Google Search: Too many requests, try again later.');\n        }\n        throw error;\n    }\n}\n\n\n\nexport async function googleSearch(term: string, advanced = false, num_results = 7, tbs = undefined as string | undefined, filter = undefined as string | undefined, lang = \"en\", country = \"us\", proxy = undefined as string | undefined, sleep_interval = 0, timeout = 5000, ) :Promise<SearchResult[]> {\n    let proxies: any = null;\n    if (proxy) {\n        if (proxy.startsWith(\"https\")) {\n            proxies = {\"https\": proxy};\n        } else {\n            proxies = {\"http\": proxy};\n        }\n    }\n\n    // TODO: knowledge graph, answer box, etc.\n\n    let start = 0;\n    let results : SearchResult[] = [];\n    let attempts = 0;\n    const maxAttempts = 20; // Define a maximum number of attempts to prevent infinite loop\n    while (start < num_results && attempts < maxAttempts) {\n        try {\n            const resp = await _req(term, num_results - start, lang, country, start, proxies, timeout, tbs, filter);\n            const $ = cheerio.load(resp.data);\n            const result_block = $(\"div.g\");\n            if (result_block.length === 0) {\n                start += 1;\n                attempts += 1;\n            } else {\n                attempts = 0; // Reset attempts if we have results\n            }\n            result_block.each((index, element) => {\n                const linkElement = $(element).find(\"a\");\n                const link = linkElement && linkElement.attr(\"href\") ? linkElement.attr(\"href\") : null;\n                const title = $(element).find(\"h3\");\n                const ogImage = $(element).find(\"img\").eq(1).attr(\"src\");\n                const description_box = $(element).find(\"div[style='-webkit-line-clamp:2']\");\n                const answerBox = $(element).find(\".mod\").text();\n                if (description_box) {\n                    const description = description_box.text();\n                    if (link && title && description) {\n                        start += 1;\n                        results.push(new SearchResult(link, title.text(), description));\n                    }\n                }\n            });\n            await new Promise(resolve => setTimeout(resolve, sleep_interval * 1000));\n        } catch (error) {\n            if (error.message === 'Too many requests') {\n                logger.warn('Too many requests, breaking the loop');\n                break;\n            }\n            throw error;\n        }\n\n        if (start === 0) {\n            return results;\n        }\n    }\n    if (attempts >= maxAttempts) {\n      logger.warn('Max attempts reached, breaking the loop');\n    }\n    return results\n}\n"]}